#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: Compiled\EnvironmentMapEffect_PSEnvMapSpherePixelLightingNoFog.pdb
; shader hash: d83ce0e58a670403122f5c818589c9ee
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [384 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <3 x float>, float, float, <4 x float>, <3 x float>, [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSEnvMapSpherePixelLightingNoFog() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %19 = extractvalue %dx.types.ResRet.f32 %18, 0
  %20 = extractvalue %dx.types.ResRet.f32 %18, 1
  %21 = extractvalue %dx.types.ResRet.f32 %18, 2
  %22 = extractvalue %dx.types.ResRet.f32 %18, 3
  %23 = fmul fast float %19, %6
  %24 = fmul fast float %20, %7
  %25 = fmul fast float %21, %8
  %26 = fmul fast float %22, %9
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = fsub fast float %28, %13
  %32 = fsub fast float %29, %14
  %33 = fsub fast float %30, %15
  %34 = call float @dx.op.dot3.f32(i32 55, float %31, float %32, float %33, float %31, float %32, float %33)  ; Dot3(ax,ay,az,bx,by,bz)
  %35 = call float @dx.op.unary.f32(i32 25, float %34)  ; Rsqrt(value)
  %36 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %37 = call float @dx.op.unary.f32(i32 25, float %36)  ; Rsqrt(value)
  %38 = fmul fast float %37, %10
  %39 = fmul fast float %37, %11
  %40 = fmul fast float %37, %12
  %41 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.f32 %41, 0
  %43 = extractvalue %dx.types.CBufRet.f32 %41, 1
  %44 = extractvalue %dx.types.CBufRet.f32 %41, 2
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.f32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.f32 %45, 2
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 2
  %65 = fsub fast float -0.000000e+00, %43
  %66 = fsub fast float -0.000000e+00, %44
  %67 = fsub fast float -0.000000e+00, %51
  %68 = fsub fast float -0.000000e+00, %52
  %69 = fsub fast float -0.000000e+00, %59
  %70 = fsub fast float -0.000000e+00, %60
  %71 = fmul fast float %38, %42
  %72 = fsub fast float -0.000000e+00, %71
  %73 = call float @dx.op.tertiary.f32(i32 46, float %65, float %39, float %72)  ; FMad(a,b,c)
  %74 = call float @dx.op.tertiary.f32(i32 46, float %66, float %40, float %73)  ; FMad(a,b,c)
  %75 = fmul fast float %38, %50
  %76 = fsub fast float -0.000000e+00, %75
  %77 = call float @dx.op.tertiary.f32(i32 46, float %67, float %39, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %68, float %40, float %77)  ; FMad(a,b,c)
  %79 = fmul fast float %38, %58
  %80 = fsub fast float -0.000000e+00, %79
  %81 = call float @dx.op.tertiary.f32(i32 46, float %69, float %39, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.tertiary.f32(i32 46, float %70, float %40, float %81)  ; FMad(a,b,c)
  %83 = fcmp fast olt float %74, 0.000000e+00
  %84 = fcmp fast olt float %78, 0.000000e+00
  %85 = fcmp fast olt float %82, 0.000000e+00
  %86 = select i1 %83, float 0.000000e+00, float 1.000000e+00
  %87 = select i1 %84, float 0.000000e+00, float 1.000000e+00
  %88 = select i1 %85, float 0.000000e+00, float 1.000000e+00
  %89 = fmul fast float %86, %74
  %90 = fmul fast float %87, %78
  %91 = fmul fast float %88, %82
  %92 = fmul fast float %89, %46
  %93 = call float @dx.op.tertiary.f32(i32 46, float %90, float %54, float %92)  ; FMad(a,b,c)
  %94 = call float @dx.op.tertiary.f32(i32 46, float %91, float %62, float %93)  ; FMad(a,b,c)
  %95 = fmul fast float %89, %47
  %96 = call float @dx.op.tertiary.f32(i32 46, float %90, float %55, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %91, float %63, float %96)  ; FMad(a,b,c)
  %98 = fmul fast float %89, %48
  %99 = call float @dx.op.tertiary.f32(i32 46, float %90, float %56, float %98)  ; FMad(a,b,c)
  %100 = call float @dx.op.tertiary.f32(i32 46, float %91, float %64, float %99)  ; FMad(a,b,c)
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = fmul fast float %102, %94
  %106 = fmul fast float %103, %97
  %107 = fmul fast float %104, %100
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 0
  %110 = extractvalue %dx.types.CBufRet.f32 %108, 1
  %111 = extractvalue %dx.types.CBufRet.f32 %108, 2
  %112 = fadd fast float %105, %109
  %113 = fadd fast float %106, %110
  %114 = fadd fast float %107, %111
  %115 = fmul fast float %23, %112
  %116 = fmul fast float %24, %113
  %117 = fmul fast float %25, %114
  %118 = fmul fast float %35, %31
  %119 = fsub fast float -0.000000e+00, %118
  %120 = fmul fast float %35, %32
  %121 = fsub fast float -0.000000e+00, %120
  %122 = fmul fast float %35, %33
  %123 = fsub fast float -0.000000e+00, %122
  %124 = call float @dx.op.dot3.f32(i32 55, float %119, float %121, float %123, float %38, float %39, float %40)  ; Dot3(ax,ay,az,bx,by,bz)
  %125 = fmul fast float %124, 2.000000e+00
  %126 = fmul fast float %125, %38
  %127 = fmul fast float %125, %39
  %128 = fmul fast float %125, %40
  %129 = fsub fast float %119, %126
  %130 = fsub fast float %121, %127
  %131 = fsub fast float %123, %128
  %132 = fmul fast float %129, %129
  %133 = fmul fast float %130, %130
  %134 = fadd fast float %132, %133
  %135 = fadd fast float %131, 1.000000e+00
  %136 = fmul fast float %135, %135
  %137 = fadd fast float %134, %136
  %138 = call float @dx.op.unary.f32(i32 24, float %137)  ; Sqrt(value)
  %139 = fmul fast float %138, 2.000000e+00
  %140 = fdiv fast float %129, %139
  %141 = fadd fast float %140, 5.000000e-01
  %142 = fdiv fast float %130, %139
  %143 = fadd fast float %142, 5.000000e-01
  %144 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %141, float %143, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %145 = extractvalue %dx.types.ResRet.f32 %144, 0
  %146 = extractvalue %dx.types.ResRet.f32 %144, 1
  %147 = extractvalue %dx.types.ResRet.f32 %144, 2
  %148 = extractvalue %dx.types.ResRet.f32 %144, 3
  %149 = fmul fast float %145, %26
  %150 = fmul fast float %146, %26
  %151 = fmul fast float %147, %26
  %152 = fmul fast float %148, %26
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = fsub fast float %149, %115
  %156 = fsub fast float %150, %116
  %157 = fsub fast float %151, %117
  %158 = fmul fast float %155, %154
  %159 = fmul fast float %156, %154
  %160 = fmul fast float %157, %154
  %161 = fadd fast float %158, %115
  %162 = fadd fast float %159, %116
  %163 = fadd fast float %160, %117
  %164 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %165 = extractvalue %dx.types.CBufRet.f32 %164, 0
  %166 = extractvalue %dx.types.CBufRet.f32 %164, 1
  %167 = extractvalue %dx.types.CBufRet.f32 %164, 2
  %168 = fmul fast float %165, %152
  %169 = fmul fast float %166, %152
  %170 = fmul fast float %167, %152
  %171 = fadd fast float %161, %168
  %172 = fadd fast float %162, %169
  %173 = fadd fast float %163, %170
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %171)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %172)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %173)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %26)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{!5, null, !9, !11}
!5 = !{!6, !8}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{!10}
!10 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!11 = !{!12, !13}
!12 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!13 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!14 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!15 = !{void ()* @PSEnvMapSpherePixelLightingNoFog, !"PSEnvMapSpherePixelLightingNoFog", !16, !4, null}
!16 = !{!17, !28, null}
!17 = !{!18, !21, !24, !26}
!18 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 2, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 3}
!21 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 1, i8 0, !23}
!22 = !{i32 1}
!23 = !{i32 3, i32 7}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 3, i32 2, i8 0, !23}
!25 = !{i32 2}
!26 = !{i32 3, !"COLOR", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 3, i8 0, !27}
!27 = !{i32 3, i32 15}
!28 = !{!29}
!29 = !{i32 0, !"SV_Target", i8 9, i8 16, !19, i8 0, i32 1, i8 4, i32 0, i8 0, !27}

#endif

const unsigned char EnvironmentMapEffect_PSEnvMapSpherePixelLightingNoFog[] = {
  0x44, 0x58, 0x42, 0x43, 0x50, 0x0c, 0xa0, 0x79, 0xe3, 0xad, 0x40, 0x16,
  0x2d, 0x1d, 0xcb, 0x64, 0x0e, 0xc5, 0x5f, 0x8b, 0x01, 0x00, 0x00, 0x00,
  0x8f, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x3b, 0x01, 0x00, 0x00,
  0xc3, 0x02, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0xfb, 0x03, 0x00, 0x00,
  0x17, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x32, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67,
  0x65, 0x74, 0x00, 0x50, 0x53, 0x56, 0x30, 0x80, 0x01, 0x00, 0x00, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x52,
  0x54, 0x53, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
  0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01,
  0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xbc,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e, 0x48, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x42, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c,
  0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
  0x61, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x45,
  0x6e, 0x76, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x50,
  0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
  0x4e, 0x6f, 0x46, 0x6f, 0x67, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x48,
  0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8,
  0x3c, 0xe0, 0xe5, 0x8a, 0x67, 0x04, 0x03, 0x12, 0x2f, 0x5c, 0x81, 0x85,
  0x89, 0xc9, 0xee, 0x44, 0x58, 0x49, 0x4c, 0x70, 0x0c, 0x00, 0x00, 0x60,
  0x00, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00,
  0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x58, 0x0c, 0x00, 0x00, 0x42,
  0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x13, 0x03, 0x00, 0x00, 0x0b,
  0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07,
  0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92,
  0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80,
  0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38,
  0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43,
  0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11,
  0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04,
  0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b,
  0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84,
  0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff,
  0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x32,
  0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04,
  0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b,
  0x84, 0xc4, 0x4c, 0x10, 0xa0, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66,
  0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44,
  0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xe4, 0xa6, 0xe1,
  0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25, 0xa4, 0x95, 0x98, 0xfc, 0xe2,
  0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50, 0x71, 0xcf, 0x70, 0xf9, 0x13,
  0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x28, 0x58, 0x0a, 0xa3,
  0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10, 0xc4, 0x40, 0x4d, 0x41, 0x06,
  0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29, 0xc3, 0x40, 0x0c, 0x14, 0x1d,
  0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4, 0x73, 0x1b, 0x55, 0xac, 0xc4,
  0xe4, 0x17, 0xb7, 0x8d, 0x88, 0x61, 0x18, 0x86, 0x42, 0x4c, 0x04, 0x43,
  0x10, 0x55, 0x8a, 0x81, 0x18, 0x86, 0x81, 0xac, 0x39, 0x82, 0xa0, 0x18,
  0x0c, 0x51, 0x10, 0x04, 0x46, 0xd9, 0x40, 0xc0, 0x30, 0x02, 0x31, 0xcc,
  0xd4, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4,
  0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4,
  0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c,
  0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74,
  0xe0, 0x07, 0x60, 0xe0, 0x07, 0x7a, 0xa0, 0x07, 0xed, 0x90, 0x0e, 0xf0,
  0x30, 0x0f, 0xbf, 0x40, 0x0f, 0xf9, 0x00, 0x0f, 0xe5, 0x80, 0x02, 0x62,
  0x26, 0x31, 0x18, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98, 0x07, 0x37, 0xa0,
  0x85, 0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07, 0x79, 0x28, 0x07, 0x39, 0x20,
  0x05, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a, 0x78, 0x07, 0x79, 0xe0,
  0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0x60, 0x03, 0x30, 0xa0,
  0x03, 0x3f, 0x00, 0x03, 0x3f, 0x40, 0x02, 0xd7, 0x91, 0x37, 0x8c, 0x30,
  0x0c, 0x39, 0x00, 0x26, 0x01, 0x77, 0xd5, 0xe1, 0x48, 0xd3, 0x02, 0x60,
  0x0e, 0x35, 0xf9, 0x29, 0x10, 0x01, 0x0c, 0x31, 0x11, 0x91, 0x84, 0x1a,
  0x70, 0x18, 0x38, 0x30, 0x0c, 0x41, 0x90, 0x13, 0x43, 0x91, 0xc6, 0x9b,
  0xa4, 0x29, 0xa2, 0x84, 0xc9, 0x67, 0x01, 0xe6, 0x59, 0x88, 0x88, 0x9d,
  0x80, 0x89, 0x40, 0x01, 0x41, 0x65, 0x4a, 0x10, 0x00, 0x00, 0x00, 0x13,
  0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68,
  0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a,
  0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71,
  0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d,
  0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x34, 0x40,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x79,
  0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8,
  0x13, 0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x90, 0x87, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x21, 0x8f, 0x05, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x43, 0x9e, 0x0c, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xb2, 0x40, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x32,
  0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6,
  0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x18, 0x8a, 0xa0, 0x24, 0x0a,
  0xd0, 0xa0, 0x0c, 0xca, 0xa1, 0x3c, 0xa8, 0x28, 0x89, 0x11, 0x80, 0x22,
  0x28, 0x84, 0x32, 0x28, 0x10, 0xfa, 0x66, 0x00, 0x88, 0x9c, 0x01, 0x20,
  0x73, 0x06, 0x80, 0xce, 0xb1, 0x24, 0x88, 0x78, 0x1e, 0x00, 0x38, 0x8e,
  0x03, 0x38, 0x8e, 0x03, 0x08, 0x04, 0xe2, 0x01, 0x00, 0x00, 0x00, 0x79,
  0x18, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46,
  0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b,
  0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1,
  0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa,
  0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10,
  0x04, 0x13, 0x04, 0x22, 0x99, 0x20, 0x10, 0xca, 0x06, 0x61, 0x20, 0x26,
  0x08, 0xc4, 0xb2, 0x41, 0x18, 0x0c, 0x0a, 0x70, 0x73, 0x1b, 0x06, 0xc4,
  0x20, 0x26, 0x08, 0x1f, 0x46, 0x60, 0x82, 0x40, 0x30, 0x13, 0x04, 0xa2,
  0xd9, 0x20, 0x10, 0xcd, 0x86, 0x84, 0x50, 0x16, 0x82, 0x18, 0x18, 0xc2,
  0xd9, 0x90, 0x0c, 0xca, 0x42, 0x0c, 0x03, 0x43, 0x38, 0x1b, 0x84, 0x07,
  0x9a, 0x20, 0x90, 0x41, 0x36, 0x41, 0x20, 0x9c, 0x0d, 0x08, 0x21, 0x2d,
  0x04, 0x31, 0x4c, 0xc0, 0x86, 0x80, 0x9a, 0x20, 0x98, 0x81, 0xb6, 0x01,
  0x21, 0xac, 0x85, 0x20, 0x06, 0x02, 0xd8, 0x80, 0x0c, 0xd6, 0x42, 0x0c,
  0x03, 0x01, 0x6c, 0x10, 0x2e, 0x6c, 0x03, 0x11, 0x01, 0x55, 0x36, 0x41,
  0x38, 0x83, 0x6d, 0x43, 0xb0, 0x4d, 0x10, 0x04, 0x80, 0x60, 0x00, 0x35,
  0x55, 0xe4, 0x66, 0xd7, 0x14, 0x06, 0x37, 0x05, 0x87, 0x56, 0x26, 0x57,
  0x06, 0x95, 0x86, 0x57, 0xc6, 0xc6, 0x94, 0x76, 0x86, 0x46, 0x97, 0xe6,
  0x76, 0xe6, 0xf4, 0x66, 0xf4, 0x76, 0x46, 0x84, 0xaa, 0x08, 0x6b, 0xe8,
  0xe9, 0x49, 0x8a, 0x68, 0x82, 0x50, 0x48, 0x13, 0x84, 0x62, 0xda, 0x10,
  0x10, 0x13, 0x84, 0x82, 0x9a, 0x20, 0x10, 0xcf, 0x06, 0x81, 0x0c, 0xc8,
  0x60, 0xc3, 0x42, 0x7c, 0x60, 0x10, 0x06, 0x62, 0x30, 0x06, 0xc3, 0x18,
  0x10, 0x61, 0x50, 0x06, 0x1b, 0x82, 0x61, 0x82, 0x50, 0x54, 0x13, 0x04,
  0x02, 0xda, 0x20, 0x90, 0x41, 0x1a, 0x6c, 0x58, 0x86, 0x0f, 0x0c, 0xc2,
  0xe0, 0x0c, 0xc6, 0x60, 0x40, 0x83, 0x21, 0x0c, 0xd4, 0x60, 0x43, 0xc0,
  0x4c, 0x10, 0x0a, 0x6b, 0xc3, 0xc2, 0x7c, 0x60, 0x10, 0x06, 0x6c, 0x30,
  0x06, 0x43, 0x1b, 0x30, 0x61, 0xa0, 0x06, 0x2c, 0x86, 0x9e, 0x98, 0x9e,
  0xa4, 0x26, 0x08, 0x44, 0xb4, 0x41, 0x20, 0x03, 0x38, 0xd8, 0xb0, 0x90,
  0xc1, 0x1b, 0x80, 0x41, 0x18, 0x88, 0xc1, 0x18, 0x0c, 0x68, 0x40, 0x06,
  0x61, 0x10, 0x07, 0x1b, 0x08, 0x33, 0x58, 0x03, 0x37, 0x90, 0x03, 0x26,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x13, 0x84, 0xe2,
  0xda, 0xb0, 0x10, 0x74, 0x00, 0x06, 0x75, 0x20, 0x06, 0x61, 0x30, 0xa0,
  0x01, 0x11, 0x06, 0x71, 0xb0, 0x21, 0xb0, 0x83, 0x0d, 0xc3, 0x1c, 0xdc,
  0x01, 0xb0, 0xa1, 0xe8, 0x3c, 0x3c, 0xd0, 0x80, 0x2a, 0x6c, 0x6c, 0x76,
  0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x82, 0xa0, 0x0a, 0x19,
  0x9e, 0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda, 0x9b, 0xdb, 0x94, 0x80, 0x68,
  0x42, 0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66, 0x57, 0x26, 0x37, 0x25, 0x30,
  0xea, 0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85, 0x91, 0x95, 0xc9, 0x35, 0xbd,
  0x91, 0x95, 0xb1, 0x4d, 0x09, 0x90, 0x32, 0x64, 0x78, 0x2e, 0x72, 0x65,
  0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x82, 0xac, 0x0e, 0x19,
  0x9e, 0x8b, 0x5d, 0x5a, 0xd9, 0x5d, 0x12, 0xd9, 0x14, 0x5d, 0x18, 0x5d,
  0xd9, 0x94, 0x60, 0xab, 0x43, 0x86, 0xe7, 0x52, 0xe6, 0x46, 0x27, 0x97,
  0x07, 0xf5, 0x96, 0xe6, 0x46, 0x37, 0x37, 0x25, 0xc0, 0x03, 0x00, 0x79,
  0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4,
  0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c,
  0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00,
  0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2,
  0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38,
  0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d,
  0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87,
  0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87,
  0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30,
  0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde,
  0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b,
  0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c,
  0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07,
  0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87,
  0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87,
  0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87,
  0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0,
  0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc,
  0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4,
  0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39,
  0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38,
  0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b,
  0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03,
  0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60,
  0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22,
  0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec,
  0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8,
  0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06,
  0x00, 0x06, 0x29, 0xeb, 0x35, 0x95, 0x09, 0x3c, 0xec, 0x73, 0x10, 0x11,
  0x91, 0x22, 0x17, 0xb1, 0x94, 0x88, 0x71, 0x4c, 0x48, 0x63, 0x9c, 0xce,
  0xe7, 0x18, 0x66, 0xb0, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45,
  0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7,
  0x6d, 0x08, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44,
  0x08, 0x34, 0xc3, 0x42, 0x18, 0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83,
  0x33, 0xdd, 0x7e, 0x71, 0xdb, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe,
  0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x03, 0xd0,
  0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x00, 0xf3, 0x2c, 0x84, 0x5f, 0xdc, 0xb6,
  0x09, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4,
  0xf4, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x1d, 0x48, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x05, 0xcf,
  0x70, 0xf9, 0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x00,
  0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x41, 0x01, 0x00, 0x00, 0x13,
  0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x84,
  0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14, 0x4c, 0x41, 0x14, 0x45, 0xc9,
  0xcc, 0x00, 0x14, 0x42, 0x71, 0x95, 0x5d, 0xc9, 0x95, 0x42, 0xb9, 0x15,
  0x1e, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf0, 0x37, 0x46, 0x00, 0x82,
  0x20, 0x08, 0x82, 0xc1, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0x8d, 0x00,
  0xcc, 0x00, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0xa0, 0x00, 0x00, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x90, 0xa1, 0x81, 0xd2, 0x9d, 0xc1, 0x19,
  0x50, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x90, 0xa5, 0xc1, 0xe2, 0x9d,
  0xc1, 0x19, 0x54, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x90, 0xa9, 0x01,
  0xc3, 0xa5, 0x41, 0x1a, 0x58, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x90,
  0xad, 0x41, 0xd3, 0xa5, 0x41, 0x1a, 0x5c, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x90, 0xb1, 0x81, 0x03, 0x06, 0x6a, 0xa0, 0x06, 0xd8, 0x88, 0x41,
  0x02, 0x80, 0x20, 0x18, 0x18, 0x74, 0x20, 0x99, 0xc1, 0x1a, 0x88, 0xc1,
  0x34, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1d, 0x4c, 0x67, 0xc0,
  0x06, 0x19, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1d, 0x50,
  0x68, 0xd0, 0x06, 0x63, 0x50, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81,
  0x71, 0x07, 0x55, 0x1a, 0xb8, 0x81, 0x18, 0x58, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0xe0, 0x81, 0xd5, 0x06, 0x6f, 0x60, 0x06, 0xd7, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x79, 0x70, 0xb9, 0x01, 0x1c, 0x74,
  0xd8, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7a, 0x80, 0xbd, 0x41,
  0x1c, 0x9c, 0x41, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1e,
  0x64, 0x73, 0x20, 0x07, 0x69, 0xa0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0xc1, 0x07, 0x1a, 0x1d, 0xcc, 0x01, 0x18, 0x6c, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xf4, 0xc1, 0x56, 0x07, 0x74, 0xa0, 0x06, 0xdc,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7e, 0xc0, 0xd5, 0x41, 0x1d,
  0xb0, 0x41, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1f, 0x74,
  0x76, 0x60, 0x07, 0x63, 0xe0, 0x8d, 0x18, 0x3c, 0x00, 0x08, 0x82, 0x41,
  0xe3, 0x07, 0x18, 0xe4, 0x08, 0xc1, 0x34, 0xdd, 0xc1, 0x1d, 0x7c, 0xd3,
  0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26,
  0x10, 0x83, 0x11, 0x91, 0x7c, 0x8c, 0x88, 0xe4, 0x63, 0x44, 0x24, 0x1f,
  0x23, 0x22, 0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0x45, 0x0a,
  0x65, 0x60, 0xa9, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x20, 0xd8, 0x20, 0xc5, 0xc7, 0x06, 0x29, 0x3e, 0x36, 0x48, 0xf1,
  0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83, 0xa7, 0x15, 0xd2, 0x60, 0x10,
  0x82, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x6a, 0x85,
  0x38, 0x08, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0xe0, 0x79, 0x85, 0x35,
  0xd0, 0x32, 0x4c, 0xcb, 0xb0, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88,
  0x5e, 0x61, 0x0e, 0x02, 0x0b, 0x38, 0xf9, 0x98, 0xc0, 0xc9, 0xc7, 0x06,
  0x4e, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x40, 0xc9, 0xc2, 0x1c,
  0x90, 0x41, 0x1d, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x50, 0xb6, 0x70, 0x07,
  0x68, 0xc0, 0x0a, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09,
  0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x94, 0x2e, 0xec, 0x01,
  0x1b, 0xe4, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0xe5, 0x0b, 0x7f, 0x00,
  0x07, 0xa5, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x40, 0x89, 0xc3, 0x28, 0xd0,
  0x41, 0x2f, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x50, 0xe6, 0x70, 0x0a, 0x78,
  0xf0, 0x0b, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83,
  0x60, 0xa1, 0x60, 0xc5, 0xc7, 0x44, 0xc1, 0x8a, 0x8f, 0x8d, 0x02, 0x14,
  0x1f, 0x23, 0x05, 0x28, 0x3e, 0x56, 0x0a, 0x4a, 0x7c, 0xcc, 0x14, 0x94,
  0xf8, 0x58, 0x18, 0x74, 0xf2, 0x31, 0x54, 0x08, 0xe2, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x56, 0x3c, 0xd0, 0x02, 0x22, 0x06, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x58, 0xf2, 0x50, 0x0b, 0x88, 0x18, 0x04,
  0x56, 0x06, 0x99, 0x7c, 0x8c, 0x15, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x81, 0x55, 0x0f, 0xb8, 0xa0, 0x98, 0x41, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x96, 0x3d, 0xe4, 0x82, 0x62, 0x06, 0x81, 0xa5,
  0x41, 0x25, 0x1f, 0x83, 0x85, 0x20, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x60, 0xe5, 0x03, 0x2f, 0x30, 0x6a, 0x10, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x81, 0xa5, 0x0f, 0xbd, 0xc0, 0xa8, 0x41, 0x30, 0x1c, 0x91,
  0xd4, 0x02, 0xf1, 0x0d, 0x47, 0x18, 0xb6, 0x40, 0x7c, 0xc3, 0x11, 0xc3,
  0x2d, 0x10, 0xdf, 0x74, 0x03, 0x2e, 0xe4, 0xc2, 0x30, 0xdd, 0x90, 0x0b,
  0xba, 0x30, 0x4c, 0x37, 0xe8, 0xc2, 0x2e, 0x0c, 0x36, 0x3c, 0xf2, 0xb1,
  0x81, 0x91, 0x8f, 0x0d, 0x89, 0x7c, 0x6c, 0x70, 0x03, 0xf9, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x81, 0x55, 0x12, 0xe8, 0x30, 0x9c, 0x41, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x96, 0x49, 0xa4, 0xc3, 0x00, 0x06,
  0x81, 0x19, 0x70, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb0,
  0x50, 0x62, 0x1d, 0x8c, 0x34, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xc0, 0x4a, 0x09, 0x76, 0x30, 0xc4, 0x20, 0xb0, 0x44, 0x0e, 0xe4, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd6, 0x4a, 0xb8, 0x43, 0xb2, 0x06,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x58, 0x2c, 0xf1, 0x0e, 0x09,
  0x19, 0x04, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x40, 0xb9, 0xc4, 0x3b,
  0x80, 0x03, 0x4a, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0x82, 0x0d, 0x8b, 0x7c, 0x6c, 0x48, 0xe4, 0x63, 0xc3, 0x21, 0x9f,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa0, 0x6a, 0xc2, 0x1e, 0xce, 0x81,
  0x25, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1,
  0x8e, 0x01, 0x3e, 0x76, 0x0c, 0xf0, 0xb1, 0x63, 0x80, 0x8f, 0xf1, 0xc2,
  0x20, 0x1f, 0xe3, 0x85, 0x41, 0x3e, 0xc6, 0x0b, 0x83, 0x7c, 0x6c, 0x16,
  0x6e, 0x41, 0x3e, 0x76, 0x0f, 0x41, 0x7c, 0xac, 0x16, 0x70, 0x41, 0x3e,
  0x96, 0x0f, 0x41, 0x7c, 0xec, 0x16, 0x72, 0x41, 0x3e, 0xb6, 0x0f, 0x41,
  0x7c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0xe0, 0x39, 0x8b, 0x91, 0x28,
  0x86, 0xc0, 0x16, 0x6a, 0x81, 0x16, 0x2c, 0x08, 0x09, 0xf9, 0x58, 0x80,
  0x0b, 0xf2, 0x31, 0x01, 0x17, 0xe4, 0x63, 0x03, 0x2e, 0xc8, 0xc7, 0x94,
  0x21, 0x3e, 0x96, 0x0c, 0xf1, 0x31, 0x64, 0x88, 0x8f, 0x0d, 0x83, 0x7c,
  0x6c, 0x18, 0xe4, 0x63, 0x42, 0x00, 0x1f, 0x23, 0x54, 0x02, 0x3e, 0x16,
  0x04, 0xf2, 0xb1, 0x21, 0x80, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x44, 0x74, 0xb1, 0x13, 0x81, 0x05, 0x2f, 0x21, 0x1f, 0x5b, 0x02, 0xfa,
  0x58, 0x20, 0x13, 0xf0, 0x31, 0x66, 0xa0, 0x8f, 0x05, 0x34, 0x01, 0x9f,
  0x11, 0x83, 0x07, 0x00, 0x41, 0x30, 0x68, 0xf8, 0xc2, 0x26, 0x5e, 0xa2,
  0x25, 0x86, 0x20, 0x26, 0x62, 0xa2, 0x2e, 0xea, 0xa2, 0x27, 0x62, 0x62,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x13,
  0x88, 0xc1, 0x88, 0x7d, 0x90, 0x8f, 0x11, 0xfc, 0x20, 0x1f, 0x23, 0xfa,
  0x41, 0x3e, 0x46, 0xf8, 0x83, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1,
  0x80, 0x12, 0x8d, 0xb1, 0xa0, 0x89, 0xbf, 0x18, 0x4d, 0x08, 0x00, 0x33,
  0xd0, 0x20, 0x3e, 0x66, 0xa0, 0x41, 0x7c, 0xcc, 0x40, 0x83, 0xf8, 0xd8,
  0x40, 0xc8, 0xc7, 0x86, 0x42, 0x3e, 0x36, 0x18, 0xf2, 0xb1, 0xc1, 0x0d,
  0xe0, 0x63, 0x83, 0x1b, 0xc0, 0xc7, 0x06, 0x37, 0x80, 0xcf, 0x88, 0xc1,
  0x01, 0x80, 0x20, 0x18, 0x50, 0xad, 0xe1, 0x16, 0x3f, 0x91, 0x1a, 0xa3,
  0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0x03, 0x24,
  0x1f, 0x1b, 0x22, 0xf9, 0xd8, 0x20, 0xc9, 0xc7, 0x94, 0x01, 0x3e, 0xa6,
  0x0c, 0xf0, 0x31, 0x65, 0x80, 0xcf, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x20, 0xbb, 0x61, 0x17, 0xb3, 0x31, 0x1b, 0xaa, 0x31, 0x8c, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x01, 0xb2, 0x1b, 0x76, 0x31, 0x1b, 0xb3, 0x01, 0x1a,
  0xc2, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0xbb, 0x61, 0x17, 0xb3,
  0x31, 0x1b, 0xa9, 0x11, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0xb2,
  0x1b, 0x76, 0x31, 0x1b, 0xb3, 0x71, 0x1a, 0x34, 0x81, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00
};
