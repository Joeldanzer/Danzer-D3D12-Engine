#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: Compiled\NormalMapEffect_PSNormalPixelLightingTx.pdb
; shader hash: 358eef826db47eb21ddaa1aa79121730
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;                                   texture     f32          2d      T2             t2     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSNormalPixelLightingTx() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %3, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %20 = extractvalue %dx.types.ResRet.f32 %19, 0
  %21 = extractvalue %dx.types.ResRet.f32 %19, 1
  %22 = extractvalue %dx.types.ResRet.f32 %19, 2
  %23 = extractvalue %dx.types.ResRet.f32 %19, 3
  %24 = fmul fast float %20, %6
  %25 = fmul fast float %21, %7
  %26 = fmul fast float %22, %8
  %27 = fmul fast float %23, %9
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.f32 %28, 1
  %31 = extractvalue %dx.types.CBufRet.f32 %28, 2
  %32 = fsub fast float %29, %13
  %33 = fsub fast float %30, %14
  %34 = fsub fast float %31, %15
  %35 = call float @dx.op.dot3.f32(i32 55, float %32, float %33, float %34, float %32, float %33, float %34)  ; Dot3(ax,ay,az,bx,by,bz)
  %36 = call float @dx.op.unary.f32(i32 25, float %35)  ; Rsqrt(value)
  %37 = fmul fast float %32, %36
  %38 = fmul fast float %33, %36
  %39 = fmul fast float %34, %36
  %40 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %41 = call float @dx.op.unary.f32(i32 25, float %40)  ; Rsqrt(value)
  %42 = fmul fast float %41, %10
  %43 = fmul fast float %41, %11
  %44 = fmul fast float %41, %12
  %45 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %46 = extractvalue %dx.types.ResRet.f32 %45, 0
  %47 = extractvalue %dx.types.ResRet.f32 %45, 1
  %48 = fmul fast float %46, 2.000000e+00
  %49 = fmul fast float %47, 2.000000e+00
  %50 = fadd fast float %48, -1.000000e+00
  %51 = fadd fast float %49, -1.000000e+00
  %52 = call float @dx.op.dot2.f32(i32 54, float %50, float %51, float %50, float %51)  ; Dot2(ax,ay,bx,by)
  %53 = fsub fast float 1.000000e+00, %52
  %54 = call float @dx.op.unary.f32(i32 24, float %53)  ; Sqrt(value)
  %55 = call float @dx.op.unary.f32(i32 83, float %13)  ; DerivCoarseX(value)
  %56 = call float @dx.op.unary.f32(i32 83, float %14)  ; DerivCoarseX(value)
  %57 = call float @dx.op.unary.f32(i32 83, float %15)  ; DerivCoarseX(value)
  %58 = call float @dx.op.unary.f32(i32 84, float %13)  ; DerivCoarseY(value)
  %59 = call float @dx.op.unary.f32(i32 84, float %14)  ; DerivCoarseY(value)
  %60 = call float @dx.op.unary.f32(i32 84, float %15)  ; DerivCoarseY(value)
  %61 = call float @dx.op.unary.f32(i32 83, float %17)  ; DerivCoarseX(value)
  %62 = call float @dx.op.unary.f32(i32 83, float %18)  ; DerivCoarseX(value)
  %63 = call float @dx.op.unary.f32(i32 84, float %17)  ; DerivCoarseY(value)
  %64 = call float @dx.op.unary.f32(i32 84, float %18)  ; DerivCoarseY(value)
  %65 = fmul fast float %60, %56
  %66 = fmul fast float %59, %57
  %67 = fsub fast float %65, %66
  %68 = fmul fast float %58, %57
  %69 = fmul fast float %60, %55
  %70 = fsub fast float %68, %69
  %71 = fmul fast float %59, %55
  %72 = fmul fast float %58, %56
  %73 = fsub fast float %71, %72
  %74 = fmul fast float %73, %59
  %75 = fmul fast float %70, %60
  %76 = fsub fast float %74, %75
  %77 = fmul fast float %67, %60
  %78 = fmul fast float %73, %58
  %79 = fsub fast float %77, %78
  %80 = fmul fast float %70, %58
  %81 = fmul fast float %67, %59
  %82 = fsub fast float %80, %81
  %83 = fmul fast float %70, %57
  %84 = fmul fast float %73, %56
  %85 = fsub fast float %83, %84
  %86 = fmul fast float %73, %55
  %87 = fmul fast float %67, %57
  %88 = fsub fast float %86, %87
  %89 = fmul fast float %67, %56
  %90 = fmul fast float %70, %55
  %91 = fsub fast float %89, %90
  %92 = fmul fast float %76, %61
  %93 = call float @dx.op.tertiary.f32(i32 46, float %63, float %85, float %92)  ; FMad(a,b,c)
  %94 = fmul fast float %79, %61
  %95 = call float @dx.op.tertiary.f32(i32 46, float %63, float %88, float %94)  ; FMad(a,b,c)
  %96 = fmul fast float %82, %61
  %97 = call float @dx.op.tertiary.f32(i32 46, float %63, float %91, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.dot3.f32(i32 55, float %93, float %95, float %97, float %93, float %95, float %97)  ; Dot3(ax,ay,az,bx,by,bz)
  %99 = call float @dx.op.unary.f32(i32 25, float %98)  ; Rsqrt(value)
  %100 = fmul fast float %76, %62
  %101 = call float @dx.op.tertiary.f32(i32 46, float %64, float %85, float %100)  ; FMad(a,b,c)
  %102 = fmul fast float %79, %62
  %103 = call float @dx.op.tertiary.f32(i32 46, float %64, float %88, float %102)  ; FMad(a,b,c)
  %104 = fmul fast float %82, %62
  %105 = call float @dx.op.tertiary.f32(i32 46, float %64, float %91, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.dot3.f32(i32 55, float %101, float %103, float %105, float %101, float %103, float %105)  ; Dot3(ax,ay,az,bx,by,bz)
  %107 = call float @dx.op.unary.f32(i32 25, float %106)  ; Rsqrt(value)
  %108 = fmul fast float %107, %101
  %109 = fmul fast float %107, %103
  %110 = fmul fast float %107, %105
  %111 = fmul fast float %93, %50
  %112 = fmul fast float %111, %99
  %113 = call float @dx.op.tertiary.f32(i32 46, float %51, float %108, float %112)  ; FMad(a,b,c)
  %114 = call float @dx.op.tertiary.f32(i32 46, float %54, float %42, float %113)  ; FMad(a,b,c)
  %115 = fmul fast float %95, %50
  %116 = fmul fast float %115, %99
  %117 = call float @dx.op.tertiary.f32(i32 46, float %51, float %109, float %116)  ; FMad(a,b,c)
  %118 = call float @dx.op.tertiary.f32(i32 46, float %54, float %43, float %117)  ; FMad(a,b,c)
  %119 = fmul fast float %97, %50
  %120 = fmul fast float %119, %99
  %121 = call float @dx.op.tertiary.f32(i32 46, float %51, float %110, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.tertiary.f32(i32 46, float %54, float %44, float %121)  ; FMad(a,b,c)
  %123 = call float @dx.op.dot3.f32(i32 55, float %114, float %118, float %122, float %114, float %118, float %122)  ; Dot3(ax,ay,az,bx,by,bz)
  %124 = call float @dx.op.unary.f32(i32 25, float %123)  ; Rsqrt(value)
  %125 = fmul fast float %124, %114
  %126 = fmul fast float %124, %118
  %127 = fmul fast float %124, %122
  %128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.f32 %128, 0
  %130 = extractvalue %dx.types.CBufRet.f32 %128, 1
  %131 = extractvalue %dx.types.CBufRet.f32 %128, 2
  %132 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %133 = extractvalue %dx.types.CBufRet.f32 %132, 0
  %134 = extractvalue %dx.types.CBufRet.f32 %132, 1
  %135 = extractvalue %dx.types.CBufRet.f32 %132, 2
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 0
  %138 = extractvalue %dx.types.CBufRet.f32 %136, 1
  %139 = extractvalue %dx.types.CBufRet.f32 %136, 2
  %140 = fsub fast float %37, %129
  %141 = fsub fast float %38, %130
  %142 = fsub fast float %39, %131
  %143 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %140, float %141, float %142)  ; Dot3(ax,ay,az,bx,by,bz)
  %144 = call float @dx.op.unary.f32(i32 25, float %143)  ; Rsqrt(value)
  %145 = fmul fast float %144, %141
  %146 = fmul fast float %144, %142
  %147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.f32 %147, 0
  %149 = extractvalue %dx.types.CBufRet.f32 %147, 1
  %150 = extractvalue %dx.types.CBufRet.f32 %147, 2
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 0
  %153 = extractvalue %dx.types.CBufRet.f32 %151, 1
  %154 = extractvalue %dx.types.CBufRet.f32 %151, 2
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = fsub fast float %37, %148
  %160 = fsub fast float %38, %149
  %161 = fsub fast float %39, %150
  %162 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %163 = call float @dx.op.unary.f32(i32 25, float %162)  ; Rsqrt(value)
  %164 = fmul fast float %163, %160
  %165 = fmul fast float %163, %161
  %166 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %167 = extractvalue %dx.types.CBufRet.f32 %166, 0
  %168 = extractvalue %dx.types.CBufRet.f32 %166, 1
  %169 = extractvalue %dx.types.CBufRet.f32 %166, 2
  %170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %171 = extractvalue %dx.types.CBufRet.f32 %170, 0
  %172 = extractvalue %dx.types.CBufRet.f32 %170, 1
  %173 = extractvalue %dx.types.CBufRet.f32 %170, 2
  %174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %175 = extractvalue %dx.types.CBufRet.f32 %174, 0
  %176 = extractvalue %dx.types.CBufRet.f32 %174, 1
  %177 = extractvalue %dx.types.CBufRet.f32 %174, 2
  %178 = fsub fast float %37, %167
  %179 = fsub fast float %38, %168
  %180 = fsub fast float %39, %169
  %181 = call float @dx.op.dot3.f32(i32 55, float %178, float %179, float %180, float %178, float %179, float %180)  ; Dot3(ax,ay,az,bx,by,bz)
  %182 = call float @dx.op.unary.f32(i32 25, float %181)  ; Rsqrt(value)
  %183 = fmul fast float %182, %179
  %184 = fmul fast float %182, %180
  %185 = fsub fast float -0.000000e+00, %130
  %186 = fsub fast float -0.000000e+00, %131
  %187 = fsub fast float -0.000000e+00, %149
  %188 = fsub fast float -0.000000e+00, %150
  %189 = fsub fast float -0.000000e+00, %168
  %190 = fsub fast float -0.000000e+00, %169
  %191 = fmul fast float %125, %129
  %192 = fsub fast float -0.000000e+00, %191
  %193 = call float @dx.op.tertiary.f32(i32 46, float %185, float %126, float %192)  ; FMad(a,b,c)
  %194 = call float @dx.op.tertiary.f32(i32 46, float %186, float %127, float %193)  ; FMad(a,b,c)
  %195 = fmul fast float %125, %148
  %196 = fsub fast float -0.000000e+00, %195
  %197 = call float @dx.op.tertiary.f32(i32 46, float %187, float %126, float %196)  ; FMad(a,b,c)
  %198 = call float @dx.op.tertiary.f32(i32 46, float %188, float %127, float %197)  ; FMad(a,b,c)
  %199 = fmul fast float %125, %167
  %200 = fsub fast float -0.000000e+00, %199
  %201 = call float @dx.op.tertiary.f32(i32 46, float %189, float %126, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %190, float %127, float %201)  ; FMad(a,b,c)
  %203 = fmul fast float %140, %125
  %204 = fmul fast float %203, %144
  %205 = call float @dx.op.tertiary.f32(i32 46, float %145, float %126, float %204)  ; FMad(a,b,c)
  %206 = call float @dx.op.tertiary.f32(i32 46, float %146, float %127, float %205)  ; FMad(a,b,c)
  %207 = fmul fast float %159, %125
  %208 = fmul fast float %207, %163
  %209 = call float @dx.op.tertiary.f32(i32 46, float %164, float %126, float %208)  ; FMad(a,b,c)
  %210 = call float @dx.op.tertiary.f32(i32 46, float %165, float %127, float %209)  ; FMad(a,b,c)
  %211 = fmul fast float %178, %125
  %212 = fmul fast float %211, %182
  %213 = call float @dx.op.tertiary.f32(i32 46, float %183, float %126, float %212)  ; FMad(a,b,c)
  %214 = call float @dx.op.tertiary.f32(i32 46, float %184, float %127, float %213)  ; FMad(a,b,c)
  %215 = fcmp fast olt float %194, 0.000000e+00
  %216 = fcmp fast olt float %198, 0.000000e+00
  %217 = fcmp fast olt float %202, 0.000000e+00
  %218 = select i1 %215, float 0.000000e+00, float 1.000000e+00
  %219 = select i1 %216, float 0.000000e+00, float 1.000000e+00
  %220 = select i1 %217, float 0.000000e+00, float 1.000000e+00
  %221 = fmul fast float %218, %194
  %222 = fmul fast float %219, %198
  %223 = fmul fast float %220, %202
  %224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %225 = extractvalue %dx.types.CBufRet.f32 %224, 3
  %226 = call float @dx.op.binary.f32(i32 35, float %206, float 0.000000e+00)  ; FMax(a,b)
  %227 = call float @dx.op.binary.f32(i32 35, float %210, float 0.000000e+00)  ; FMax(a,b)
  %228 = call float @dx.op.binary.f32(i32 35, float %214, float 0.000000e+00)  ; FMax(a,b)
  %229 = fmul fast float %226, %218
  %230 = fmul fast float %227, %219
  %231 = fmul fast float %228, %220
  %232 = call float @dx.op.unary.f32(i32 23, float %229)  ; Log(value)
  %233 = call float @dx.op.unary.f32(i32 23, float %230)  ; Log(value)
  %234 = call float @dx.op.unary.f32(i32 23, float %231)  ; Log(value)
  %235 = fmul fast float %232, %225
  %236 = fmul fast float %233, %225
  %237 = fmul fast float %234, %225
  %238 = call float @dx.op.unary.f32(i32 21, float %235)  ; Exp(value)
  %239 = call float @dx.op.unary.f32(i32 21, float %236)  ; Exp(value)
  %240 = call float @dx.op.unary.f32(i32 21, float %237)  ; Exp(value)
  %241 = fmul fast float %238, %194
  %242 = fmul fast float %239, %198
  %243 = fmul fast float %240, %202
  %244 = fmul fast float %221, %133
  %245 = call float @dx.op.tertiary.f32(i32 46, float %222, float %152, float %244)  ; FMad(a,b,c)
  %246 = call float @dx.op.tertiary.f32(i32 46, float %223, float %171, float %245)  ; FMad(a,b,c)
  %247 = fmul fast float %221, %134
  %248 = call float @dx.op.tertiary.f32(i32 46, float %222, float %153, float %247)  ; FMad(a,b,c)
  %249 = call float @dx.op.tertiary.f32(i32 46, float %223, float %172, float %248)  ; FMad(a,b,c)
  %250 = fmul fast float %221, %135
  %251 = call float @dx.op.tertiary.f32(i32 46, float %222, float %154, float %250)  ; FMad(a,b,c)
  %252 = call float @dx.op.tertiary.f32(i32 46, float %223, float %173, float %251)  ; FMad(a,b,c)
  %253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %254 = extractvalue %dx.types.CBufRet.f32 %253, 0
  %255 = extractvalue %dx.types.CBufRet.f32 %253, 1
  %256 = extractvalue %dx.types.CBufRet.f32 %253, 2
  %257 = fmul fast float %254, %246
  %258 = fmul fast float %255, %249
  %259 = fmul fast float %256, %252
  %260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %261 = extractvalue %dx.types.CBufRet.f32 %260, 0
  %262 = extractvalue %dx.types.CBufRet.f32 %260, 1
  %263 = extractvalue %dx.types.CBufRet.f32 %260, 2
  %264 = fadd fast float %257, %261
  %265 = fadd fast float %258, %262
  %266 = fadd fast float %259, %263
  %267 = fmul fast float %241, %137
  %268 = call float @dx.op.tertiary.f32(i32 46, float %242, float %156, float %267)  ; FMad(a,b,c)
  %269 = call float @dx.op.tertiary.f32(i32 46, float %243, float %175, float %268)  ; FMad(a,b,c)
  %270 = fmul fast float %241, %138
  %271 = call float @dx.op.tertiary.f32(i32 46, float %242, float %157, float %270)  ; FMad(a,b,c)
  %272 = call float @dx.op.tertiary.f32(i32 46, float %243, float %176, float %271)  ; FMad(a,b,c)
  %273 = fmul fast float %241, %139
  %274 = call float @dx.op.tertiary.f32(i32 46, float %242, float %158, float %273)  ; FMad(a,b,c)
  %275 = call float @dx.op.tertiary.f32(i32 46, float %243, float %177, float %274)  ; FMad(a,b,c)
  %276 = extractvalue %dx.types.CBufRet.f32 %224, 0
  %277 = extractvalue %dx.types.CBufRet.f32 %224, 1
  %278 = extractvalue %dx.types.CBufRet.f32 %224, 2
  %279 = fmul fast float %24, %264
  %280 = fmul fast float %25, %265
  %281 = fmul fast float %26, %266
  %282 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %283 = extractvalue %dx.types.ResRet.f32 %282, 0
  %284 = extractvalue %dx.types.ResRet.f32 %282, 1
  %285 = extractvalue %dx.types.ResRet.f32 %282, 2
  %286 = fmul fast float %269, %27
  %287 = fmul fast float %286, %276
  %288 = fmul fast float %287, %283
  %289 = fmul fast float %272, %27
  %290 = fmul fast float %289, %277
  %291 = fmul fast float %290, %284
  %292 = fmul fast float %275, %27
  %293 = fmul fast float %292, %278
  %294 = fmul fast float %293, %285
  %295 = fadd fast float %288, %279
  %296 = fadd fast float %291, %280
  %297 = fadd fast float %294, %281
  %298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %299 = extractvalue %dx.types.CBufRet.f32 %298, 0
  %300 = extractvalue %dx.types.CBufRet.f32 %298, 1
  %301 = extractvalue %dx.types.CBufRet.f32 %298, 2
  %302 = fmul fast float %299, %27
  %303 = fmul fast float %300, %27
  %304 = fmul fast float %301, %27
  %305 = fsub fast float %302, %295
  %306 = fsub fast float %303, %296
  %307 = fsub fast float %304, %297
  %308 = fmul fast float %305, %16
  %309 = fmul fast float %306, %16
  %310 = fmul fast float %307, %16
  %311 = fadd fast float %308, %295
  %312 = fadd fast float %309, %296
  %313 = fadd fast float %310, %297
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %311)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %312)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %313)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %27)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{!5, null, !10, !12}
!5 = !{!6, !8, !9}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{!11}
!11 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!12 = !{!13}
!13 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!14 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!15 = !{void ()* @PSNormalPixelLightingTx, !"PSNormalPixelLightingTx", !16, !4, null}
!16 = !{!17, !28, null}
!17 = !{!18, !21, !24, !27}
!18 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 2, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 3}
!21 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 1, i8 0, !23}
!22 = !{i32 1}
!23 = !{i32 3, i32 15}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 3, i32 2, i8 0, !26}
!25 = !{i32 2}
!26 = !{i32 3, i32 7}
!27 = !{i32 3, !"COLOR", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 3, i8 0, !23}
!28 = !{!29}
!29 = !{i32 0, !"SV_Target", i8 9, i8 16, !19, i8 0, i32 1, i8 4, i32 0, i8 0, !23}

#endif

const unsigned char NormalMapEffect_PSNormalPixelLightingTx[] = {
  0x44, 0x58, 0x42, 0x43, 0x96, 0xfd, 0x5b, 0xca, 0x6b, 0xbf, 0x07, 0x77,
  0xcc, 0xfc, 0x1a, 0x25, 0x80, 0xa4, 0xf7, 0x40, 0x01, 0x00, 0x00, 0x00,
  0xaf, 0x15, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x3b, 0x01, 0x00, 0x00,
  0xc3, 0x02, 0x00, 0x00, 0xc3, 0x03, 0x00, 0x00, 0x07, 0x04, 0x00, 0x00,
  0x23, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x32, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67,
  0x65, 0x74, 0x00, 0x50, 0x53, 0x56, 0x30, 0x80, 0x01, 0x00, 0x00, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x52,
  0x54, 0x53, 0x30, 0xf8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06,
  0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8,
  0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x68,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01,
  0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e, 0x3c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x34, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c,
  0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x66, 0x66,
  0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
  0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e,
  0x67, 0x54, 0x78, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00, 0x48,
  0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35,
  0x8e, 0xef, 0x82, 0x6d, 0xb4, 0x7e, 0xb2, 0x1d, 0xda, 0xa1, 0xaa, 0x79,
  0x12, 0x17, 0x30, 0x44, 0x58, 0x49, 0x4c, 0x84, 0x11, 0x00, 0x00, 0x60,
  0x00, 0x00, 0x00, 0x61, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00,
  0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x6c, 0x11, 0x00, 0x00, 0x42,
  0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x58, 0x04, 0x00, 0x00, 0x0b,
  0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07,
  0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92,
  0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80,
  0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38,
  0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43,
  0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11,
  0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04,
  0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b,
  0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84,
  0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff,
  0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x32,
  0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04,
  0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b,
  0x84, 0xc4, 0x4c, 0x10, 0xbc, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66,
  0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44,
  0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xe4, 0xa6, 0xe1,
  0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25, 0xa4, 0x95, 0x98, 0xfc, 0xe2,
  0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50, 0x71, 0xcf, 0x70, 0xf9, 0x13,
  0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x28, 0x58, 0x0a, 0xa3,
  0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10, 0xc4, 0x40, 0x4d, 0x41, 0x06,
  0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29, 0xc3, 0x40, 0x0c, 0x14, 0x15,
  0x63, 0x20, 0x86, 0x61, 0x18, 0x68, 0x2a, 0xc4, 0x40, 0x0c, 0x03, 0x55,
  0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b,
  0x31, 0xf9, 0xc5, 0x6d, 0x23, 0x62, 0x18, 0x86, 0xa1, 0x10, 0x17, 0xc1,
  0x10, 0x84, 0x95, 0x62, 0x20, 0x86, 0x61, 0x20, 0x6d, 0x8e, 0x20, 0x28,
  0x06, 0x43, 0x14, 0x04, 0xc1, 0x51, 0x37, 0x10, 0x30, 0x8c, 0x40, 0x0c,
  0x33, 0xb5, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01,
  0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01,
  0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03,
  0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x01,
  0x1d, 0xf8, 0x01, 0x18, 0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4, 0x03,
  0x3c, 0xcc, 0xc3, 0x2f, 0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0, 0x80,
  0x98, 0x49, 0x0c, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d,
  0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e,
  0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41, 0x1e,
  0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c,
  0xe8, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90, 0x00, 0x86, 0x24, 0x0e, 0x23,
  0x0c, 0xc3, 0x4c, 0x6d, 0x30, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f,
  0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e,
  0x72, 0x40, 0x0a, 0x7c, 0x60, 0x0f, 0xe5, 0x30, 0x0e, 0xf4, 0xf0, 0x0e,
  0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xc0, 0x06,
  0x60, 0x30, 0x07, 0x7e, 0x00, 0x06, 0x7e, 0xa0, 0x07, 0x7a, 0xd0, 0x0e,
  0xe9, 0x00, 0x0f, 0xf3, 0xf0, 0x0b, 0xf4, 0x90, 0x0f, 0xf0, 0x50, 0x0e,
  0x28, 0x20, 0x66, 0x12, 0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79,
  0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72,
  0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77,
  0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36,
  0x00, 0x83, 0x39, 0xf0, 0x03, 0x30, 0xf0, 0x03, 0x24, 0x90, 0x25, 0x99,
  0x39, 0x40, 0x26, 0x01, 0x78, 0xd5, 0xe1, 0x48, 0xd3, 0x02, 0x60, 0x0e,
  0x35, 0xf9, 0x29, 0x10, 0x01, 0x0c, 0x31, 0x11, 0x91, 0x84, 0x1a, 0x90,
  0x24, 0x07, 0x14, 0x45, 0x49, 0x12, 0x4c, 0xd1, 0x94, 0xd4, 0x9b, 0xa4,
  0x29, 0xa2, 0x84, 0xc9, 0x67, 0x01, 0xe6, 0x59, 0x88, 0x88, 0x9d, 0x80,
  0x89, 0x40, 0x01, 0x41, 0x6c, 0x4a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x13,
  0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68,
  0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a,
  0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71,
  0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d,
  0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x34, 0x40,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x79,
  0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8,
  0x13, 0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x90, 0x67, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x21, 0x4f, 0x05, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x43, 0x1e, 0x0c, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x86, 0x3c, 0x1a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x3a, 0x20, 0x00, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x00, 0x00, 0x00, 0x13,
  0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c,
  0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x18,
  0x8a, 0xa0, 0x24, 0x0a, 0xd8, 0xa0, 0x0c, 0xca, 0xa3, 0x1c, 0xa8, 0x28,
  0x89, 0x11, 0x80, 0x22, 0x28, 0x84, 0x32, 0x28, 0x10, 0x1a, 0x67, 0x00,
  0xe8, 0x9c, 0x01, 0xa0, 0x75, 0x06, 0x80, 0xda, 0x19, 0x00, 0x72, 0xc7,
  0x92, 0x20, 0xe2, 0x79, 0x00, 0xe0, 0x38, 0x8e, 0xe3, 0x38, 0x0e, 0x20,
  0x10, 0x88, 0x07, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x7c,
  0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35,
  0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b,
  0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b,
  0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79,
  0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x62,
  0x99, 0x20, 0x10, 0xcc, 0x06, 0x61, 0x20, 0x26, 0x08, 0x44, 0xb3, 0x41,
  0x18, 0x0c, 0x0a, 0x70, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0x63,
  0xa0, 0x11, 0x98, 0x20, 0x10, 0xce, 0x04, 0x81, 0x78, 0x36, 0x08, 0x44,
  0xb3, 0x21, 0x21, 0x94, 0x85, 0x20, 0x06, 0x86, 0x70, 0x26, 0x08, 0x67,
  0xb0, 0x6d, 0x48, 0x06, 0x68, 0x21, 0x86, 0x81, 0x21, 0x9c, 0x0d, 0x09,
  0x03, 0x2d, 0x04, 0x33, 0x30, 0x84, 0xb3, 0x61, 0x78, 0x22, 0x69, 0x82,
  0xb0, 0x06, 0xdc, 0x04, 0x81, 0x80, 0x36, 0x20, 0x04, 0xb5, 0x10, 0xc4,
  0x50, 0x01, 0x1b, 0x02, 0x6b, 0x82, 0xd0, 0x06, 0xdd, 0x06, 0x84, 0xc0,
  0x16, 0x82, 0x18, 0x08, 0x60, 0x43, 0x90, 0x6d, 0x20, 0x26, 0xe0, 0xd2,
  0x26, 0x08, 0x6e, 0xe0, 0x6d, 0x08, 0xb8, 0x09, 0x82, 0x00, 0xf0, 0x82,
  0x9a, 0x72, 0x7a, 0x93, 0x6b, 0x0b, 0x63, 0x83, 0x4a, 0xc3, 0x2b, 0x63,
  0x63, 0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0xa3, 0xc2, 0x23, 0x42,
  0x55, 0x84, 0x35, 0xf4, 0xf4, 0x24, 0x45, 0x34, 0x41, 0x28, 0xa8, 0x09,
  0x42, 0x51, 0x6d, 0x08, 0x88, 0x09, 0x42, 0x61, 0x4d, 0x10, 0x88, 0x68,
  0x83, 0x50, 0x06, 0x65, 0xb0, 0x61, 0x21, 0xc0, 0x20, 0x0c, 0xc4, 0x60,
  0x0c, 0xc8, 0x60, 0x20, 0x03, 0x42, 0x0c, 0xcc, 0x60, 0x43, 0x30, 0x4c,
  0x10, 0x8a, 0x6b, 0x82, 0x40, 0x48, 0x1b, 0x84, 0x32, 0x50, 0x83, 0x0d,
  0xcb, 0x00, 0x06, 0x61, 0x20, 0x06, 0x68, 0x40, 0x06, 0x43, 0x1a, 0x0c,
  0x62, 0xb0, 0x06, 0x1b, 0x02, 0x66, 0x82, 0x50, 0x60, 0x13, 0x04, 0x62,
  0xda, 0x20, 0x94, 0xc1, 0x1b, 0x6c, 0x58, 0x18, 0x30, 0x08, 0x03, 0x31,
  0x68, 0x03, 0x32, 0x18, 0xdc, 0x80, 0x11, 0x03, 0x38, 0x60, 0x31, 0xf4,
  0xc4, 0xf4, 0x24, 0xb5, 0x61, 0x29, 0x03, 0x39, 0x08, 0x03, 0x31, 0x18,
  0x03, 0x32, 0x18, 0xd2, 0xa0, 0x0c, 0xc4, 0x60, 0x0d, 0x36, 0x10, 0x67,
  0xc0, 0x06, 0x71, 0x30, 0x07, 0x4c, 0xa6, 0xac, 0xbe, 0xa8, 0xc2, 0xe4,
  0xce, 0xca, 0xe8, 0x26, 0x08, 0x45, 0xb6, 0x61, 0x21, 0xea, 0x20, 0x0c,
  0xec, 0x60, 0x0c, 0xc4, 0x60, 0x48, 0x03, 0x42, 0x0c, 0xd6, 0x60, 0x43,
  0x70, 0x07, 0x1b, 0x06, 0x3a, 0xc0, 0x03, 0x60, 0x43, 0xe1, 0x7d, 0x79,
  0xb0, 0x01, 0x55, 0xd8, 0xd8, 0xec, 0xda, 0x5c, 0xd2, 0xc8, 0xca, 0xdc,
  0xe8, 0xa6, 0x04, 0x41, 0x15, 0x32, 0x3c, 0x17, 0xbb, 0x32, 0xb9, 0xb9,
  0xb4, 0x37, 0xb7, 0x29, 0x01, 0xd1, 0x84, 0x0c, 0xcf, 0xc5, 0x2e, 0x8c,
  0xcd, 0xae, 0x4c, 0x6e, 0x4a, 0x60, 0xd4, 0x21, 0xc3, 0x73, 0x99, 0x43,
  0x0b, 0x23, 0x2b, 0x93, 0x6b, 0x7a, 0x23, 0x2b, 0x63, 0x9b, 0x12, 0x20,
  0x65, 0xc8, 0xf0, 0x5c, 0xe4, 0xca, 0xe6, 0xde, 0xea, 0xe4, 0xc6, 0xca,
  0xe6, 0xa6, 0x04, 0x5a, 0x1d, 0x32, 0x3c, 0x17, 0xbb, 0xb4, 0xb2, 0xbb,
  0x24, 0xb2, 0x29, 0xba, 0x30, 0xba, 0xb2, 0x29, 0x01, 0x57, 0x87, 0x0c,
  0xcf, 0xa5, 0xcc, 0x8d, 0x4e, 0x2e, 0x0f, 0xea, 0x2d, 0xcd, 0x8d, 0x6e,
  0x6e, 0x4a, 0x90, 0x07, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50,
  0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14,
  0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79,
  0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e,
  0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1,
  0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc,
  0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74,
  0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a,
  0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e,
  0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e,
  0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21,
  0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0,
  0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc,
  0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72,
  0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76,
  0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f,
  0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c,
  0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03,
  0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1,
  0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61,
  0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8,
  0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94,
  0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0,
  0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76,
  0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06,
  0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1,
  0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81,
  0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71,
  0x20, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x06, 0x70, 0xa5, 0xec, 0xe9,
  0x44, 0x0c, 0xb0, 0xa4, 0xc8, 0x45, 0x2c, 0x25, 0x62, 0x1c, 0x13, 0xd2,
  0x18, 0xed, 0x65, 0x07, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x48, 0x03,
  0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x21, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f,
  0x04, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80,
  0xf9, 0xc5, 0x6d, 0x9b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44,
  0x00, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10, 0x66, 0xe0, 0x0c, 0x97, 0xef,
  0x3c, 0xfe, 0xe0, 0x4c, 0xb6, 0x5f, 0xdc, 0xb6, 0x11, 0x38, 0xc3, 0xe5,
  0x3b, 0x8f, 0x3f, 0x38, 0xd3, 0xed, 0x17, 0xb7, 0x6d, 0x01, 0xd3, 0x70,
  0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71,
  0xdb, 0x36, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x04, 0x30, 0xcf, 0x42,
  0xf8, 0xc5, 0x6d, 0x9b, 0x40, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0xd2, 0xe4,
  0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35, 0xf9, 0xc5, 0x6d, 0x5b, 0x82, 0x34,
  0x5c, 0xbe, 0xf3, 0xf8, 0x13, 0x11, 0x4d, 0x08, 0x10, 0x61, 0x7e, 0x71,
  0xdb, 0x56, 0xf0, 0x0c, 0x97, 0xef, 0x3c, 0x3e, 0xd5, 0x00, 0x11, 0xe6,
  0x17, 0xb7, 0x0d, 0x61, 0x20, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x13,
  0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xc4,
  0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94, 0x46, 0x59, 0x14, 0x44, 0x51,
  0x14, 0xd7, 0x0c, 0x40, 0x21, 0x94, 0x5d, 0xb9, 0x95, 0x4c, 0xc9, 0x95,
  0x69, 0x40, 0xa1, 0x06, 0x94, 0x42, 0xe1, 0x95, 0x51, 0xb9, 0x94, 0x4a,
  0x61, 0x14, 0x5b, 0xc1, 0xd0, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0xff,
  0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0x08, 0x06, 0x63, 0x04, 0x20, 0x08,
  0x82, 0xf8, 0x37, 0x02, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0xc2,
  0x0c, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xd0, 0xc9, 0x41,
  0x74, 0x06, 0x6e, 0xe0, 0x06, 0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x74, 0x73, 0x20, 0xa1, 0x81, 0x1c, 0xc8, 0x81, 0x37, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x1d, 0x1d, 0x4c, 0x69, 0x20, 0x07, 0x72, 0xf0, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x41, 0x57, 0x07, 0xd4, 0x19, 0xcc, 0xc1,
  0x1c, 0x80, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x74, 0x76, 0x50,
  0xa9, 0x01, 0x1d, 0xd0, 0x41, 0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0x01, 0x0a, 0x1a, 0x1c, 0xd4, 0x01, 0x1b, 0x6c, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0x84, 0xc2, 0x16, 0x07, 0x76, 0x20, 0x06, 0xdc,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa2, 0xc0, 0xc9, 0xc1, 0x1d,
  0xb4, 0x41, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x28, 0x74,
  0x73, 0x80, 0x07, 0x6c, 0xe0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81,
  0x41, 0x0a, 0xde, 0x1d, 0xe4, 0x01, 0x1c, 0x7c, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0x94, 0xc2, 0x87, 0x07, 0x7a, 0x60, 0x06, 0x60, 0x30,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x29, 0x80, 0x41, 0x1e, 0xec,
  0x41, 0x1c, 0x84, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa7,
  0x10, 0x06, 0x7d, 0xc0, 0x07, 0x73, 0x20, 0x06, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0xa0, 0x82, 0x18, 0xf8, 0x41, 0x1f, 0xa4, 0xc1, 0x18,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x91, 0x0a, 0x63, 0xf0, 0x07,
  0x7e, 0x40, 0x07, 0x64, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86,
  0x2a, 0x90, 0x01, 0x28, 0xfc, 0xc1, 0x1c, 0x94, 0xc1, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0xab, 0x50, 0x06, 0xa0, 0x00, 0x0a, 0x77, 0x60,
  0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xb0, 0x82, 0x19, 0x84,
  0x42, 0x28, 0xb4, 0xc1, 0x19, 0x8c, 0x18, 0x3c, 0x00, 0x08, 0x82, 0x41,
  0xb3, 0x0a, 0x1f, 0xf4, 0x08, 0xc1, 0x34, 0x89, 0x82, 0x28, 0xa0, 0xc1,
  0x34, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3,
  0x09, 0xc4, 0x60, 0x84, 0x24, 0x1f, 0x23, 0x24, 0xf9, 0x18, 0x21, 0xc9,
  0xc7, 0x08, 0x49, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x80, 0xbd,
  0xc2, 0x1b, 0x5c, 0x64, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0x36, 0x4c, 0xf1, 0xb1, 0x61, 0x8a, 0x8f, 0x0d, 0x53,
  0x7c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0xe0, 0xd1, 0x85, 0x3a, 0x18,
  0x84, 0x60, 0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0x74,
  0xa1, 0x0e, 0x02, 0x2b, 0x02, 0xf9, 0x58, 0x21, 0xc8, 0xc7, 0x8a, 0x41,
  0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xf0, 0xfc, 0x82, 0x1e, 0x78,
  0x1d, 0xe7, 0x75, 0xdc, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0xbf,
  0xa0, 0x07, 0x81, 0x05, 0x60, 0x20, 0x1f, 0x13, 0xc0, 0x40, 0x3e, 0x36,
  0x80, 0x81, 0x7c, 0x46, 0x0c, 0x1e, 0x00, 0x04, 0xc1, 0xa0, 0x29, 0x87,
  0x3c, 0x58, 0x83, 0x34, 0xe0, 0xb6, 0x36, 0x68, 0x03, 0x5e, 0xe0, 0x05,
  0x51, 0x68, 0x83, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x02, 0x13, 0xe8,
  0x40, 0x3e, 0x26, 0xd4, 0x81, 0x7c, 0x4c, 0xb8, 0x03, 0xf8, 0x98, 0x80,
  0x07, 0xf0, 0x19, 0x31, 0x48, 0x00, 0x10, 0x04, 0x83, 0x29, 0x1d, 0xf6,
  0x40, 0x08, 0x84, 0xc0, 0xf0, 0x20, 0x88, 0xcf, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x44, 0xec, 0xc0, 0x07, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x44, 0xed, 0x60, 0x0a, 0x6a, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x91, 0x3b, 0x9c, 0x82, 0x1a, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x41, 0xf4, 0x0e, 0xa8, 0xa0, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0x10, 0xc1, 0x03, 0x2a, 0xb4, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x44, 0xf1, 0x90, 0x0a, 0x6d, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0x91, 0x3c, 0xa8, 0x42, 0x1b, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41,
  0x34, 0x0f, 0xac, 0xc0, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10,
  0xd1, 0x43, 0x2b, 0xb0, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44,
  0xf5, 0xd0, 0x0a, 0x6e, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x91,
  0x3d, 0xb8, 0x82, 0x1b, 0x58, 0x91, 0xc8, 0xc7, 0x8e, 0x44, 0x3e, 0x26,
  0x04, 0xf1, 0x31, 0x65, 0x91, 0x8f, 0x25, 0x8e, 0x7c, 0x4c, 0x08, 0xe2,
  0x63, 0x0c, 0x24, 0x1f, 0x73, 0x20, 0xf9, 0x98, 0x10, 0xc4, 0xc7, 0x82,
  0x47, 0x3e, 0x56, 0x3c, 0xf2, 0x31, 0x21, 0x88, 0x8f, 0x29, 0x91, 0x7c,
  0xac, 0xa0, 0xe4, 0x63, 0x42, 0x10, 0x1f, 0x53, 0x2c, 0xf9, 0x98, 0x63,
  0xc9, 0xc7, 0x84, 0x20, 0x3e, 0xd6, 0x68, 0xf2, 0xb1, 0x85, 0x93, 0x8f,
  0x09, 0x41, 0x7c, 0xac, 0xf9, 0xe4, 0x63, 0x94, 0x27, 0x1f, 0x13, 0x82,
  0xf8, 0x98, 0x15, 0x06, 0xf2, 0x31, 0x6a, 0x0c, 0xe4, 0x63, 0x42, 0x10,
  0x1f, 0x83, 0x3e, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xf6,
  0x12, 0xf3, 0xe0, 0x21, 0x81, 0x3d, 0x61, 0x20, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xd0, 0x62, 0xa2, 0x1e, 0xc0, 0xe0, 0x08, 0xcc, 0x19,
  0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x36, 0x13, 0xf7,
  0x20, 0x06, 0x46, 0x30, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x4f, 0x4e,
  0xd0, 0x43, 0x31, 0x04, 0xc5, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x41, 0x94, 0x13, 0xf4, 0x10, 0x18, 0x66, 0x06, 0xf2, 0x19, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x03, 0xed, 0x26, 0xf6, 0xa1, 0x0c, 0xa0, 0xc0, 0x2e,
  0x34, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x39, 0xd1,
  0x0f, 0x67, 0xf0, 0x04, 0x66, 0xa9, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0x40, 0xdb, 0x89, 0x7f, 0x48, 0x03, 0x27, 0x18, 0x31, 0x58,
  0x00, 0x10, 0x04, 0x83, 0x27, 0x2c, 0xf8, 0xa1, 0x18, 0x82, 0x62, 0x08,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x0a, 0x0b, 0x7e, 0x08, 0x2c,
  0x38, 0xe4, 0x63, 0x82, 0x21, 0x1f, 0x1b, 0x0a, 0xf9, 0x98, 0xd4, 0x07,
  0xf2, 0xb1, 0xa0, 0x91, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68,
  0x63, 0x71, 0x12, 0x7e, 0x50, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0xa0, 0x91, 0x05, 0x4a, 0xf0, 0x01, 0x2a, 0x04, 0x46, 0x85, 0x82, 0x7c,
  0x2c, 0x88, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xda, 0x59,
  0xac, 0x84, 0x28, 0x20, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68,
  0x68, 0xc1, 0x12, 0xa0, 0xb0, 0x0a, 0x81, 0x59, 0xa5, 0x20, 0x1f, 0x0b,
  0x2a, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xb6, 0x16, 0x2f,
  0x61, 0x0a, 0x4b, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1a, 0x5b,
  0xc0, 0x04, 0x29, 0xb8, 0x42, 0x30, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06,
  0x8f, 0x5c, 0xb4, 0x44, 0x52, 0x04, 0x49, 0x11, 0x8c, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x41, 0x24, 0x17, 0x2d, 0x11, 0x58, 0xb0, 0xc8, 0xc7, 0x04,
  0x44, 0x3e, 0x36, 0x14, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03,
  0x6c, 0x2e, 0x66, 0x62, 0x1f, 0xd4, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00,
  0xbb, 0x8b, 0x9b, 0xf8, 0x07, 0xb9, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xc0,
  0xf6, 0x62, 0x27, 0x46, 0x82, 0x2e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41,
  0x08, 0x46, 0x13, 0x06, 0xc1, 0xce, 0x61, 0x89, 0x8f, 0x9d, 0xc3, 0x12,
  0x1f, 0x3b, 0x87, 0x25, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xf0,
  0x98, 0x46, 0x58, 0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x44, 0xa6, 0x11, 0x16, 0x81, 0x05, 0x84, 0x7c, 0x4c, 0x20,
  0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x98, 0x69, 0x98, 0x85,
  0x4b, 0x9c, 0xc5, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0xa6, 0x1a, 0x6a, 0x21,
  0x13, 0x7f, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x80, 0xb9, 0x86, 0x5b, 0xd8,
  0x84, 0x5c, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0x82, 0xe9, 0xc3, 0x12, 0x1f, 0xd3, 0x87, 0x25, 0x3e, 0xa6, 0x0f, 0x4b,
  0x7c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0xe0, 0xc9, 0x0d, 0xba, 0x18,
  0x84, 0x60, 0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0x72,
  0x83, 0x2e, 0x02, 0x0b, 0x08, 0xf9, 0x98, 0x40, 0xc8, 0x67, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0xb0, 0xdc, 0xc8, 0x8b, 0xb0, 0x98, 0x8b, 0xd1,
  0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x03, 0xac, 0x37, 0xfa, 0xa2, 0x2c, 0x44, 0x63, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0x00, 0x0b, 0x8f, 0xd0, 0x48, 0x8b, 0xd3, 0x18, 0x4d,
  0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x6b, 0x89, 0x25,
  0x3e, 0xd6, 0x12, 0x4b, 0x7c, 0xac, 0x25, 0x96, 0xf8, 0x8c, 0x18, 0x2c,
  0x00, 0x08, 0x82, 0xc1, 0xc3, 0x1e, 0xa7, 0x31, 0x08, 0xc1, 0x20, 0x04,
  0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xb1, 0xc7, 0x69, 0x04, 0x16,
  0x10, 0xf2, 0x31, 0x81, 0x90, 0x8f, 0xe9, 0xc5, 0x1d, 0xc4, 0xc7, 0xf6,
  0xe2, 0x0e, 0xe2, 0x63, 0x7c, 0x61, 0x06, 0xf1, 0xb1, 0xbe, 0x30, 0x83,
  0xf8, 0x98, 0x5f, 0x54, 0xf1, 0xb1, 0xbf, 0xa8, 0xe2, 0x63, 0xa2, 0xe0,
  0x07, 0xf2, 0xb1, 0xd0, 0x08, 0xe2, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xda, 0x7c, 0xdc, 0x06, 0x32, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x68, 0xf4, 0x81, 0x1b, 0xc8, 0x28, 0x04, 0x66, 0x0a, 0x6f,
  0x20, 0x1f, 0x2b, 0x8d, 0x20, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0xa0, 0xdd, 0xc7, 0x6e, 0x28, 0xa7, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x81, 0x86, 0x1f, 0xbc, 0xa1, 0x9c, 0x42, 0x60, 0xaa, 0x00, 0x06,
  0xf2, 0xb1, 0xd4, 0x08, 0xe2, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xda, 0x7e, 0xfc, 0x06, 0xb3, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x68, 0xfc, 0x01, 0x1e, 0xcc, 0x2a, 0x04, 0xf6, 0x07, 0xae, 0x20,
  0x1f, 0x0b, 0xf8, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0,
  0xfd, 0xc7, 0x78, 0xf0, 0xc1, 0x2b, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0xa0, 0x81, 0x08, 0x79, 0xf0, 0xc1, 0x2b, 0x04, 0x06, 0x07, 0xb2,
  0x20, 0x1f, 0x0b, 0xda, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0xa0, 0x8d, 0xc8, 0x79, 0xb4, 0xc1, 0x2c, 0x04, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0xa0, 0x91, 0x08, 0x7a, 0xb4, 0xc1, 0x2c, 0x04, 0x16, 0x06,
  0xb6, 0x20, 0x1f, 0x0b, 0x3c, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x81, 0x76, 0x22, 0xeb, 0xe1, 0xdd, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0x1a, 0x8a, 0xb0, 0x87, 0x77, 0x0b, 0xc1, 0x70, 0x44, 0x95,
  0x1b, 0xc4, 0x37, 0x1c, 0x21, 0xe9, 0x06, 0xf1, 0x0d, 0x47, 0x3c, 0xbb,
  0x41, 0x7c, 0xd3, 0x0d, 0xbc, 0xd1, 0x1b, 0xc3, 0x74, 0x43, 0x6f, 0xf8,
  0xc6, 0x30, 0xdd, 0xe0, 0x1b, 0xbf, 0x31, 0xd8, 0xb0, 0xc9, 0xc7, 0x06,
  0x4c, 0x3e, 0x36, 0x54, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03,
  0x6c, 0x46, 0xe6, 0x63, 0x37, 0x5a, 0x64, 0x34, 0x21, 0x18, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xb2, 0x91, 0xf6, 0xa0, 0xc8, 0x63, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa, 0x1b, 0x71, 0x8f, 0xa8, 0x3c, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xc2, 0x91, 0xf7, 0x70, 0xcc, 0xc3,
  0x86, 0x45, 0x3e, 0x36, 0x2c, 0xf2, 0xb1, 0x61, 0x91, 0xcf, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x44, 0x3e, 0x22, 0x1f, 0xc3, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0x44, 0x3f, 0x32, 0x1f, 0xc3, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x44, 0x60, 0x42, 0x1f, 0x83, 0x0d, 0x8a, 0x7c, 0x6c, 0x58,
  0xe4, 0x63, 0x03, 0x23, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88,
  0xc8, 0xe4, 0x3e, 0x86, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0xca,
  0x04, 0x3f, 0x86, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0xcc, 0x24,
  0x3f, 0x06, 0x1b, 0xde, 0x40, 0x3e, 0x36, 0xb0, 0x81, 0x7c, 0x6c, 0x48,
  0x03, 0xf9, 0xd8, 0xf5, 0x0e, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x03, 0xed, 0x4c, 0x56, 0xe4, 0xea, 0x85, 0x60, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0x34, 0x34, 0x61, 0x91, 0x6b, 0x15, 0x02, 0xd3, 0xe2, 0x41,
  0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xa9, 0x89, 0x8b, 0x68,
  0xbf, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xb6, 0x26, 0x2f,
  0xa2, 0xb5, 0x42, 0x60, 0xdd, 0x3c, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0xb4, 0x36, 0x89, 0x91, 0x2e, 0x1c, 0x82, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xd0, 0xdc, 0x44, 0x46, 0xba, 0x57, 0x08, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0x00, 0x83, 0x13, 0x18, 0xc1, 0x0f, 0x36, 0x19,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b, 0x16,
  0xf9, 0xd8, 0x90, 0xc8, 0xc7, 0x86, 0x43, 0x3e, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x80, 0xdd, 0xc9, 0x8d, 0xfc, 0x07, 0x9d, 0x8c, 0x26, 0x04,
  0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x1d, 0x03, 0x7c, 0xec,
  0x18, 0xe0, 0x63, 0xc7, 0x00, 0x1f, 0xd3, 0x44, 0x42, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0xa0, 0xf9, 0x89, 0x98, 0x68, 0xf0, 0x10, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xf6, 0x27, 0x63, 0xa2, 0xf9, 0x42,
  0x60, 0x1d, 0x49, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4,
  0x50, 0x29, 0x93, 0x4e, 0x1e, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xd0, 0x44, 0xc5, 0x4c, 0x3a, 0x70, 0x08, 0x0c, 0x0c, 0x4c, 0x42, 0x3e,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0x91, 0x0a, 0x9a, 0x80, 0x01,
  0x3d, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0x95, 0x4a, 0x9a,
  0x80, 0x81, 0x38, 0x04, 0xa3, 0x09, 0x74, 0x00, 0x8c, 0x26, 0xd4, 0x41,
  0x30, 0x9a, 0x60, 0x07, 0x82, 0xfd, 0xc7, 0x23, 0x1f, 0xfb, 0x8f, 0x47,
  0x3e, 0xf6, 0x1f, 0x8f, 0x7c, 0x46, 0x0c, 0x1e, 0x00, 0x04, 0xc1, 0xa0,
  0x91, 0x15, 0x33, 0xc9, 0x11, 0x1b, 0x49, 0x11, 0x14, 0xd1, 0x11, 0x1d,
  0x49, 0x95, 0x54, 0x79, 0x13, 0x1d, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x04, 0x8b, 0x46, 0x44, 0x3e, 0x16, 0x2c, 0xf2,
  0xb1, 0xa0, 0x90, 0x8f, 0x45, 0x26, 0x22, 0x1f, 0x0b, 0x1a, 0xf9, 0x58,
  0x70, 0xc8, 0xc7, 0xa2, 0x14, 0x91, 0x8f, 0x05, 0x8f, 0x7c, 0x2c, 0x48,
  0xe4, 0x63, 0x07, 0x04, 0x1f, 0x2b, 0x20, 0xf8, 0xd8, 0x00, 0xc1, 0x67,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xb0, 0x5e, 0xe9, 0x93, 0x32, 0x21,
  0x95, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0,
  0x61, 0x46, 0xe4, 0x63, 0x03, 0x8d, 0xc8, 0xc7, 0x86, 0x1a, 0x91, 0x8f,
  0x0d, 0x4a, 0x7c, 0x6c, 0x50, 0xe2, 0x63, 0x83, 0x12, 0x1f, 0x1b, 0xc8,
  0x44, 0x3e, 0x36, 0x94, 0x89, 0x7c, 0x6c, 0x30, 0x13, 0xf9, 0xd8, 0x00,
  0xc1, 0xc7, 0x06, 0x08, 0x3e, 0x36, 0x40, 0xf0, 0x19, 0x31, 0x48, 0x00,
  0x10, 0x04, 0x03, 0x64, 0x5e, 0x4e, 0x25, 0x5d, 0xd2, 0x05, 0x5c, 0x86,
  0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0xe6, 0xe5, 0x54, 0xd2, 0x25,
  0x5d, 0x6a, 0x45, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x64, 0x5e,
  0x4e, 0x25, 0x5d, 0xd2, 0xe5, 0x57, 0x82, 0x11, 0x83, 0x04, 0x00, 0x41,
  0x30, 0x40, 0xe6, 0xe5, 0x54, 0xd2, 0x25, 0x5d, 0x7a, 0xe5, 0x47, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
