#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xyzw        0     NONE   float   xyzw
; TEXCOORD                 1   xyz         1     NONE   float   xyz 
; COLOR                    0   xyzw        2     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: Compiled\BasicEffect_PSBasicPixelLighting.pdb
; shader hash: ad367024e9d065361c0d6fd87e52b062
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 12, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 8, 11 }
;   output 1 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 9, 11 }
;   output 2 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 10, 11 }
;   output 3 depends on inputs: { 11 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @PSBasicPixelLighting() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %14 = extractvalue %dx.types.CBufRet.f32 %13, 0
  %15 = extractvalue %dx.types.CBufRet.f32 %13, 1
  %16 = extractvalue %dx.types.CBufRet.f32 %13, 2
  %17 = fsub fast float %14, %9
  %18 = fsub fast float %15, %10
  %19 = fsub fast float %16, %11
  %20 = call float @dx.op.dot3.f32(i32 55, float %17, float %18, float %19, float %17, float %18, float %19)  ; Dot3(ax,ay,az,bx,by,bz)
  %21 = call float @dx.op.unary.f32(i32 25, float %20)  ; Rsqrt(value)
  %22 = fmul fast float %17, %21
  %23 = fmul fast float %18, %21
  %24 = fmul fast float %19, %21
  %25 = call float @dx.op.dot3.f32(i32 55, float %6, float %7, float %8, float %6, float %7, float %8)  ; Dot3(ax,ay,az,bx,by,bz)
  %26 = call float @dx.op.unary.f32(i32 25, float %25)  ; Rsqrt(value)
  %27 = fmul fast float %26, %6
  %28 = fmul fast float %26, %7
  %29 = fmul fast float %26, %8
  %30 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %31 = extractvalue %dx.types.CBufRet.f32 %30, 0
  %32 = extractvalue %dx.types.CBufRet.f32 %30, 1
  %33 = extractvalue %dx.types.CBufRet.f32 %30, 2
  %34 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.f32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.f32 %34, 1
  %37 = extractvalue %dx.types.CBufRet.f32 %34, 2
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = extractvalue %dx.types.CBufRet.f32 %38, 1
  %41 = extractvalue %dx.types.CBufRet.f32 %38, 2
  %42 = fsub fast float %22, %31
  %43 = fsub fast float %23, %32
  %44 = fsub fast float %24, %33
  %45 = call float @dx.op.dot3.f32(i32 55, float %42, float %43, float %44, float %42, float %43, float %44)  ; Dot3(ax,ay,az,bx,by,bz)
  %46 = call float @dx.op.unary.f32(i32 25, float %45)  ; Rsqrt(value)
  %47 = fmul fast float %46, %43
  %48 = fmul fast float %46, %44
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = fsub fast float %22, %50
  %62 = fsub fast float %23, %51
  %63 = fsub fast float %24, %52
  %64 = call float @dx.op.dot3.f32(i32 55, float %61, float %62, float %63, float %61, float %62, float %63)  ; Dot3(ax,ay,az,bx,by,bz)
  %65 = call float @dx.op.unary.f32(i32 25, float %64)  ; Rsqrt(value)
  %66 = fmul fast float %65, %62
  %67 = fmul fast float %65, %63
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 2
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %75 = extractvalue %dx.types.CBufRet.f32 %72, 2
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %80 = fsub fast float %22, %69
  %81 = fsub fast float %23, %70
  %82 = fsub fast float %24, %71
  %83 = call float @dx.op.dot3.f32(i32 55, float %80, float %81, float %82, float %80, float %81, float %82)  ; Dot3(ax,ay,az,bx,by,bz)
  %84 = call float @dx.op.unary.f32(i32 25, float %83)  ; Rsqrt(value)
  %85 = fmul fast float %84, %81
  %86 = fmul fast float %84, %82
  %87 = fsub fast float -0.000000e+00, %32
  %88 = fsub fast float -0.000000e+00, %33
  %89 = fsub fast float -0.000000e+00, %51
  %90 = fsub fast float -0.000000e+00, %52
  %91 = fsub fast float -0.000000e+00, %70
  %92 = fsub fast float -0.000000e+00, %71
  %93 = fmul fast float %27, %31
  %94 = fsub fast float -0.000000e+00, %93
  %95 = call float @dx.op.tertiary.f32(i32 46, float %87, float %28, float %94)  ; FMad(a,b,c)
  %96 = call float @dx.op.tertiary.f32(i32 46, float %88, float %29, float %95)  ; FMad(a,b,c)
  %97 = fmul fast float %27, %50
  %98 = fsub fast float -0.000000e+00, %97
  %99 = call float @dx.op.tertiary.f32(i32 46, float %89, float %28, float %98)  ; FMad(a,b,c)
  %100 = call float @dx.op.tertiary.f32(i32 46, float %90, float %29, float %99)  ; FMad(a,b,c)
  %101 = fmul fast float %27, %69
  %102 = fsub fast float -0.000000e+00, %101
  %103 = call float @dx.op.tertiary.f32(i32 46, float %91, float %28, float %102)  ; FMad(a,b,c)
  %104 = call float @dx.op.tertiary.f32(i32 46, float %92, float %29, float %103)  ; FMad(a,b,c)
  %105 = fmul fast float %42, %27
  %106 = fmul fast float %105, %46
  %107 = call float @dx.op.tertiary.f32(i32 46, float %47, float %28, float %106)  ; FMad(a,b,c)
  %108 = call float @dx.op.tertiary.f32(i32 46, float %48, float %29, float %107)  ; FMad(a,b,c)
  %109 = fmul fast float %61, %27
  %110 = fmul fast float %109, %65
  %111 = call float @dx.op.tertiary.f32(i32 46, float %66, float %28, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.tertiary.f32(i32 46, float %67, float %29, float %111)  ; FMad(a,b,c)
  %113 = fmul fast float %80, %27
  %114 = fmul fast float %113, %84
  %115 = call float @dx.op.tertiary.f32(i32 46, float %85, float %28, float %114)  ; FMad(a,b,c)
  %116 = call float @dx.op.tertiary.f32(i32 46, float %86, float %29, float %115)  ; FMad(a,b,c)
  %117 = fcmp fast olt float %96, 0.000000e+00
  %118 = fcmp fast olt float %100, 0.000000e+00
  %119 = fcmp fast olt float %104, 0.000000e+00
  %120 = select i1 %117, float 0.000000e+00, float 1.000000e+00
  %121 = select i1 %118, float 0.000000e+00, float 1.000000e+00
  %122 = select i1 %119, float 0.000000e+00, float 1.000000e+00
  %123 = fmul fast float %120, %96
  %124 = fmul fast float %121, %100
  %125 = fmul fast float %122, %104
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 3
  %128 = call float @dx.op.binary.f32(i32 35, float %108, float 0.000000e+00)  ; FMax(a,b)
  %129 = call float @dx.op.binary.f32(i32 35, float %112, float 0.000000e+00)  ; FMax(a,b)
  %130 = call float @dx.op.binary.f32(i32 35, float %116, float 0.000000e+00)  ; FMax(a,b)
  %131 = fmul fast float %128, %120
  %132 = fmul fast float %129, %121
  %133 = fmul fast float %130, %122
  %134 = call float @dx.op.unary.f32(i32 23, float %131)  ; Log(value)
  %135 = call float @dx.op.unary.f32(i32 23, float %132)  ; Log(value)
  %136 = call float @dx.op.unary.f32(i32 23, float %133)  ; Log(value)
  %137 = fmul fast float %134, %127
  %138 = fmul fast float %135, %127
  %139 = fmul fast float %136, %127
  %140 = call float @dx.op.unary.f32(i32 21, float %137)  ; Exp(value)
  %141 = call float @dx.op.unary.f32(i32 21, float %138)  ; Exp(value)
  %142 = call float @dx.op.unary.f32(i32 21, float %139)  ; Exp(value)
  %143 = fmul fast float %140, %96
  %144 = fmul fast float %141, %100
  %145 = fmul fast float %142, %104
  %146 = fmul fast float %123, %35
  %147 = call float @dx.op.tertiary.f32(i32 46, float %124, float %54, float %146)  ; FMad(a,b,c)
  %148 = call float @dx.op.tertiary.f32(i32 46, float %125, float %73, float %147)  ; FMad(a,b,c)
  %149 = fmul fast float %123, %36
  %150 = call float @dx.op.tertiary.f32(i32 46, float %124, float %55, float %149)  ; FMad(a,b,c)
  %151 = call float @dx.op.tertiary.f32(i32 46, float %125, float %74, float %150)  ; FMad(a,b,c)
  %152 = fmul fast float %123, %37
  %153 = call float @dx.op.tertiary.f32(i32 46, float %124, float %56, float %152)  ; FMad(a,b,c)
  %154 = call float @dx.op.tertiary.f32(i32 46, float %125, float %75, float %153)  ; FMad(a,b,c)
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = fmul fast float %156, %148
  %160 = fmul fast float %157, %151
  %161 = fmul fast float %158, %154
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 0
  %164 = extractvalue %dx.types.CBufRet.f32 %162, 1
  %165 = extractvalue %dx.types.CBufRet.f32 %162, 2
  %166 = fadd fast float %159, %163
  %167 = fadd fast float %160, %164
  %168 = fadd fast float %161, %165
  %169 = fmul fast float %143, %39
  %170 = call float @dx.op.tertiary.f32(i32 46, float %144, float %58, float %169)  ; FMad(a,b,c)
  %171 = call float @dx.op.tertiary.f32(i32 46, float %145, float %77, float %170)  ; FMad(a,b,c)
  %172 = fmul fast float %143, %40
  %173 = call float @dx.op.tertiary.f32(i32 46, float %144, float %59, float %172)  ; FMad(a,b,c)
  %174 = call float @dx.op.tertiary.f32(i32 46, float %145, float %78, float %173)  ; FMad(a,b,c)
  %175 = fmul fast float %143, %41
  %176 = call float @dx.op.tertiary.f32(i32 46, float %144, float %60, float %175)  ; FMad(a,b,c)
  %177 = call float @dx.op.tertiary.f32(i32 46, float %145, float %79, float %176)  ; FMad(a,b,c)
  %178 = extractvalue %dx.types.CBufRet.f32 %126, 0
  %179 = extractvalue %dx.types.CBufRet.f32 %126, 1
  %180 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %181 = fmul fast float %166, %2
  %182 = fmul fast float %167, %3
  %183 = fmul fast float %168, %4
  %184 = fmul fast float %171, %5
  %185 = fmul fast float %184, %178
  %186 = fmul fast float %174, %5
  %187 = fmul fast float %186, %179
  %188 = fmul fast float %177, %5
  %189 = fmul fast float %188, %180
  %190 = fadd fast float %185, %181
  %191 = fadd fast float %187, %182
  %192 = fadd fast float %189, %183
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 0
  %195 = extractvalue %dx.types.CBufRet.f32 %193, 1
  %196 = extractvalue %dx.types.CBufRet.f32 %193, 2
  %197 = fmul fast float %194, %5
  %198 = fmul fast float %195, %5
  %199 = fmul fast float %196, %5
  %200 = fsub fast float %197, %190
  %201 = fsub fast float %198, %191
  %202 = fsub fast float %199, %192
  %203 = fmul fast float %200, %12
  %204 = fmul fast float %201, %12
  %205 = fmul fast float %202, %12
  %206 = fadd fast float %203, %190
  %207 = fadd fast float %204, %191
  %208 = fadd fast float %205, %192
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %206)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %207)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %208)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!7 = !{[14 x i32] [i32 12, i32 4, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!8 = !{void ()* @PSBasicPixelLighting, !"PSBasicPixelLighting", !9, !4, null}
!9 = !{!10, !18, null}
!10 = !{!11, !14, !17}
!11 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !15, i8 2, i32 1, i8 3, i32 1, i8 0, !16}
!15 = !{i32 1}
!16 = !{i32 3, i32 7}
!17 = !{i32 2, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 2, i8 0, !13}
!18 = !{!19}
!19 = !{i32 0, !"SV_Target", i8 9, i8 16, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}

#endif

const unsigned char BasicEffect_PSBasicPixelLighting[] = {
  0x44, 0x58, 0x42, 0x43, 0xfb, 0xc1, 0x83, 0xcf, 0x84, 0x58, 0xe8, 0x05,
  0x68, 0x06, 0x6b, 0xc9, 0xa7, 0xe2, 0x4c, 0x99, 0x01, 0x00, 0x00, 0x00,
  0xfe, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x00,
  0x0e, 0x02, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00,
  0x9e, 0x02, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x80, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x71, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x32, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x50, 0x53,
  0x56, 0x30, 0xf4, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x01, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x02,
  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
  0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00,
  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00,
  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x52, 0x54,
  0x53, 0x30, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
  0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e, 0x34, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
  0x65, 0x64, 0x5c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x66, 0x66, 0x65,
  0x63, 0x74, 0x5f, 0x50, 0x53, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50, 0x69,
  0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x2e,
  0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xad, 0x36, 0x70, 0x24, 0xe9, 0xd0,
  0x65, 0x36, 0x1c, 0x0d, 0x6f, 0xd8, 0x7e, 0x52, 0xb0, 0x62, 0x44, 0x58,
  0x49, 0x4c, 0x58, 0x0c, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x16, 0x03,
  0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x40, 0x0c, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c,
  0x00, 0x00, 0x0d, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8,
  0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05,
  0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92,
  0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32,
  0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19,
  0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51,
  0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff,
  0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff,
  0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09,
  0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82,
  0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20,
  0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64,
  0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1,
  0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x88,
  0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60,
  0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80,
  0x20, 0x88, 0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3, 0x30, 0x0c,
  0xa4, 0x94, 0x61, 0x20, 0x06, 0x62, 0x0a, 0x31, 0x10, 0xc3, 0x40, 0xce,
  0x51, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x3e, 0xb7, 0x51, 0xc5, 0x4a,
  0x4c, 0x7e, 0x71, 0xdb, 0x88, 0x18, 0x86, 0x61, 0xa0, 0xe2, 0x9e, 0xe1,
  0xf2, 0x27, 0xec, 0x21, 0x24, 0x3f, 0x04, 0x9a, 0x61, 0x21, 0x50, 0x10,
  0x15, 0x02, 0x22, 0x24, 0x82, 0xa6, 0x52, 0x0c, 0xc4, 0x30, 0x0c, 0x54,
  0xcd, 0x11, 0x04, 0xc5, 0x90, 0x88, 0x82, 0x20, 0x2e, 0xc2, 0x06, 0x02,
  0x86, 0x11, 0x88, 0x61, 0x18, 0x61, 0x18, 0x72, 0x80, 0x4b, 0x82, 0xed,
  0xaa, 0xc3, 0x91, 0xa6, 0x05, 0xc0, 0x1c, 0x6a, 0xf2, 0x53, 0x20, 0x02,
  0x18, 0x62, 0x22, 0x22, 0x09, 0x35, 0x1b, 0xc7, 0x0d, 0x5d, 0xd7, 0x71,
  0xdc, 0xe6, 0x75, 0x1e, 0x7d, 0xe9, 0x40, 0x00, 0x00, 0x00, 0x13, 0x14,
  0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03,
  0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50,
  0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0,
  0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x28, 0x40, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x80,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xe3,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x67, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x4f, 0x05, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x1e, 0x0c, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xb2, 0x40, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x32, 0x1e,
  0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04,
  0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x18, 0x0a, 0xd8, 0xa0, 0x0c, 0xca,
  0xa3, 0x1c, 0x8a, 0x80, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28,
  0x83, 0x02, 0x21, 0x70, 0x06, 0x80, 0xc2, 0xb1, 0x1c, 0x86, 0x38, 0x8e,
  0xe3, 0x38, 0x8e, 0x03, 0x08, 0x04, 0xe2, 0x01, 0x00, 0x00, 0x79, 0x18,
  0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02,
  0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93,
  0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b,
  0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a,
  0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04,
  0x13, 0x04, 0x22, 0x99, 0x20, 0x10, 0xca, 0x06, 0x61, 0x20, 0x26, 0x08,
  0xc4, 0xb2, 0x41, 0x18, 0x0c, 0x0a, 0x70, 0x73, 0x1b, 0x06, 0xc4, 0x20,
  0x26, 0x08, 0x60, 0x70, 0x11, 0x98, 0x20, 0x10, 0xcc, 0x06, 0x84, 0x50,
  0x16, 0x82, 0x18, 0x18, 0x60, 0x43, 0xd0, 0x6c, 0x20, 0x00, 0xc0, 0x01,
  0x26, 0x08, 0x61, 0x80, 0x6d, 0x08, 0xa0, 0x09, 0x82, 0x00, 0x90, 0x82,
  0x9a, 0x12, 0x0a, 0x9b, 0x4b, 0x1b, 0x83, 0x4a, 0xc3, 0x2b, 0x63, 0x63,
  0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0x23, 0x42, 0x55, 0x84, 0x35,
  0xf4, 0xf4, 0x24, 0x45, 0x34, 0x41, 0x28, 0xa2, 0x09, 0x42, 0x21, 0x6d,
  0x08, 0x88, 0x09, 0x42, 0x31, 0x4d, 0x10, 0x0a, 0x6a, 0x82, 0x40, 0x34,
  0x13, 0x04, 0xc2, 0xd9, 0x20, 0x68, 0xdb, 0x86, 0x85, 0xa0, 0x2a, 0xeb,
  0xc2, 0x86, 0x8c, 0xb0, 0xb8, 0x0d, 0xc1, 0x30, 0x41, 0x28, 0xaa, 0x09,
  0x02, 0xf1, 0x6c, 0x10, 0x34, 0x30, 0xd8, 0xb0, 0x0c, 0x54, 0x65, 0x79,
  0xd8, 0xf0, 0x0d, 0x56, 0x18, 0x4c, 0x10, 0x08, 0x88, 0xc5, 0xd0, 0x13,
  0xd3, 0x93, 0xd4, 0x86, 0x65, 0x0c, 0xc8, 0xa0, 0xb2, 0x2e, 0x6c, 0xc8,
  0xc6, 0xc0, 0xe2, 0x36, 0x0c, 0x9d, 0x18, 0x94, 0x01, 0x93, 0x29, 0xab,
  0x2f, 0xaa, 0x30, 0xb9, 0xb3, 0x32, 0xba, 0x09, 0x42, 0x61, 0x6d, 0x58,
  0x88, 0x33, 0xa8, 0xd0, 0xe0, 0xb2, 0x86, 0x8c, 0xb0, 0xb8, 0x0d, 0x41,
  0x1a, 0x6c, 0x18, 0xcc, 0x40, 0x0d, 0x80, 0x0d, 0x85, 0x34, 0xad, 0xc1,
  0x03, 0x54, 0x61, 0x63, 0xb3, 0x6b, 0x73, 0x49, 0x23, 0x2b, 0x73, 0xa3,
  0x9b, 0x12, 0x04, 0x55, 0xc8, 0xf0, 0x5c, 0xec, 0xca, 0xe4, 0xe6, 0xd2,
  0xde, 0xdc, 0xa6, 0x04, 0x44, 0x13, 0x32, 0x3c, 0x17, 0xbb, 0x30, 0x36,
  0xbb, 0x32, 0xb9, 0x29, 0x81, 0x51, 0x87, 0x0c, 0xcf, 0x65, 0x0e, 0x2d,
  0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d, 0xac, 0x8c, 0x6d, 0x4a, 0x80, 0x94,
  0x21, 0xc3, 0x73, 0x91, 0x2b, 0x9b, 0x7b, 0xab, 0x93, 0x1b, 0x2b, 0x9b,
  0x9b, 0x12, 0x38, 0x75, 0xc8, 0xf0, 0x5c, 0xec, 0xd2, 0xca, 0xee, 0x92,
  0xc8, 0xa6, 0xe8, 0xc2, 0xe8, 0xca, 0xa6, 0x04, 0x50, 0x1d, 0x32, 0x3c,
  0x97, 0x32, 0x37, 0x3a, 0xb9, 0x3c, 0xa8, 0xb7, 0x34, 0x37, 0xba, 0xb9,
  0x29, 0xc1, 0x1a, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00,
  0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01,
  0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78,
  0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4,
  0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c,
  0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03,
  0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70,
  0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70,
  0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec,
  0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0,
  0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d,
  0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43,
  0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0,
  0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68,
  0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28,
  0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08,
  0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee,
  0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62,
  0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06,
  0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3,
  0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3,
  0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80,
  0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec,
  0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d,
  0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d,
  0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20,
  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x06, 0x40, 0xa5, 0xec, 0x06, 0x48,
  0x88, 0x90, 0x22, 0x17, 0xb1, 0x94, 0x88, 0x71, 0x4c, 0x48, 0x63, 0x58,
  0x01, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x01, 0xd2, 0x00, 0x11, 0xe6, 0x17,
  0xb7, 0x6d, 0x06, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14,
  0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x7e, 0x71, 0xdb,
  0x86, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x11, 0xc0, 0x44, 0x84,
  0x40, 0x33, 0x2c, 0x84, 0x0d, 0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x38,
  0xd3, 0xed, 0x17, 0xb7, 0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce, 0xe3, 0x2f,
  0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x26, 0x50, 0x0d,
  0x97, 0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81, 0x52, 0xd3, 0x43, 0x4d,
  0x7e, 0x71, 0xdb, 0x76, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44, 0x44,
  0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x11, 0x3c, 0xc3, 0xe5, 0x3b,
  0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x03, 0x00, 0x61, 0x20,
  0x00, 0x00, 0x89, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00,
  0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x74, 0x8d, 0x00, 0x50, 0x51, 0x02,
  0x44, 0x94, 0x46, 0x71, 0x95, 0x5d, 0x21, 0xcc, 0x00, 0x94, 0x5b, 0xc9,
  0x94, 0x42, 0x19, 0x95, 0x4b, 0xa9, 0x94, 0x5c, 0x61, 0x94, 0x44, 0x51,
  0x14, 0x44, 0x59, 0xd0, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x23,
  0x00, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x28, 0x00, 0x00, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x80, 0x9d, 0x41, 0xc2, 0x95, 0x41, 0x19, 0x58,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xbc, 0x81, 0x04, 0x06, 0x66,
  0xe0, 0x45, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xc0, 0xc1, 0x14,
  0x06, 0x67, 0x70, 0x49, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xc4,
  0x01, 0x25, 0x06, 0x68, 0xf0, 0x4d, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x60, 0xc8, 0x41, 0x35, 0x06, 0x69, 0xe0, 0x51, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0xcc, 0x81, 0xb5, 0x06, 0x6a, 0x20, 0x06, 0xd5, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x74, 0x70, 0xb1, 0xc1, 0x1a, 0x6c,
  0xd6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x75, 0x80, 0xb5, 0x01,
  0x1b, 0x8c, 0xc1, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1d,
  0x64, 0x6d, 0xd0, 0x06, 0x65, 0x80, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0x71, 0x07, 0x9a, 0x1b, 0xb8, 0x81, 0x97, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0x81, 0x07, 0xdb, 0x1b, 0xbc, 0x81, 0x19, 0x68, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xe4, 0x01, 0x07, 0x07, 0x70, 0x50,
  0x06, 0xdb, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x4c, 0x75, 0xe0, 0x31,
  0xd4, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8,
  0x80, 0xc4, 0xc7, 0x06, 0x24, 0x3e, 0x36, 0x20, 0xf1, 0x19, 0x31, 0x58,
  0x00, 0x10, 0x04, 0x03, 0xe5, 0x0f, 0xc4, 0x60, 0x10, 0x82, 0x41, 0x08,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80, 0xf9, 0x03, 0x31, 0x08, 0xac,
  0x08, 0xe4, 0x63, 0x85, 0x20, 0x1f, 0x2b, 0x06, 0xf9, 0x8c, 0x18, 0x2c,
  0x00, 0x08, 0x82, 0x81, 0x42, 0x0a, 0x67, 0x30, 0x49, 0xd1, 0x24, 0x45,
  0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xc0, 0x90, 0xc2, 0x19, 0x04, 0x16,
  0x54, 0xf2, 0x31, 0xa1, 0x92, 0x8f, 0x0d, 0x95, 0x7c, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0x60, 0x32, 0x85, 0x37, 0xe8, 0xfe, 0x60, 0x34, 0x21,
  0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0x60, 0x52, 0x85, 0x39, 0x08, 0x83, 0x52, 0x18, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0x98, 0x5c, 0xe1, 0x0e, 0xca, 0x80, 0x0d, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0xa8, 0x25, 0x3e, 0x46,
  0x2d, 0xf1, 0x31, 0x6a, 0x89, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18,
  0x28, 0xb8, 0xb0, 0x07, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x0c, 0x2e, 0xec, 0x41, 0x60, 0x01, 0x21, 0x1f, 0x13,
  0x08, 0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x94, 0x0b, 0xa2,
  0x00, 0x07, 0xa1, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0xf5, 0x82, 0x29,
  0xd0, 0x01, 0x2d, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x4c, 0xe1, 0xa0, 0x0a,
  0x78, 0xe0, 0x07, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09,
  0x83, 0x60, 0x67, 0xb0, 0xc4, 0xc7, 0xce, 0x60, 0x89, 0x8f, 0x9d, 0xc1,
  0x12, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x50, 0xd6, 0xc1, 0x15,
  0x06, 0x21, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98,
  0x75, 0x70, 0x85, 0xc0, 0x02, 0x42, 0x3e, 0x26, 0x10, 0xf2, 0x19, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x83, 0x89, 0x1d, 0x6a, 0x61, 0x14, 0x60, 0x61,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0x60, 0x82, 0x87, 0x5c, 0x38, 0x05, 0x56, 0x18,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0x98, 0xe8, 0xa1, 0x17, 0x56, 0xe1, 0x15, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0xf4, 0x60,
  0x89, 0x8f, 0xe9, 0xc1, 0x12, 0x1f, 0xd3, 0x83, 0x25, 0x3e, 0x23, 0x06,
  0x0b, 0x00, 0x82, 0x60, 0xa0, 0xf8, 0x43, 0x38, 0x0c, 0x42, 0x30, 0x08,
  0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xfe, 0x10, 0x0e, 0x81,
  0x05, 0x84, 0x7c, 0x4c, 0x20, 0xe4, 0x63, 0xb7, 0x70, 0x07, 0xf1, 0x31,
  0x5c, 0xb8, 0x83, 0xf8, 0x58, 0x2e, 0x98, 0x41, 0x7c, 0x4c, 0x17, 0xcc,
  0x20, 0x3e, 0xb6, 0x0b, 0x55, 0x7c, 0x8c, 0x17, 0xaa, 0xf8, 0x98, 0x28,
  0xf8, 0x81, 0x7c, 0xcc, 0x17, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x41, 0x65, 0x12, 0xf1, 0x80, 0x8c, 0x42, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0xd5, 0x49, 0xc8, 0x03, 0x32, 0x0a, 0x81, 0x99, 0xc2,
  0x1b, 0xc8, 0xc7, 0xc4, 0x21, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x54, 0x2a, 0x51, 0x0f, 0xca, 0x29, 0x04, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x50, 0xad, 0x84, 0x3d, 0x28, 0xa7, 0x10, 0x98, 0x2a, 0x80,
  0x81, 0x7c, 0xcc, 0x1c, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x41, 0xe5, 0x12, 0xf9, 0xc0, 0xac, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0xd5, 0x4b, 0xe8, 0x03, 0xb3, 0x0a, 0x81, 0xfd, 0x81, 0x2b,
  0xc8, 0xc7, 0x02, 0x3e, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x54, 0x32, 0xd1, 0x0f, 0x7c, 0xf0, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x54, 0x33, 0xe1, 0x0f, 0x7c, 0xf0, 0x0a, 0x81, 0xc1, 0x81,
  0x2c, 0xc8, 0xc7, 0x82, 0x36, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x54, 0x36, 0x11, 0x12, 0x6d, 0x30, 0x0b, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x54, 0x37, 0x21, 0x12, 0x6d, 0x30, 0x0b, 0x81, 0x85,
  0x81, 0x2d, 0xc8, 0xc7, 0x02, 0x4f, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x50, 0xe9, 0x44, 0x49, 0x78, 0xb7, 0x10, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0xb5, 0x13, 0x26, 0xe1, 0xdd, 0x42, 0x30, 0x1c, 0x51,
  0xd9, 0x03, 0xf1, 0x0d, 0x47, 0x48, 0xf7, 0x40, 0x7c, 0xc3, 0x11, 0x0f,
  0x3e, 0x10, 0xdf, 0x74, 0x43, 0x3e, 0xe8, 0xc3, 0x30, 0xdd, 0xa0, 0x0f,
  0xfb, 0x30, 0x4c, 0x37, 0xec, 0x03, 0x3f, 0x0c, 0x36, 0x6c, 0xf2, 0xb1,
  0x01, 0x93, 0x8f, 0x0d, 0x95, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1,
  0x60, 0x32, 0x8b, 0x97, 0xe8, 0x07, 0x9e, 0x18, 0x4d, 0x08, 0x86, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0x70, 0xd2, 0x62, 0x25, 0xa8, 0x90, 0x18,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x47, 0x2d, 0x58, 0x22, 0x12, 0x89,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x70, 0xd6, 0xa2, 0x25, 0x9c, 0x91,
  0xb0, 0x61, 0x91, 0x8f, 0x0d, 0x8b, 0x7c, 0x6c, 0x58, 0xe4, 0x33, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0x0c, 0x5c, 0xc0, 0xc4, 0x30, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0x4c, 0x5c, 0xc4, 0xc4, 0x30, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x8c, 0x5c, 0xc8, 0xc4, 0x60, 0x83, 0x22, 0x1f, 0x1b,
  0x16, 0xf9, 0xd8, 0xc0, 0xc8, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x18, 0xbb, 0xa8, 0x89, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98,
  0xbb, 0xb0, 0x89, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18, 0xbc,
  0xb8, 0x89, 0xc1, 0x86, 0x37, 0x90, 0x8f, 0x0d, 0x6c, 0x20, 0x1f, 0x1b,
  0xd2, 0x40, 0x3e, 0x76, 0xbd, 0x83, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0xa0, 0xd2, 0x8b, 0xb2, 0xb8, 0x7a, 0x21, 0x18, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x6a, 0x2f, 0xcc, 0xe2, 0x5a, 0x85, 0xc0, 0xb4, 0x78,
  0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0x7d, 0x81, 0x16,
  0xda, 0x2f, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xf9, 0x45,
  0x5a, 0x68, 0xad, 0x10, 0x58, 0x37, 0x0f, 0xf2, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x0a, 0x34, 0xd6, 0xa2, 0x0b, 0x87, 0x60, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0xaa, 0xd0, 0x60, 0x8b, 0xee, 0x15, 0x82, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0x98, 0x46, 0x83, 0x2d, 0x74, 0xe2, 0x2f,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x86,
  0x45, 0x3e, 0x36, 0x24, 0xf2, 0xb1, 0xe1, 0x90, 0xcf, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x4c, 0xaa, 0x31, 0x17, 0x61, 0x71, 0x1a, 0xa3, 0x09,
  0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0xc7, 0x00, 0x1f,
  0x3b, 0x06, 0xf8, 0xd8, 0x31, 0xc0, 0xc7, 0x34, 0x91, 0x90, 0xcf, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0xb1, 0xc1, 0x17, 0x1a, 0x3c, 0x04,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xc9, 0x46, 0x5f, 0x68, 0xbe,
  0x10, 0x58, 0x47, 0x12, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0x8a, 0x36, 0xfe, 0xa2, 0x93, 0x87, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xaa, 0xda, 0x00, 0x8d, 0x0e, 0x1c, 0x02, 0x03, 0x03, 0x93, 0x90,
  0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0xb7, 0x21, 0x1a, 0x60,
  0x40, 0x0f, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0xb8, 0x31,
  0x1a, 0x60, 0x20, 0x0e, 0xc1, 0x68, 0x02, 0x1d, 0x00, 0xa3, 0x09, 0x75,
  0x10, 0x8c, 0x26, 0xd8, 0x81, 0x60, 0xcf, 0x5c, 0xc8, 0xc7, 0x9e, 0xb9,
  0x90, 0x8f, 0x3d, 0x73, 0x21, 0x1f, 0x6b, 0xe6, 0x42, 0x3e, 0x16, 0x1c,
  0xf2, 0x31, 0xa6, 0x2e, 0xe4, 0x63, 0x01, 0x22, 0x1f, 0x5b, 0xee, 0x42,
  0x3e, 0x16, 0x24, 0xf2, 0xb1, 0x22, 0x81, 0x8f, 0x11, 0x09, 0x7c, 0x6c,
  0x48, 0xe0, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x53, 0x7a, 0xc8,
  0x06, 0x68, 0xd0, 0xc6, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x20, 0xd8, 0x00, 0x1a, 0xf2, 0xb1, 0x21, 0x34, 0xe4, 0x63, 0x83,
  0x68, 0xc8, 0xc7, 0x06, 0x25, 0x3e, 0x36, 0x28, 0xf1, 0xb1, 0x41, 0x89,
  0x8f, 0x0d, 0x7f, 0x21, 0x1f, 0x1b, 0x40, 0x43, 0x3e, 0x36, 0x84, 0x86,
  0x7c, 0x6c, 0x80, 0xe0, 0x63, 0x03, 0x04, 0x1f, 0x1b, 0x20, 0xf8, 0x8c,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0xd2, 0x1f, 0xbd, 0x51, 0x1f, 0xf5,
  0xd1, 0x1e, 0xc3, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0xfd, 0xd1,
  0x1b, 0xf5, 0x51, 0x1f, 0xe5, 0x21, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x01, 0xd2, 0x1f, 0xbd, 0x51, 0x1f, 0xf5, 0xc1, 0x1e, 0xc1, 0x88, 0x41,
  0x02, 0x80, 0x20, 0x18, 0x20, 0xfd, 0xd1, 0x1b, 0xf5, 0x51, 0x1f, 0xea,
  0xc1, 0x1a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
