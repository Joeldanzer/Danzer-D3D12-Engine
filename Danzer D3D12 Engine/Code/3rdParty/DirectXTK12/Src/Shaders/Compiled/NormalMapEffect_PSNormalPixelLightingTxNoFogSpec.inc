#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: Compiled\NormalMapEffect_PSNormalPixelLightingTxNoFogSpec.pdb
; shader hash: 14fe087ff2ffec7f577900aa6e124ee4
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSNormalPixelLightingTxNoFogSpec() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %3, float %15, float %16, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %18 = extractvalue %dx.types.ResRet.f32 %17, 0
  %19 = extractvalue %dx.types.ResRet.f32 %17, 1
  %20 = extractvalue %dx.types.ResRet.f32 %17, 2
  %21 = extractvalue %dx.types.ResRet.f32 %17, 3
  %22 = fmul fast float %18, %5
  %23 = fmul fast float %19, %6
  %24 = fmul fast float %20, %7
  %25 = fmul fast float %21, %8
  %26 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %27 = extractvalue %dx.types.CBufRet.f32 %26, 0
  %28 = extractvalue %dx.types.CBufRet.f32 %26, 1
  %29 = extractvalue %dx.types.CBufRet.f32 %26, 2
  %30 = fsub fast float %27, %12
  %31 = fsub fast float %28, %13
  %32 = fsub fast float %29, %14
  %33 = call float @dx.op.dot3.f32(i32 55, float %30, float %31, float %32, float %30, float %31, float %32)  ; Dot3(ax,ay,az,bx,by,bz)
  %34 = call float @dx.op.unary.f32(i32 25, float %33)  ; Rsqrt(value)
  %35 = fmul fast float %30, %34
  %36 = fmul fast float %31, %34
  %37 = fmul fast float %32, %34
  %38 = call float @dx.op.dot3.f32(i32 55, float %9, float %10, float %11, float %9, float %10, float %11)  ; Dot3(ax,ay,az,bx,by,bz)
  %39 = call float @dx.op.unary.f32(i32 25, float %38)  ; Rsqrt(value)
  %40 = fmul fast float %39, %9
  %41 = fmul fast float %39, %10
  %42 = fmul fast float %39, %11
  %43 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %15, float %16, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %44 = extractvalue %dx.types.ResRet.f32 %43, 0
  %45 = extractvalue %dx.types.ResRet.f32 %43, 1
  %46 = fmul fast float %44, 2.000000e+00
  %47 = fmul fast float %45, 2.000000e+00
  %48 = fadd fast float %46, -1.000000e+00
  %49 = fadd fast float %47, -1.000000e+00
  %50 = call float @dx.op.dot2.f32(i32 54, float %48, float %49, float %48, float %49)  ; Dot2(ax,ay,bx,by)
  %51 = fsub fast float 1.000000e+00, %50
  %52 = call float @dx.op.unary.f32(i32 24, float %51)  ; Sqrt(value)
  %53 = call float @dx.op.unary.f32(i32 83, float %12)  ; DerivCoarseX(value)
  %54 = call float @dx.op.unary.f32(i32 83, float %13)  ; DerivCoarseX(value)
  %55 = call float @dx.op.unary.f32(i32 83, float %14)  ; DerivCoarseX(value)
  %56 = call float @dx.op.unary.f32(i32 84, float %12)  ; DerivCoarseY(value)
  %57 = call float @dx.op.unary.f32(i32 84, float %13)  ; DerivCoarseY(value)
  %58 = call float @dx.op.unary.f32(i32 84, float %14)  ; DerivCoarseY(value)
  %59 = call float @dx.op.unary.f32(i32 83, float %15)  ; DerivCoarseX(value)
  %60 = call float @dx.op.unary.f32(i32 83, float %16)  ; DerivCoarseX(value)
  %61 = call float @dx.op.unary.f32(i32 84, float %15)  ; DerivCoarseY(value)
  %62 = call float @dx.op.unary.f32(i32 84, float %16)  ; DerivCoarseY(value)
  %63 = fmul fast float %58, %54
  %64 = fmul fast float %57, %55
  %65 = fsub fast float %63, %64
  %66 = fmul fast float %56, %55
  %67 = fmul fast float %58, %53
  %68 = fsub fast float %66, %67
  %69 = fmul fast float %57, %53
  %70 = fmul fast float %56, %54
  %71 = fsub fast float %69, %70
  %72 = fmul fast float %71, %57
  %73 = fmul fast float %68, %58
  %74 = fsub fast float %72, %73
  %75 = fmul fast float %65, %58
  %76 = fmul fast float %71, %56
  %77 = fsub fast float %75, %76
  %78 = fmul fast float %68, %56
  %79 = fmul fast float %65, %57
  %80 = fsub fast float %78, %79
  %81 = fmul fast float %68, %55
  %82 = fmul fast float %71, %54
  %83 = fsub fast float %81, %82
  %84 = fmul fast float %71, %53
  %85 = fmul fast float %65, %55
  %86 = fsub fast float %84, %85
  %87 = fmul fast float %65, %54
  %88 = fmul fast float %68, %53
  %89 = fsub fast float %87, %88
  %90 = fmul fast float %74, %59
  %91 = call float @dx.op.tertiary.f32(i32 46, float %61, float %83, float %90)  ; FMad(a,b,c)
  %92 = fmul fast float %77, %59
  %93 = call float @dx.op.tertiary.f32(i32 46, float %61, float %86, float %92)  ; FMad(a,b,c)
  %94 = fmul fast float %80, %59
  %95 = call float @dx.op.tertiary.f32(i32 46, float %61, float %89, float %94)  ; FMad(a,b,c)
  %96 = call float @dx.op.dot3.f32(i32 55, float %91, float %93, float %95, float %91, float %93, float %95)  ; Dot3(ax,ay,az,bx,by,bz)
  %97 = call float @dx.op.unary.f32(i32 25, float %96)  ; Rsqrt(value)
  %98 = fmul fast float %74, %60
  %99 = call float @dx.op.tertiary.f32(i32 46, float %62, float %83, float %98)  ; FMad(a,b,c)
  %100 = fmul fast float %77, %60
  %101 = call float @dx.op.tertiary.f32(i32 46, float %62, float %86, float %100)  ; FMad(a,b,c)
  %102 = fmul fast float %80, %60
  %103 = call float @dx.op.tertiary.f32(i32 46, float %62, float %89, float %102)  ; FMad(a,b,c)
  %104 = call float @dx.op.dot3.f32(i32 55, float %99, float %101, float %103, float %99, float %101, float %103)  ; Dot3(ax,ay,az,bx,by,bz)
  %105 = call float @dx.op.unary.f32(i32 25, float %104)  ; Rsqrt(value)
  %106 = fmul fast float %105, %99
  %107 = fmul fast float %105, %101
  %108 = fmul fast float %105, %103
  %109 = fmul fast float %91, %48
  %110 = fmul fast float %109, %97
  %111 = call float @dx.op.tertiary.f32(i32 46, float %49, float %106, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.tertiary.f32(i32 46, float %52, float %40, float %111)  ; FMad(a,b,c)
  %113 = fmul fast float %93, %48
  %114 = fmul fast float %113, %97
  %115 = call float @dx.op.tertiary.f32(i32 46, float %49, float %107, float %114)  ; FMad(a,b,c)
  %116 = call float @dx.op.tertiary.f32(i32 46, float %52, float %41, float %115)  ; FMad(a,b,c)
  %117 = fmul fast float %95, %48
  %118 = fmul fast float %117, %97
  %119 = call float @dx.op.tertiary.f32(i32 46, float %49, float %108, float %118)  ; FMad(a,b,c)
  %120 = call float @dx.op.tertiary.f32(i32 46, float %52, float %42, float %119)  ; FMad(a,b,c)
  %121 = call float @dx.op.dot3.f32(i32 55, float %112, float %116, float %120, float %112, float %116, float %120)  ; Dot3(ax,ay,az,bx,by,bz)
  %122 = call float @dx.op.unary.f32(i32 25, float %121)  ; Rsqrt(value)
  %123 = fmul fast float %122, %112
  %124 = fmul fast float %122, %116
  %125 = fmul fast float %122, %120
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 0
  %128 = extractvalue %dx.types.CBufRet.f32 %126, 1
  %129 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.f32 %130, 0
  %132 = extractvalue %dx.types.CBufRet.f32 %130, 1
  %133 = extractvalue %dx.types.CBufRet.f32 %130, 2
  %134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.f32 %134, 0
  %136 = extractvalue %dx.types.CBufRet.f32 %134, 1
  %137 = extractvalue %dx.types.CBufRet.f32 %134, 2
  %138 = fsub fast float %35, %127
  %139 = fsub fast float %36, %128
  %140 = fsub fast float %37, %129
  %141 = call float @dx.op.dot3.f32(i32 55, float %138, float %139, float %140, float %138, float %139, float %140)  ; Dot3(ax,ay,az,bx,by,bz)
  %142 = call float @dx.op.unary.f32(i32 25, float %141)  ; Rsqrt(value)
  %143 = fmul fast float %142, %139
  %144 = fmul fast float %142, %140
  %145 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %146 = extractvalue %dx.types.CBufRet.f32 %145, 0
  %147 = extractvalue %dx.types.CBufRet.f32 %145, 1
  %148 = extractvalue %dx.types.CBufRet.f32 %145, 2
  %149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %150 = extractvalue %dx.types.CBufRet.f32 %149, 0
  %151 = extractvalue %dx.types.CBufRet.f32 %149, 1
  %152 = extractvalue %dx.types.CBufRet.f32 %149, 2
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = fsub fast float %35, %146
  %158 = fsub fast float %36, %147
  %159 = fsub fast float %37, %148
  %160 = call float @dx.op.dot3.f32(i32 55, float %157, float %158, float %159, float %157, float %158, float %159)  ; Dot3(ax,ay,az,bx,by,bz)
  %161 = call float @dx.op.unary.f32(i32 25, float %160)  ; Rsqrt(value)
  %162 = fmul fast float %161, %158
  %163 = fmul fast float %161, %159
  %164 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %165 = extractvalue %dx.types.CBufRet.f32 %164, 0
  %166 = extractvalue %dx.types.CBufRet.f32 %164, 1
  %167 = extractvalue %dx.types.CBufRet.f32 %164, 2
  %168 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %169 = extractvalue %dx.types.CBufRet.f32 %168, 0
  %170 = extractvalue %dx.types.CBufRet.f32 %168, 1
  %171 = extractvalue %dx.types.CBufRet.f32 %168, 2
  %172 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %173 = extractvalue %dx.types.CBufRet.f32 %172, 0
  %174 = extractvalue %dx.types.CBufRet.f32 %172, 1
  %175 = extractvalue %dx.types.CBufRet.f32 %172, 2
  %176 = fsub fast float %35, %165
  %177 = fsub fast float %36, %166
  %178 = fsub fast float %37, %167
  %179 = call float @dx.op.dot3.f32(i32 55, float %176, float %177, float %178, float %176, float %177, float %178)  ; Dot3(ax,ay,az,bx,by,bz)
  %180 = call float @dx.op.unary.f32(i32 25, float %179)  ; Rsqrt(value)
  %181 = fmul fast float %180, %177
  %182 = fmul fast float %180, %178
  %183 = fsub fast float -0.000000e+00, %128
  %184 = fsub fast float -0.000000e+00, %129
  %185 = fsub fast float -0.000000e+00, %147
  %186 = fsub fast float -0.000000e+00, %148
  %187 = fsub fast float -0.000000e+00, %166
  %188 = fsub fast float -0.000000e+00, %167
  %189 = fmul fast float %123, %127
  %190 = fsub fast float -0.000000e+00, %189
  %191 = call float @dx.op.tertiary.f32(i32 46, float %183, float %124, float %190)  ; FMad(a,b,c)
  %192 = call float @dx.op.tertiary.f32(i32 46, float %184, float %125, float %191)  ; FMad(a,b,c)
  %193 = fmul fast float %123, %146
  %194 = fsub fast float -0.000000e+00, %193
  %195 = call float @dx.op.tertiary.f32(i32 46, float %185, float %124, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %186, float %125, float %195)  ; FMad(a,b,c)
  %197 = fmul fast float %123, %165
  %198 = fsub fast float -0.000000e+00, %197
  %199 = call float @dx.op.tertiary.f32(i32 46, float %187, float %124, float %198)  ; FMad(a,b,c)
  %200 = call float @dx.op.tertiary.f32(i32 46, float %188, float %125, float %199)  ; FMad(a,b,c)
  %201 = fmul fast float %138, %123
  %202 = fmul fast float %201, %142
  %203 = call float @dx.op.tertiary.f32(i32 46, float %143, float %124, float %202)  ; FMad(a,b,c)
  %204 = call float @dx.op.tertiary.f32(i32 46, float %144, float %125, float %203)  ; FMad(a,b,c)
  %205 = fmul fast float %157, %123
  %206 = fmul fast float %205, %161
  %207 = call float @dx.op.tertiary.f32(i32 46, float %162, float %124, float %206)  ; FMad(a,b,c)
  %208 = call float @dx.op.tertiary.f32(i32 46, float %163, float %125, float %207)  ; FMad(a,b,c)
  %209 = fmul fast float %176, %123
  %210 = fmul fast float %209, %180
  %211 = call float @dx.op.tertiary.f32(i32 46, float %181, float %124, float %210)  ; FMad(a,b,c)
  %212 = call float @dx.op.tertiary.f32(i32 46, float %182, float %125, float %211)  ; FMad(a,b,c)
  %213 = fcmp fast olt float %192, 0.000000e+00
  %214 = fcmp fast olt float %196, 0.000000e+00
  %215 = fcmp fast olt float %200, 0.000000e+00
  %216 = select i1 %213, float 0.000000e+00, float 1.000000e+00
  %217 = select i1 %214, float 0.000000e+00, float 1.000000e+00
  %218 = select i1 %215, float 0.000000e+00, float 1.000000e+00
  %219 = fmul fast float %216, %192
  %220 = fmul fast float %217, %196
  %221 = fmul fast float %218, %200
  %222 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %223 = extractvalue %dx.types.CBufRet.f32 %222, 3
  %224 = call float @dx.op.binary.f32(i32 35, float %204, float 0.000000e+00)  ; FMax(a,b)
  %225 = call float @dx.op.binary.f32(i32 35, float %208, float 0.000000e+00)  ; FMax(a,b)
  %226 = call float @dx.op.binary.f32(i32 35, float %212, float 0.000000e+00)  ; FMax(a,b)
  %227 = fmul fast float %224, %216
  %228 = fmul fast float %225, %217
  %229 = fmul fast float %226, %218
  %230 = call float @dx.op.unary.f32(i32 23, float %227)  ; Log(value)
  %231 = call float @dx.op.unary.f32(i32 23, float %228)  ; Log(value)
  %232 = call float @dx.op.unary.f32(i32 23, float %229)  ; Log(value)
  %233 = fmul fast float %230, %223
  %234 = fmul fast float %231, %223
  %235 = fmul fast float %232, %223
  %236 = call float @dx.op.unary.f32(i32 21, float %233)  ; Exp(value)
  %237 = call float @dx.op.unary.f32(i32 21, float %234)  ; Exp(value)
  %238 = call float @dx.op.unary.f32(i32 21, float %235)  ; Exp(value)
  %239 = fmul fast float %236, %192
  %240 = fmul fast float %237, %196
  %241 = fmul fast float %238, %200
  %242 = fmul fast float %219, %131
  %243 = call float @dx.op.tertiary.f32(i32 46, float %220, float %150, float %242)  ; FMad(a,b,c)
  %244 = call float @dx.op.tertiary.f32(i32 46, float %221, float %169, float %243)  ; FMad(a,b,c)
  %245 = fmul fast float %219, %132
  %246 = call float @dx.op.tertiary.f32(i32 46, float %220, float %151, float %245)  ; FMad(a,b,c)
  %247 = call float @dx.op.tertiary.f32(i32 46, float %221, float %170, float %246)  ; FMad(a,b,c)
  %248 = fmul fast float %219, %133
  %249 = call float @dx.op.tertiary.f32(i32 46, float %220, float %152, float %248)  ; FMad(a,b,c)
  %250 = call float @dx.op.tertiary.f32(i32 46, float %221, float %171, float %249)  ; FMad(a,b,c)
  %251 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %252 = extractvalue %dx.types.CBufRet.f32 %251, 0
  %253 = extractvalue %dx.types.CBufRet.f32 %251, 1
  %254 = extractvalue %dx.types.CBufRet.f32 %251, 2
  %255 = fmul fast float %252, %244
  %256 = fmul fast float %253, %247
  %257 = fmul fast float %254, %250
  %258 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.f32 %258, 0
  %260 = extractvalue %dx.types.CBufRet.f32 %258, 1
  %261 = extractvalue %dx.types.CBufRet.f32 %258, 2
  %262 = fadd fast float %255, %259
  %263 = fadd fast float %256, %260
  %264 = fadd fast float %257, %261
  %265 = fmul fast float %239, %135
  %266 = call float @dx.op.tertiary.f32(i32 46, float %240, float %154, float %265)  ; FMad(a,b,c)
  %267 = call float @dx.op.tertiary.f32(i32 46, float %241, float %173, float %266)  ; FMad(a,b,c)
  %268 = fmul fast float %239, %136
  %269 = call float @dx.op.tertiary.f32(i32 46, float %240, float %155, float %268)  ; FMad(a,b,c)
  %270 = call float @dx.op.tertiary.f32(i32 46, float %241, float %174, float %269)  ; FMad(a,b,c)
  %271 = fmul fast float %239, %137
  %272 = call float @dx.op.tertiary.f32(i32 46, float %240, float %156, float %271)  ; FMad(a,b,c)
  %273 = call float @dx.op.tertiary.f32(i32 46, float %241, float %175, float %272)  ; FMad(a,b,c)
  %274 = extractvalue %dx.types.CBufRet.f32 %222, 0
  %275 = extractvalue %dx.types.CBufRet.f32 %222, 1
  %276 = extractvalue %dx.types.CBufRet.f32 %222, 2
  %277 = fmul fast float %22, %262
  %278 = fmul fast float %23, %263
  %279 = fmul fast float %24, %264
  %280 = fmul fast float %267, %25
  %281 = fmul fast float %280, %274
  %282 = fmul fast float %270, %25
  %283 = fmul fast float %282, %275
  %284 = fmul fast float %273, %25
  %285 = fmul fast float %284, %276
  %286 = fadd fast float %281, %277
  %287 = fadd fast float %283, %278
  %288 = fadd fast float %285, %279
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %286)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %287)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %288)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %25)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!13}
!dx.entryPoints = !{!14}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{!5, null, !9, !11}
!5 = !{!6, !8}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{!10}
!10 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!11 = !{!12}
!12 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!13 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!14 = !{void ()* @PSNormalPixelLightingTxNoFogSpec, !"PSNormalPixelLightingTxNoFogSpec", !15, !4, null}
!15 = !{!16, !27, null}
!16 = !{!17, !20, !23, !25}
!17 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !18, i8 2, i32 1, i8 2, i32 0, i8 0, !19}
!18 = !{i32 0}
!19 = !{i32 3, i32 3}
!20 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!21 = !{i32 1}
!22 = !{i32 3, i32 7}
!23 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 3, i32 2, i8 0, !22}
!24 = !{i32 2}
!25 = !{i32 3, !"COLOR", i8 9, i8 0, !18, i8 2, i32 1, i8 4, i32 3, i8 0, !26}
!26 = !{i32 3, i32 15}
!27 = !{!28}
!28 = !{i32 0, !"SV_Target", i8 9, i8 16, !18, i8 0, i32 1, i8 4, i32 0, i8 0, !26}

#endif

const unsigned char NormalMapEffect_PSNormalPixelLightingTxNoFogSpec[] = {
  0x44, 0x58, 0x42, 0x43, 0xb2, 0xe0, 0x03, 0x22, 0x28, 0x9b, 0xc3, 0x35,
  0x1d, 0xa8, 0x4b, 0x1f, 0xa8, 0x6f, 0x12, 0x07, 0x01, 0x00, 0x00, 0x00,
  0xdf, 0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x3b, 0x01, 0x00, 0x00,
  0xab, 0x02, 0x00, 0x00, 0x7f, 0x03, 0x00, 0x00, 0xcb, 0x03, 0x00, 0x00,
  0xe7, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x32, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67,
  0x65, 0x74, 0x00, 0x50, 0x53, 0x56, 0x30, 0x68, 0x01, 0x00, 0x00, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x52,
  0x54, 0x53, 0x30, 0xcc, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc,
  0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01,
  0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e, 0x44,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x61,
  0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x4e, 0x6f,
  0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67,
  0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x4e, 0x6f, 0x46, 0x6f, 0x67,
  0x53, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x48,
  0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
  0xfe, 0x08, 0x7f, 0xf2, 0xff, 0xec, 0x7f, 0x57, 0x79, 0x00, 0xaa, 0x6e,
  0x12, 0x4e, 0xe4, 0x44, 0x58, 0x49, 0x4c, 0xf0, 0x10, 0x00, 0x00, 0x60,
  0x00, 0x00, 0x00, 0x3c, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00,
  0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xd8, 0x10, 0x00, 0x00, 0x42,
  0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x33, 0x04, 0x00, 0x00, 0x0b,
  0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07,
  0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92,
  0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80,
  0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38,
  0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43,
  0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11,
  0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04,
  0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b,
  0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84,
  0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff,
  0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x32,
  0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04,
  0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b,
  0x84, 0xc4, 0x4c, 0x10, 0xbc, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66,
  0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44,
  0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xe4, 0xa6, 0xe1,
  0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25, 0xa4, 0x95, 0x98, 0xfc, 0xe2,
  0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50, 0x71, 0xcf, 0x70, 0xf9, 0x13,
  0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x28, 0x58, 0x0a, 0xa3,
  0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10, 0xc4, 0x40, 0x4d, 0x41, 0x06,
  0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29, 0xc3, 0x40, 0x0c, 0x14, 0x15,
  0x63, 0x20, 0x86, 0x61, 0x18, 0x68, 0x2a, 0xc4, 0x40, 0x0c, 0x03, 0x55,
  0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b,
  0x31, 0xf9, 0xc5, 0x6d, 0x23, 0x62, 0x18, 0x86, 0xa1, 0x10, 0x17, 0xc1,
  0x10, 0x84, 0x95, 0x62, 0x20, 0x86, 0x61, 0x20, 0x6d, 0x8e, 0x20, 0x28,
  0x06, 0x43, 0x14, 0x04, 0xc1, 0x51, 0x37, 0x10, 0x30, 0x8c, 0x40, 0x0c,
  0x33, 0xb5, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01,
  0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01,
  0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03,
  0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x01,
  0x1d, 0xf8, 0x01, 0x18, 0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4, 0x03,
  0x3c, 0xcc, 0xc3, 0x2f, 0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0, 0x80,
  0x98, 0x49, 0x0c, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d,
  0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e,
  0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41, 0x1e,
  0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c,
  0xe8, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90, 0x00, 0x86, 0x24, 0x0e, 0x23,
  0x0c, 0xc3, 0x4c, 0x6d, 0x30, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f,
  0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e,
  0x72, 0x40, 0x0a, 0x7c, 0x60, 0x0f, 0xe5, 0x30, 0x0e, 0xf4, 0xf0, 0x0e,
  0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xc0, 0x06,
  0x60, 0x30, 0x07, 0x7e, 0x00, 0x06, 0x7e, 0xa0, 0x07, 0x7a, 0xd0, 0x0e,
  0xe9, 0x00, 0x0f, 0xf3, 0xf0, 0x0b, 0xf4, 0x90, 0x0f, 0xf0, 0x50, 0x0e,
  0x28, 0x20, 0x66, 0x12, 0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79,
  0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72,
  0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77,
  0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36,
  0x00, 0x83, 0x39, 0xf0, 0x03, 0x30, 0xf0, 0x03, 0x24, 0x90, 0x25, 0x99,
  0x39, 0x40, 0x26, 0x01, 0x78, 0xd5, 0xe1, 0x48, 0xd3, 0x02, 0x60, 0x0e,
  0x35, 0xf9, 0x29, 0x10, 0x01, 0x0c, 0x31, 0x11, 0x91, 0x84, 0x1a, 0x90,
  0x24, 0x07, 0x14, 0x45, 0x49, 0x12, 0x4c, 0xd1, 0x94, 0xd4, 0x9b, 0xa4,
  0x29, 0xa2, 0x84, 0xc9, 0x67, 0x01, 0xe6, 0x59, 0x88, 0x88, 0x9d, 0x80,
  0x89, 0x40, 0x01, 0x41, 0x6c, 0x4a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x13,
  0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68,
  0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a,
  0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71,
  0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d,
  0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x34, 0x40,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x79,
  0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8,
  0x13, 0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x90, 0x67, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x21, 0x4f, 0x05, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x43, 0x1e, 0x0c, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x86, 0x3c, 0x1a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x3a, 0x20, 0x00, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x00, 0x00, 0x00, 0x13,
  0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c,
  0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x18,
  0x8a, 0xa0, 0x24, 0x0a, 0xd8, 0xa0, 0x0c, 0xca, 0xa1, 0x3c, 0xa8, 0x28,
  0x89, 0x11, 0x80, 0x22, 0x28, 0x84, 0x32, 0x28, 0x10, 0x1a, 0x67, 0x00,
  0xe8, 0x9c, 0x01, 0xa0, 0x75, 0x06, 0x80, 0xda, 0x19, 0x00, 0x72, 0xc7,
  0x92, 0x20, 0xe2, 0x79, 0x00, 0xe0, 0x38, 0x0e, 0xe0, 0x38, 0x0e, 0x20,
  0x10, 0x88, 0x07, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x7b,
  0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35,
  0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b,
  0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b,
  0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79,
  0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x62,
  0x99, 0x20, 0x10, 0xcc, 0x06, 0x61, 0x20, 0x26, 0x08, 0x44, 0xb3, 0x41,
  0x18, 0x0c, 0x0a, 0x70, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0x63,
  0xa0, 0x11, 0x98, 0x20, 0x10, 0xce, 0x04, 0x81, 0x78, 0x36, 0x08, 0x44,
  0xb3, 0x21, 0x21, 0x94, 0x85, 0x20, 0x06, 0x86, 0x70, 0x26, 0x08, 0x67,
  0xb0, 0x6d, 0x48, 0x06, 0x68, 0x21, 0x86, 0x81, 0x21, 0x9c, 0x0d, 0xc2,
  0x13, 0x4d, 0x10, 0xd6, 0x80, 0x9b, 0x20, 0x10, 0xd0, 0x06, 0x84, 0x98,
  0x16, 0x82, 0x18, 0x28, 0x60, 0x43, 0x50, 0x4d, 0x10, 0xda, 0xa0, 0xdb,
  0x80, 0x10, 0xd7, 0x42, 0x10, 0x03, 0x01, 0x6c, 0x08, 0xb0, 0x0d, 0x84,
  0x04, 0x58, 0xd9, 0x04, 0xc1, 0x0d, 0xbc, 0x0d, 0xc1, 0x36, 0x41, 0x10,
  0x00, 0x82, 0x01, 0xd4, 0x94, 0xd3, 0x9b, 0x5c, 0x5b, 0x18, 0x1b, 0x54,
  0x1a, 0x5e, 0x19, 0x1b, 0x53, 0xda, 0x19, 0x1a, 0x5d, 0x9a, 0xdb, 0x19,
  0x15, 0x9e, 0xd3, 0x9b, 0xd1, 0xdb, 0xd9, 0x14, 0x5c, 0xd9, 0x18, 0x11,
  0xaa, 0x22, 0xac, 0xa1, 0xa7, 0x27, 0x29, 0xa2, 0x09, 0x42, 0x41, 0x4d,
  0x10, 0x8a, 0x6a, 0x43, 0x40, 0x4c, 0x10, 0x0a, 0x6b, 0x82, 0x40, 0x44,
  0x1b, 0x04, 0x32, 0x20, 0x83, 0x0d, 0x0b, 0xf1, 0x81, 0x41, 0x18, 0x88,
  0xc1, 0x18, 0x0c, 0x63, 0x40, 0x84, 0x41, 0x19, 0x6c, 0x08, 0x86, 0x09,
  0x42, 0x71, 0x4d, 0x10, 0x08, 0x69, 0x83, 0x40, 0x06, 0x69, 0xb0, 0x61,
  0x19, 0x3e, 0x30, 0x08, 0x83, 0x33, 0x18, 0x83, 0x01, 0x0d, 0x86, 0x30,
  0x50, 0x83, 0x0d, 0x01, 0x33, 0x41, 0x28, 0xb0, 0x0d, 0x0b, 0xf3, 0x81,
  0x41, 0x18, 0xb0, 0xc1, 0x18, 0x0c, 0x6d, 0xc0, 0x84, 0x81, 0x1a, 0xb0,
  0x18, 0x7a, 0x62, 0x7a, 0x92, 0x9a, 0x20, 0x10, 0xd3, 0x06, 0x81, 0x0c,
  0xe0, 0x60, 0xc3, 0x42, 0x06, 0x6f, 0x00, 0x06, 0x61, 0x20, 0x06, 0x63,
  0x30, 0xa0, 0x01, 0x19, 0x84, 0x41, 0x1c, 0x6c, 0x20, 0xcc, 0x60, 0x0d,
  0xdc, 0x40, 0x0e, 0x98, 0x4c, 0x59, 0x7d, 0x51, 0x85, 0xc9, 0x9d, 0x95,
  0xd1, 0x4d, 0x10, 0x8a, 0x6c, 0xc3, 0x42, 0xd0, 0x01, 0x18, 0xd4, 0x81,
  0x18, 0x84, 0xc1, 0x80, 0x06, 0x44, 0x18, 0xc4, 0xc1, 0x86, 0xc0, 0x0e,
  0x36, 0x0c, 0x73, 0x70, 0x07, 0xc0, 0x86, 0xa2, 0xf3, 0xf0, 0x40, 0x03,
  0xaa, 0xb0, 0xb1, 0xd9, 0xb5, 0xb9, 0xa4, 0x91, 0x95, 0xb9, 0xd1, 0x4d,
  0x09, 0x82, 0x2a, 0x64, 0x78, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
  0x6e, 0x53, 0x02, 0xa2, 0x09, 0x19, 0x9e, 0x8b, 0x5d, 0x18, 0x9b, 0x5d,
  0x99, 0xdc, 0x94, 0xc0, 0xa8, 0x43, 0x86, 0xe7, 0x32, 0x87, 0x16, 0x46,
  0x56, 0x26, 0xd7, 0xf4, 0x46, 0x56, 0xc6, 0x36, 0x25, 0x40, 0xca, 0x90,
  0xe1, 0xb9, 0xc8, 0x95, 0xcd, 0xbd, 0xd5, 0xc9, 0x8d, 0x95, 0xcd, 0x4d,
  0x09, 0xb2, 0x3a, 0x64, 0x78, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64,
  0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x82, 0xad, 0x0e, 0x19, 0x9e, 0x4b,
  0x99, 0x1b, 0x9d, 0x5c, 0x1e, 0xd4, 0x5b, 0x9a, 0x1b, 0xdd, 0xdc, 0x94,
  0x00, 0x0f, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33,
  0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98,
  0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33,
  0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05,
  0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43,
  0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08,
  0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78,
  0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1,
  0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33,
  0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e,
  0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03,
  0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60,
  0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80,
  0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8,
  0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18,
  0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee,
  0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c,
  0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c,
  0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43,
  0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3,
  0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83,
  0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21,
  0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca,
  0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef,
  0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c,
  0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f,
  0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x2e,
  0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x29, 0x7b, 0x3a, 0x11, 0x03, 0x2c,
  0x29, 0x72, 0x11, 0x4b, 0x89, 0x18, 0xc7, 0x84, 0x34, 0x46, 0x7b, 0x9d,
  0xce, 0xe7, 0x18, 0xec, 0x43, 0x08, 0x76, 0x00, 0x0d, 0x97, 0xef, 0x3c,
  0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0xc2, 0x36, 0x5c,
  0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0x94,
  0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6, 0x29, 0x48, 0xc3, 0xe5, 0x3b,
  0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x06,
  0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x64, 0xfb, 0xc5, 0x6d, 0x1b,
  0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xdd, 0x7e, 0x71, 0xdb,
  0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c,
  0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x03, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x4b,
  0x00, 0xf3, 0x2c, 0x84, 0x5f, 0xdc, 0xb6, 0x09, 0x54, 0xc3, 0xe5, 0x3b,
  0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4, 0xf4, 0x50, 0x93, 0x5f, 0xdc,
  0xb6, 0x25, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd1, 0x84, 0x00,
  0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x05, 0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x53,
  0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x00, 0x61, 0x20, 0x00, 0x00, 0x30,
  0x02, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x13,
  0x00, 0x00, 0x00, 0xc4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94, 0x45,
  0x41, 0x14, 0x45, 0xc1, 0x14, 0xd7, 0x0c, 0x40, 0x21, 0x94, 0x5d, 0xb9,
  0x95, 0x4c, 0x99, 0x06, 0x14, 0x6a, 0x40, 0x29, 0x94, 0x5c, 0x19, 0x95,
  0x4b, 0xa9, 0x14, 0x5e, 0x61, 0x14, 0x1b, 0x0d, 0x63, 0x04, 0x20, 0x08,
  0x82, 0xf8, 0x2f, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0x60, 0x30, 0x46,
  0x00, 0x82, 0x20, 0x88, 0x7f, 0x33, 0x00, 0x23, 0x00, 0x63, 0x04, 0x20,
  0x08, 0x82, 0x20, 0x28, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0xd0, 0xc5, 0x41, 0x63, 0x06, 0x70, 0x00, 0x07, 0xdc, 0x88, 0x41,
  0x02, 0x80, 0x20, 0x18, 0x74, 0x72, 0xe0, 0x9c, 0x01, 0x1c, 0xc0, 0x41,
  0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xdd, 0x1c, 0x3c, 0x65, 0x10,
  0x07, 0x71, 0xe0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x41, 0x47, 0x07,
  0x10, 0x1a, 0xc8, 0x81, 0x1c, 0x7c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x60, 0xf8, 0x01, 0xe6, 0x06, 0x73, 0xa0, 0x06, 0xd9, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0x7f, 0x90, 0xbd, 0x01, 0x1d, 0x80, 0x81, 0x36,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x28, 0x68, 0x70, 0x50, 0x07,
  0x6b, 0xb0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x11, 0x0a, 0x5b,
  0x1c, 0xd8, 0x81, 0x1a, 0x70, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60,
  0x88, 0x02, 0x57, 0x07, 0x77, 0xe0, 0x06, 0xdd, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x18, 0xa3, 0xd0, 0xd9, 0x01, 0x1e, 0x90, 0x81, 0x37, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x29, 0x78, 0x77, 0x90, 0x07, 0x6f,
  0xf0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x51, 0x0a, 0xdf, 0x1e,
  0xe8, 0x41, 0x1c, 0x80, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0xa6, 0x00, 0x06, 0x7c, 0xb0, 0x07, 0x67, 0x10, 0x06, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0x9c, 0x42, 0x18, 0xf4, 0x01, 0x1f, 0xc8, 0x81,
  0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x81, 0x0a, 0x62, 0xd0,
  0x07, 0x7d, 0x40, 0x07, 0x63, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x46, 0x2a, 0x8c, 0x81, 0x1f, 0xf8, 0x81, 0x1a, 0x90, 0xc1, 0x88, 0xc1,
  0x03, 0x80, 0x20, 0x18, 0x34, 0xa8, 0x90, 0x3d, 0x8e, 0x10, 0x4c, 0xd3,
  0x1f, 0xfc, 0x41, 0x19, 0x4c, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x46, 0x44, 0xf2, 0x31, 0x22,
  0x92, 0x8f, 0x11, 0x91, 0x7c, 0x8c, 0x88, 0xe4, 0x33, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x18, 0x2b, 0xb0, 0x81, 0x15, 0x06, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0x83, 0x14, 0x1f, 0x1b,
  0xa4, 0xf8, 0xd8, 0x20, 0xc5, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c,
  0x9e, 0x5b, 0x90, 0x83, 0x41, 0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00,
  0x10, 0x04, 0x83, 0xe8, 0x16, 0xe4, 0x20, 0xb0, 0x22, 0x90, 0x8f, 0x15,
  0x82, 0x7c, 0xac, 0x18, 0xe4, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06,
  0x0f, 0x2f, 0xdc, 0x41, 0xc7, 0x6d, 0x1d, 0xb7, 0x8d, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x41, 0xc4, 0x0b, 0x77, 0x10, 0x58, 0xf0, 0xc9, 0xc7, 0x84,
  0x4f, 0x3e, 0x36, 0x7c, 0xf2, 0x19, 0x31, 0x78, 0x00, 0x10, 0x04, 0x83,
  0x46, 0x1c, 0xe6, 0x40, 0x0d, 0xd0, 0x80, 0xdb, 0xda, 0xa0, 0x0d, 0x72,
  0x21, 0x17, 0xfe, 0xa0, 0x0d, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08,
  0x4c, 0x90, 0x03, 0xf9, 0x98, 0x30, 0x07, 0xf2, 0x31, 0xa1, 0x0e, 0xe0,
  0x63, 0x82, 0x1d, 0xc0, 0x67, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x26,
  0x73, 0xc0, 0x03, 0x21, 0x10, 0x02, 0xb3, 0x83, 0x20, 0x3e, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0x10, 0xa5, 0x83, 0x2a, 0x04, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0x10, 0xa9, 0x03, 0x29, 0xa4, 0xc1, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0x44, 0xeb, 0x50, 0x0a, 0x69, 0x30, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x11, 0x3b, 0x98, 0x42, 0x1a, 0x8c, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x41, 0xd4, 0x0e, 0xa6, 0xc0, 0x06, 0x23, 0x06, 0x06, 0x00,
  0x82, 0x60, 0x10, 0xb9, 0xc3, 0x29, 0xb0, 0xc1, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x44, 0xef, 0x80, 0x0a, 0x6c, 0x30, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0x11, 0x3c, 0xa8, 0x02, 0x1b, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0x41, 0x14, 0x0f, 0xab, 0xc0, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0x10, 0xc9, 0xc3, 0x2a, 0xb8, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x44, 0xf3, 0xc0, 0x0a, 0x6e, 0x60, 0x45, 0x22, 0x1f, 0x3b, 0x12,
  0xf9, 0x98, 0x10, 0xc4, 0xc7, 0x94, 0x45, 0x3e, 0x96, 0x38, 0xf2, 0x31,
  0x21, 0x88, 0x8f, 0x31, 0x90, 0x7c, 0xcc, 0x81, 0xe4, 0x63, 0x42, 0x10,
  0x1f, 0x0b, 0x1e, 0xf9, 0x58, 0xf1, 0xc8, 0xc7, 0x84, 0x20, 0x3e, 0xa6,
  0x44, 0xf2, 0xb1, 0x82, 0x92, 0x8f, 0x09, 0x41, 0x7c, 0x4c, 0xb1, 0xe4,
  0x63, 0x8e, 0x25, 0x1f, 0x13, 0x82, 0xf8, 0x58, 0xa3, 0xc9, 0xc7, 0x16,
  0x4e, 0x3e, 0x26, 0x04, 0xf1, 0xb1, 0xe6, 0x93, 0x8f, 0x51, 0x9e, 0x7c,
  0x4c, 0x08, 0xe2, 0x63, 0x56, 0x18, 0xc8, 0xc7, 0xa8, 0x31, 0x90, 0x8f,
  0x09, 0x41, 0x7c, 0x0c, 0xfa, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x1a, 0x4b, 0xc0, 0x83, 0x87, 0x04, 0xf6, 0x84, 0x81, 0x7c, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0x73, 0x09, 0x79, 0x00, 0x83, 0x23,
  0x30, 0x67, 0x0c, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1a,
  0x4c, 0xd0, 0x83, 0x18, 0x18, 0xc1, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18,
  0x3c, 0x36, 0x11, 0x0f, 0xc5, 0x10, 0x14, 0x43, 0x30, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x91, 0x4d, 0xc4, 0x43, 0x60, 0x98, 0x19, 0xc8, 0x67,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x34, 0x9a, 0xc0, 0x87, 0x32, 0x80,
  0x02, 0xbb, 0xd0, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0,
  0xd9, 0x84, 0x3e, 0x9c, 0xc1, 0x13, 0x98, 0xa5, 0x06, 0xf2, 0x19, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x03, 0x0d, 0x27, 0xf8, 0x21, 0x0d, 0x9c, 0x60,
  0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x1e, 0x9f, 0xc8, 0x87, 0x62, 0x08,
  0x8a, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xc8, 0x27, 0xf2,
  0x21, 0xb0, 0xe0, 0x90, 0x8f, 0x09, 0x86, 0x7c, 0x6c, 0x28, 0xe4, 0x63,
  0x52, 0x1f, 0xc8, 0xc7, 0x82, 0x46, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0xa0, 0x81, 0x05, 0x49, 0xf8, 0x41, 0x11, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x81, 0x16, 0x16, 0x25, 0xc1, 0x07, 0xa8, 0x10, 0x18, 0x15,
  0x0a, 0xf2, 0xb1, 0x20, 0x92, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x68, 0x64, 0x81, 0x12, 0xa2, 0x80, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0xa0, 0x95, 0x45, 0x4a, 0x80, 0xc2, 0x2a, 0x04, 0x66, 0x95, 0x82,
  0x7c, 0x2c, 0xa8, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1a,
  0x5a, 0xb0, 0x84, 0x29, 0x2c, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x68, 0x69, 0xd1, 0x12, 0xa4, 0xe0, 0x0a, 0xc1, 0x88, 0xc1, 0x02, 0x80,
  0x20, 0x18, 0x3c, 0x6f, 0xa1, 0x12, 0x49, 0x11, 0x24, 0x45, 0x30, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0xd1, 0x5b, 0xa8, 0x44, 0x60, 0xc1, 0x22,
  0x1f, 0x13, 0x10, 0xf9, 0xd8, 0x50, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0x30, 0xb8, 0x80, 0x09, 0x7d, 0x38, 0x8b, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x03, 0x8c, 0x2e, 0x68, 0xc2, 0x1f, 0xde, 0x62, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04,
  0xc1, 0x00, 0xc3, 0x0b, 0x9c, 0x10, 0x89, 0xb8, 0x18, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x3b, 0x87, 0x25, 0x3e, 0x76,
  0x0e, 0x4b, 0x7c, 0xec, 0x1c, 0x96, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08,
  0x82, 0xc1, 0x33, 0x1a, 0x3e, 0x31, 0x08, 0xc1, 0x20, 0x04, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0x10, 0x8d, 0x86, 0x4f, 0x04, 0x16, 0x10, 0xf2,
  0x31, 0x81, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x60, 0xa3,
  0x31, 0x16, 0x2d, 0x41, 0x16, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd8, 0x69,
  0x9c, 0x45, 0x4c, 0xf4, 0xc5, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0xb6, 0x1a,
  0x6b, 0x51, 0x13, 0x70, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0xa6, 0x0f, 0x4b, 0x7c, 0x4c, 0x1f, 0x96, 0xf8, 0x98,
  0x3e, 0x2c, 0xf1, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83, 0xc7, 0x36,
  0xe2, 0x62, 0x10, 0x82, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1,
  0x20, 0xb2, 0x8d, 0xb8, 0x08, 0x2c, 0x20, 0xe4, 0x63, 0x02, 0x21, 0x9f,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xc0, 0x6c, 0xc3, 0x2e, 0xc0, 0x22,
  0x2e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x30, 0xdd, 0xd0, 0x0b, 0xb2, 0x00,
  0x8d, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xcc, 0x37, 0xfc, 0x02, 0x2d, 0x4a,
  0x63, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0xac,
  0x25, 0x96, 0xf8, 0x58, 0x4b, 0x2c, 0xf1, 0xb1, 0x96, 0x58, 0xe2, 0x33,
  0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x4f, 0x7a, 0x90, 0xc6, 0x20, 0x04,
  0x83, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0x94, 0x1e, 0xa4,
  0x11, 0x58, 0x40, 0xc8, 0xc7, 0x04, 0x42, 0x3e, 0x76, 0x17, 0x77, 0x10,
  0x1f, 0xc3, 0x8b, 0x3b, 0x88, 0x8f, 0xe5, 0x85, 0x19, 0xc4, 0xc7, 0xf4,
  0xc2, 0x0c, 0xe2, 0x63, 0x7b, 0x51, 0xc5, 0xc7, 0xf8, 0xa2, 0x8a, 0x8f,
  0x89, 0x82, 0x1f, 0xc8, 0xc7, 0xfc, 0x22, 0x88, 0xcf, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x68, 0xf0, 0x41, 0x1b, 0xc8, 0x28, 0x04, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0xa0, 0xc5, 0x47, 0x6d, 0x20, 0xa3, 0x10, 0x98,
  0x29, 0xbc, 0x81, 0x7c, 0x4c, 0x34, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x81, 0x46, 0x1f, 0xb8, 0xa1, 0x9c, 0x42, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x5a, 0x7d, 0xe4, 0x86, 0x72, 0x0a, 0x81, 0xa9,
  0x02, 0x18, 0xc8, 0xc7, 0x4c, 0x23, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x68, 0xf8, 0xc1, 0x1b, 0xcc, 0x2a, 0x04, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0xa0, 0xe5, 0x47, 0x6f, 0x30, 0xab, 0x10, 0xd8, 0x1f,
  0xb8, 0x82, 0x7c, 0x2c, 0xe0, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x81, 0xc6, 0x1f, 0xe0, 0xc1, 0x07, 0xaf, 0x10, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x81, 0xd6, 0x1f, 0xe1, 0xc1, 0x07, 0xaf, 0x10, 0x18,
  0x1c, 0xc8, 0x82, 0x7c, 0x2c, 0x68, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x81, 0x06, 0x22, 0xe4, 0xd1, 0x06, 0xb3, 0x10, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x81, 0x16, 0x22, 0xe5, 0xd1, 0x06, 0xb3, 0x10,
  0x58, 0x18, 0xd8, 0x82, 0x7c, 0x2c, 0xf0, 0xe4, 0x33, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x1a, 0x89, 0xa0, 0x87, 0x77, 0x0b, 0xc1, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x68, 0x25, 0x92, 0x1e, 0xde, 0x2d, 0x04, 0xc3,
  0x11, 0x95, 0x6d, 0x10, 0xdf, 0x70, 0x84, 0x74, 0x1b, 0xc4, 0x37, 0x1c,
  0xf1, 0xe0, 0x06, 0xf1, 0x4d, 0x37, 0xe4, 0xc6, 0x6e, 0x0c, 0xd3, 0x0d,
  0xba, 0xc1, 0x1b, 0xc3, 0x74, 0xc3, 0x6e, 0xf4, 0xc6, 0x60, 0xc3, 0x26,
  0x1f, 0x1b, 0x30, 0xf9, 0xd8, 0x50, 0xc9, 0x67, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0x30, 0x18, 0x81, 0x0f, 0xdd, 0x50, 0x91, 0xd1, 0x84, 0x60,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x6a, 0x46, 0xd6, 0x83, 0x0a,
  0x8f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0x68, 0x84, 0x3d, 0x22,
  0xf1, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xaa, 0x46, 0xda, 0xc3,
  0x19, 0x0f, 0x1b, 0x16, 0xf9, 0xd8, 0xb0, 0xc8, 0xc7, 0x86, 0x45, 0x3e,
  0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xed, 0x08, 0x7c, 0x0c, 0x23,
  0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xf1, 0x48, 0x7c, 0x0c, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0x10, 0xf5, 0x88, 0x7c, 0x0c, 0x36, 0x28, 0xf2,
  0xb1, 0x61, 0x91, 0x8f, 0x0d, 0x8c, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04,
  0xc1, 0x20, 0x0a, 0x93, 0xfa, 0x18, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1,
  0x20, 0x12, 0x13, 0xfb, 0x18, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20,
  0x1a, 0x93, 0xfb, 0x18, 0x6c, 0x78, 0x03, 0xf9, 0xd8, 0xc0, 0x06, 0xf2,
  0xb1, 0x21, 0x0d, 0xe4, 0x63, 0xd7, 0x3b, 0xc8, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x34, 0x32, 0x41, 0x91, 0xab, 0x17, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xd0, 0xca, 0x24, 0x45, 0xae, 0x55, 0x08, 0x4c,
  0x8b, 0x07, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x76, 0x26,
  0x2b, 0xa2, 0xfd, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1a,
  0x9a, 0xb0, 0x88, 0xd6, 0x0a, 0x81, 0x75, 0xf3, 0x20, 0x9f, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xd0, 0xd4, 0xc4, 0x45, 0xba, 0x70, 0x08, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0x5b, 0x93, 0x17, 0xe9, 0x5e, 0x21,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xac, 0x4d, 0x5a, 0xe4, 0x3e,
  0xd2, 0x64, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x6c, 0x58, 0xe4, 0x63, 0x43, 0x22, 0x1f, 0x1b, 0x0e, 0xf9, 0x8c, 0x18,
  0x1c, 0x00, 0x08, 0x82, 0x01, 0x46, 0x27, 0x34, 0xe2, 0x1f, 0x71, 0x32,
  0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x76, 0x0c,
  0xf0, 0xb1, 0x63, 0x80, 0x8f, 0x1d, 0x03, 0x7c, 0x4c, 0x13, 0x09, 0xf9,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xb6, 0x27, 0x3f, 0xa2, 0xc1,
  0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1a, 0x9f, 0x80, 0x89,
  0xe6, 0x0b, 0x81, 0x75, 0x24, 0x21, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xd0, 0xfc, 0x44, 0x4c, 0x3a, 0x79, 0x08, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0x40, 0xfb, 0x93, 0x31, 0xe9, 0xc0, 0x21, 0x30, 0x30, 0x30,
  0x09, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x16, 0x2a, 0x65,
  0x02, 0x06, 0xf4, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x26,
  0x2a, 0x66, 0x02, 0x06, 0xe2, 0x10, 0x8c, 0x26, 0xd0, 0x01, 0x30, 0x9a,
  0x50, 0x07, 0xc1, 0x68, 0x82, 0x1d, 0x08, 0xf6, 0x1f, 0x8f, 0x7c, 0xec,
  0x3f, 0x1e, 0xf9, 0xd8, 0x7f, 0x3c, 0xf2, 0xb1, 0xe6, 0x3f, 0xe4, 0x63,
  0xc1, 0x21, 0x1f, 0x63, 0x42, 0x44, 0x3e, 0x16, 0x20, 0xf2, 0xb1, 0x65,
  0x44, 0xe4, 0x63, 0x41, 0x22, 0x1f, 0x2b, 0x12, 0xf8, 0x18, 0x91, 0xc0,
  0xc7, 0x86, 0x04, 0x3e, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xe4,
  0x8a, 0x9b, 0xbc, 0xca, 0xab, 0x98, 0xca, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x48, 0xae, 0xb8, 0xc9, 0xab, 0xbc, 0xca, 0x9e, 0x08, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xe4, 0x8a, 0x9b, 0xbc, 0xca, 0xab,
  0x94, 0x4a, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x48, 0xae, 0xb8,
  0xc9, 0xab, 0xbc, 0xca, 0xa8, 0xa0, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00
};
