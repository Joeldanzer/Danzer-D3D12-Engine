#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; TEXCOORD                 1   xyz         3     NONE   float   xyz 
; SV_Position              0   xyzw        4      POS   float   xyzw
;
; shader debug name: Compiled\EnvironmentMapEffect_VSEnvMapFresnelBn.pdb
; shader hash: d601c973370e52f52cf3a3cb84b8de7d
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [384 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 10, outputs: 20
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6 }
;   output 1 depends on inputs: { 4, 5, 6 }
;   output 2 depends on inputs: { 4, 5, 6 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 13 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 14 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 16 depends on inputs: { 0, 1, 2, 3 }
;   output 17 depends on inputs: { 0, 1, 2, 3 }
;   output 18 depends on inputs: { 0, 1, 2, 3 }
;   output 19 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <3 x float>, float, float, <4 x float>, <3 x float>, [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSEnvMapFresnelBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = fmul fast float %4, 2.000000e+00
  %12 = fmul fast float %5, 2.000000e+00
  %13 = fmul fast float %6, 2.000000e+00
  %14 = fadd fast float %11, -1.000000e+00
  %15 = fadd fast float %12, -1.000000e+00
  %16 = fadd fast float %13, -1.000000e+00
  %17 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.f32 %17, 0
  %19 = extractvalue %dx.types.CBufRet.f32 %17, 1
  %20 = extractvalue %dx.types.CBufRet.f32 %17, 2
  %21 = extractvalue %dx.types.CBufRet.f32 %17, 3
  %22 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.f32 %22, 0
  %24 = extractvalue %dx.types.CBufRet.f32 %22, 1
  %25 = extractvalue %dx.types.CBufRet.f32 %22, 2
  %26 = extractvalue %dx.types.CBufRet.f32 %22, 3
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = fmul fast float %18, %7
  %33 = call float @dx.op.tertiary.f32(i32 46, float %8, float %19, float %32)  ; FMad(a,b,c)
  %34 = call float @dx.op.tertiary.f32(i32 46, float %9, float %20, float %33)  ; FMad(a,b,c)
  %35 = call float @dx.op.tertiary.f32(i32 46, float %10, float %21, float %34)  ; FMad(a,b,c)
  %36 = fmul fast float %23, %7
  %37 = call float @dx.op.tertiary.f32(i32 46, float %8, float %24, float %36)  ; FMad(a,b,c)
  %38 = call float @dx.op.tertiary.f32(i32 46, float %9, float %25, float %37)  ; FMad(a,b,c)
  %39 = call float @dx.op.tertiary.f32(i32 46, float %10, float %26, float %38)  ; FMad(a,b,c)
  %40 = fmul fast float %28, %7
  %41 = call float @dx.op.tertiary.f32(i32 46, float %8, float %29, float %40)  ; FMad(a,b,c)
  %42 = call float @dx.op.tertiary.f32(i32 46, float %9, float %30, float %41)  ; FMad(a,b,c)
  %43 = call float @dx.op.tertiary.f32(i32 46, float %10, float %31, float %42)  ; FMad(a,b,c)
  %44 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.f32 %44, 0
  %46 = extractvalue %dx.types.CBufRet.f32 %44, 1
  %47 = extractvalue %dx.types.CBufRet.f32 %44, 2
  %48 = fsub fast float %45, %35
  %49 = fsub fast float %46, %39
  %50 = fsub fast float %47, %43
  %51 = call float @dx.op.dot3.f32(i32 55, float %48, float %49, float %50, float %48, float %49, float %50)  ; Dot3(ax,ay,az,bx,by,bz)
  %52 = call float @dx.op.unary.f32(i32 25, float %51)  ; Rsqrt(value)
  %53 = fmul fast float %48, %52
  %54 = fmul fast float %49, %52
  %55 = fmul fast float %50, %52
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %68 = fmul fast float %57, %14
  %69 = call float @dx.op.tertiary.f32(i32 46, float %15, float %58, float %68)  ; FMad(a,b,c)
  %70 = call float @dx.op.tertiary.f32(i32 46, float %16, float %59, float %69)  ; FMad(a,b,c)
  %71 = fmul fast float %61, %14
  %72 = call float @dx.op.tertiary.f32(i32 46, float %15, float %62, float %71)  ; FMad(a,b,c)
  %73 = call float @dx.op.tertiary.f32(i32 46, float %16, float %63, float %72)  ; FMad(a,b,c)
  %74 = fmul fast float %65, %14
  %75 = call float @dx.op.tertiary.f32(i32 46, float %15, float %66, float %74)  ; FMad(a,b,c)
  %76 = call float @dx.op.tertiary.f32(i32 46, float %16, float %67, float %75)  ; FMad(a,b,c)
  %77 = call float @dx.op.dot3.f32(i32 55, float %70, float %73, float %76, float %70, float %73, float %76)  ; Dot3(ax,ay,az,bx,by,bz)
  %78 = call float @dx.op.unary.f32(i32 25, float %77)  ; Rsqrt(value)
  %79 = fmul fast float %78, %70
  %80 = fmul fast float %78, %73
  %81 = fmul fast float %78, %76
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %90 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.f32 %90, 0
  %92 = extractvalue %dx.types.CBufRet.f32 %90, 1
  %93 = extractvalue %dx.types.CBufRet.f32 %90, 2
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %96 = extractvalue %dx.types.CBufRet.f32 %94, 1
  %97 = extractvalue %dx.types.CBufRet.f32 %94, 2
  %98 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %99 = extractvalue %dx.types.CBufRet.f32 %98, 0
  %100 = extractvalue %dx.types.CBufRet.f32 %98, 1
  %101 = extractvalue %dx.types.CBufRet.f32 %98, 2
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %106 = fsub fast float -0.000000e+00, %84
  %107 = fsub fast float -0.000000e+00, %85
  %108 = fsub fast float -0.000000e+00, %92
  %109 = fsub fast float -0.000000e+00, %93
  %110 = fsub fast float -0.000000e+00, %100
  %111 = fsub fast float -0.000000e+00, %101
  %112 = fmul fast float %79, %83
  %113 = fsub fast float -0.000000e+00, %112
  %114 = call float @dx.op.tertiary.f32(i32 46, float %106, float %80, float %113)  ; FMad(a,b,c)
  %115 = call float @dx.op.tertiary.f32(i32 46, float %107, float %81, float %114)  ; FMad(a,b,c)
  %116 = fmul fast float %79, %91
  %117 = fsub fast float -0.000000e+00, %116
  %118 = call float @dx.op.tertiary.f32(i32 46, float %108, float %80, float %117)  ; FMad(a,b,c)
  %119 = call float @dx.op.tertiary.f32(i32 46, float %109, float %81, float %118)  ; FMad(a,b,c)
  %120 = fmul fast float %79, %99
  %121 = fsub fast float -0.000000e+00, %120
  %122 = call float @dx.op.tertiary.f32(i32 46, float %110, float %80, float %121)  ; FMad(a,b,c)
  %123 = call float @dx.op.tertiary.f32(i32 46, float %111, float %81, float %122)  ; FMad(a,b,c)
  %124 = fcmp fast olt float %115, 0.000000e+00
  %125 = fcmp fast olt float %119, 0.000000e+00
  %126 = fcmp fast olt float %123, 0.000000e+00
  %127 = select i1 %124, float 0.000000e+00, float 1.000000e+00
  %128 = select i1 %125, float 0.000000e+00, float 1.000000e+00
  %129 = select i1 %126, float 0.000000e+00, float 1.000000e+00
  %130 = fmul fast float %127, %115
  %131 = fmul fast float %128, %119
  %132 = fmul fast float %129, %123
  %133 = fmul fast float %130, %87
  %134 = call float @dx.op.tertiary.f32(i32 46, float %131, float %95, float %133)  ; FMad(a,b,c)
  %135 = call float @dx.op.tertiary.f32(i32 46, float %132, float %103, float %134)  ; FMad(a,b,c)
  %136 = fmul fast float %130, %88
  %137 = call float @dx.op.tertiary.f32(i32 46, float %131, float %96, float %136)  ; FMad(a,b,c)
  %138 = call float @dx.op.tertiary.f32(i32 46, float %132, float %104, float %137)  ; FMad(a,b,c)
  %139 = fmul fast float %130, %89
  %140 = call float @dx.op.tertiary.f32(i32 46, float %131, float %97, float %139)  ; FMad(a,b,c)
  %141 = call float @dx.op.tertiary.f32(i32 46, float %132, float %105, float %140)  ; FMad(a,b,c)
  %142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.f32 %142, 0
  %144 = extractvalue %dx.types.CBufRet.f32 %142, 1
  %145 = extractvalue %dx.types.CBufRet.f32 %142, 2
  %146 = fmul fast float %143, %135
  %147 = fmul fast float %144, %138
  %148 = fmul fast float %145, %141
  %149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %150 = extractvalue %dx.types.CBufRet.f32 %149, 0
  %151 = extractvalue %dx.types.CBufRet.f32 %149, 1
  %152 = extractvalue %dx.types.CBufRet.f32 %149, 2
  %153 = fadd fast float %146, %150
  %154 = fadd fast float %147, %151
  %155 = fadd fast float %148, %152
  %156 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %157 = extractvalue %dx.types.CBufRet.f32 %156, 0
  %158 = extractvalue %dx.types.CBufRet.f32 %156, 1
  %159 = extractvalue %dx.types.CBufRet.f32 %156, 2
  %160 = extractvalue %dx.types.CBufRet.f32 %156, 3
  %161 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %162 = extractvalue %dx.types.CBufRet.f32 %161, 0
  %163 = extractvalue %dx.types.CBufRet.f32 %161, 1
  %164 = extractvalue %dx.types.CBufRet.f32 %161, 2
  %165 = extractvalue %dx.types.CBufRet.f32 %161, 3
  %166 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %167 = extractvalue %dx.types.CBufRet.f32 %166, 0
  %168 = extractvalue %dx.types.CBufRet.f32 %166, 1
  %169 = extractvalue %dx.types.CBufRet.f32 %166, 2
  %170 = extractvalue %dx.types.CBufRet.f32 %166, 3
  %171 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %172 = extractvalue %dx.types.CBufRet.f32 %171, 0
  %173 = extractvalue %dx.types.CBufRet.f32 %171, 1
  %174 = extractvalue %dx.types.CBufRet.f32 %171, 2
  %175 = extractvalue %dx.types.CBufRet.f32 %171, 3
  %176 = fmul fast float %157, %7
  %177 = call float @dx.op.tertiary.f32(i32 46, float %8, float %158, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %9, float %159, float %177)  ; FMad(a,b,c)
  %179 = call float @dx.op.tertiary.f32(i32 46, float %10, float %160, float %178)  ; FMad(a,b,c)
  %180 = fmul fast float %162, %7
  %181 = call float @dx.op.tertiary.f32(i32 46, float %8, float %163, float %180)  ; FMad(a,b,c)
  %182 = call float @dx.op.tertiary.f32(i32 46, float %9, float %164, float %181)  ; FMad(a,b,c)
  %183 = call float @dx.op.tertiary.f32(i32 46, float %10, float %165, float %182)  ; FMad(a,b,c)
  %184 = fmul fast float %167, %7
  %185 = call float @dx.op.tertiary.f32(i32 46, float %8, float %168, float %184)  ; FMad(a,b,c)
  %186 = call float @dx.op.tertiary.f32(i32 46, float %9, float %169, float %185)  ; FMad(a,b,c)
  %187 = call float @dx.op.tertiary.f32(i32 46, float %10, float %170, float %186)  ; FMad(a,b,c)
  %188 = fmul fast float %172, %7
  %189 = call float @dx.op.tertiary.f32(i32 46, float %8, float %173, float %188)  ; FMad(a,b,c)
  %190 = call float @dx.op.tertiary.f32(i32 46, float %9, float %174, float %189)  ; FMad(a,b,c)
  %191 = call float @dx.op.tertiary.f32(i32 46, float %10, float %175, float %190)  ; FMad(a,b,c)
  %192 = extractvalue %dx.types.CBufRet.f32 %142, 3
  %193 = call float @dx.op.dot3.f32(i32 55, float %53, float %54, float %55, float %79, float %80, float %81)  ; Dot3(ax,ay,az,bx,by,bz)
  %194 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %195 = extractvalue %dx.types.CBufRet.f32 %194, 1
  %196 = call float @dx.op.unary.f32(i32 6, float %193)  ; FAbs(value)
  %197 = fsub fast float 1.000000e+00, %196
  %198 = call float @dx.op.binary.f32(i32 35, float %197, float 0.000000e+00)  ; FMax(a,b)
  %199 = call float @dx.op.unary.f32(i32 23, float %198)  ; Log(value)
  %200 = fmul fast float %199, %195
  %201 = call float @dx.op.unary.f32(i32 21, float %200)  ; Exp(value)
  %202 = extractvalue %dx.types.CBufRet.f32 %194, 0
  %203 = fmul fast float %202, %201
  %204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %205 = extractvalue %dx.types.CBufRet.f32 %204, 0
  %206 = extractvalue %dx.types.CBufRet.f32 %204, 1
  %207 = extractvalue %dx.types.CBufRet.f32 %204, 2
  %208 = extractvalue %dx.types.CBufRet.f32 %204, 3
  %209 = call float @dx.op.dot4.f32(i32 56, float %7, float %8, float %9, float %10, float %205, float %206, float %207, float %208)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %210 = call float @dx.op.unary.f32(i32 7, float %209)  ; Saturate(value)
  %211 = fsub fast float -0.000000e+00, %53
  %212 = fsub fast float -0.000000e+00, %54
  %213 = fsub fast float -0.000000e+00, %55
  %214 = call float @dx.op.dot3.f32(i32 55, float %211, float %212, float %213, float %79, float %80, float %81)  ; Dot3(ax,ay,az,bx,by,bz)
  %215 = fmul fast float %214, 2.000000e+00
  %216 = fmul fast float %215, %79
  %217 = fmul fast float %215, %80
  %218 = fmul fast float %215, %81
  %219 = fsub fast float %211, %216
  %220 = fsub fast float %212, %217
  %221 = fsub fast float %213, %218
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %153)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %154)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %155)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %192)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %203)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %203)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %203)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %210)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %2)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %219)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %220)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %221)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %179)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %183)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %187)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %191)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!7 = !{[12 x i32] [i32 10, i32 20, i32 1011952, i32 1011952, i32 1011952, i32 1011952, i32 28791, i32 28791, i32 28791, i32 0, i32 256, i32 512]}
!8 = !{void ()* @VSEnvMapFresnelBn, !"VSEnvMapFresnelBn", !9, !4, null}
!9 = !{!10, !18, null}
!10 = !{!11, !14, !16}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 2, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{!19, !20, !22, !23, !24}
!19 = !{i32 0, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 0, i8 0, !13}
!20 = !{i32 1, !"COLOR", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!21 = !{i32 1}
!22 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 2, i8 0, !17}
!23 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 3, i32 3, i8 0, !15}
!24 = !{i32 4, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 4, i8 0, !13}

#endif

const unsigned char EnvironmentMapEffect_VSEnvMapFresnelBn[] = {
  0x44, 0x58, 0x42, 0x43, 0xe0, 0x08, 0xf2, 0x5a, 0x1f, 0xff, 0x0c, 0x19,
  0x1b, 0xca, 0x61, 0xa0, 0xa2, 0xfd, 0x71, 0x74, 0x01, 0x00, 0x00, 0x00,
  0xc2, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00,
  0x12, 0x03, 0x00, 0x00, 0xfa, 0x03, 0x00, 0x00, 0x3a, 0x04, 0x00, 0x00,
  0x56, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x84, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
  0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f,
  0x4f, 0x52, 0x44, 0x00, 0x4f, 0x53, 0x47, 0x31, 0xd2, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xbd, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73,
  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x50, 0x53, 0x56, 0x30, 0x54, 0x01,
  0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x03, 0x05,
  0x00, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f,
  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
  0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
  0x43, 0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x02,
  0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01,
  0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x32, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x43, 0x00, 0x03, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04,
  0x44, 0x03, 0x03, 0x04, 0x00, 0x00, 0xf0, 0x70, 0x0f, 0x00, 0xf0, 0x70,
  0x0f, 0x00, 0xf0, 0x70, 0x0f, 0x00, 0xf0, 0x70, 0x0f, 0x00, 0x77, 0x70,
  0x00, 0x00, 0x77, 0x70, 0x00, 0x00, 0x77, 0x70, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xe0, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x1d, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x54, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x94, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xb4, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
  0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
  0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c,
  0x44, 0x4e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x43, 0x6f,
  0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x45, 0x6e, 0x76, 0x69, 0x72,
  0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x66, 0x66,
  0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70,
  0x46, 0x72, 0x65, 0x73, 0x6e, 0x65, 0x6c, 0x42, 0x6e, 0x2e, 0x70, 0x64,
  0x62, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xd6, 0x01, 0xc9, 0x73, 0x37, 0x0e, 0x52, 0xf5, 0x2c, 0xf3,
  0xa3, 0xcb, 0x84, 0xb8, 0xde, 0x7d, 0x44, 0x58, 0x49, 0x4c, 0x64, 0x0e,
  0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0x99, 0x03, 0x00, 0x00, 0x44, 0x58,
  0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x4c, 0x0e,
  0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x90, 0x03,
  0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00,
  0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10,
  0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04,
  0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10,
  0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90,
  0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48,
  0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83,
  0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02,
  0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30,
  0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c,
  0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x30, 0x00,
  0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23,
  0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c,
  0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x90, 0xc1, 0x08, 0x40, 0x09,
  0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6,
  0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20,
  0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3, 0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20,
  0x06, 0x62, 0x0a, 0x31, 0x10, 0xc3, 0x40, 0x4e, 0x51, 0x06, 0x62, 0x18,
  0x86, 0x61, 0x18, 0x86, 0x81, 0xa0, 0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87,
  0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x31,
  0x0c, 0xc3, 0x40, 0xc5, 0x3d, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x7e,
  0x08, 0x34, 0xc3, 0x42, 0xa0, 0x60, 0x2a, 0x84, 0x44, 0x50, 0x04, 0x55,
  0xa5, 0x18, 0x88, 0x61, 0x18, 0xe8, 0x9a, 0x23, 0x08, 0x8a, 0x41, 0x11,
  0x05, 0x41, 0x64, 0xa4, 0x0d, 0x04, 0x0c, 0x23, 0x0c, 0xc3, 0x30, 0x02,
  0x31, 0xe4, 0x40, 0x97, 0x04, 0xde, 0x55, 0x87, 0x23, 0x4d, 0x0b, 0x80,
  0x39, 0xd4, 0xe4, 0xa7, 0x40, 0x04, 0x30, 0xc4, 0x44, 0x44, 0x12, 0x6a,
  0xba, 0x61, 0xf0, 0xba, 0xef, 0xeb, 0x3a, 0x0f, 0xfc, 0x40, 0x0a, 0x93,
  0x81, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68,
  0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d,
  0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76,
  0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x10, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x28, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0x61, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0xe3, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x90, 0x07, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x05, 0x04, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x0b, 0x08, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x1a, 0x10, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x81, 0x00, 0x12, 0x00,
  0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09,
  0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x18, 0x0a,
  0xd0, 0xa0, 0x0c, 0xca, 0xa3, 0x1c, 0x8a, 0xa0, 0x10, 0xa8, 0x28, 0x89,
  0x11, 0x80, 0x42, 0x28, 0x83, 0x22, 0x20, 0x71, 0x06, 0x80, 0xc6, 0xb1,
  0x18, 0x85, 0x82, 0x4f, 0xde, 0x83, 0x4f, 0xde, 0x83, 0x4f, 0xde, 0x83,
  0x4f, 0xde, 0xbb, 0x47, 0xee, 0x1e, 0xb9, 0x7b, 0xe4, 0x00, 0x10, 0x01,
  0x21, 0x00, 0x79, 0x18, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x1a, 0x03,
  0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b,
  0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9,
  0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a,
  0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63,
  0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x42, 0x99, 0x20, 0x10, 0xcb, 0x06,
  0x61, 0x20, 0x26, 0x08, 0x04, 0xb3, 0x41, 0x18, 0x0c, 0x0a, 0x76, 0x73,
  0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0x62, 0x80, 0x11, 0x98, 0x20, 0x10,
  0xcd, 0x06, 0x84, 0x50, 0x16, 0x82, 0x18, 0x18, 0x60, 0x43, 0xd0, 0x6c,
  0x20, 0x00, 0xc0, 0x01, 0x26, 0x08, 0x63, 0x90, 0x6d, 0x08, 0xa0, 0x09,
  0x82, 0x00, 0x30, 0xb2, 0x9a, 0x2a, 0x72, 0xb3, 0x6b, 0x0a, 0x83, 0x33,
  0x92, 0x2b, 0x9b, 0x73, 0x2b, 0x63, 0x13, 0x72, 0xe3, 0x32, 0x65, 0xf5,
  0x05, 0xf5, 0x36, 0x97, 0x46, 0x97, 0xf6, 0xe6, 0x36, 0x41, 0x28, 0xa6,
  0x09, 0x42, 0x41, 0x6d, 0x08, 0x88, 0x09, 0x42, 0x51, 0x4d, 0x10, 0x08,
  0x67, 0x82, 0x40, 0x3c, 0x1b, 0x84, 0x4c, 0xdb, 0xb0, 0x10, 0x54, 0x65,
  0x5d, 0xd6, 0x80, 0x11, 0xd6, 0x46, 0xc3, 0xe9, 0x49, 0xaa, 0x29, 0x88,
  0x69, 0x82, 0x50, 0x58, 0x13, 0x04, 0x02, 0xda, 0x20, 0x64, 0xdf, 0x86,
  0x65, 0xe8, 0x2a, 0xeb, 0xb2, 0x06, 0x6f, 0xb0, 0xc0, 0x60, 0x82, 0x40,
  0x44, 0x44, 0xa8, 0x8a, 0xb0, 0x86, 0x9e, 0x9e, 0xa4, 0x88, 0x26, 0x08,
  0xc5, 0xb5, 0x41, 0xc8, 0xb2, 0x0d, 0x8b, 0x18, 0x8c, 0x41, 0x65, 0x5d,
  0xd6, 0x40, 0x06, 0x62, 0x60, 0x95, 0xc1, 0x86, 0x81, 0x0b, 0x03, 0x33,
  0x60, 0x31, 0xf4, 0xc4, 0xf4, 0x24, 0xb5, 0x61, 0x21, 0xd0, 0xa0, 0xb2,
  0x2e, 0x32, 0x18, 0x30, 0xc2, 0xda, 0x36, 0x04, 0xc3, 0x86, 0x65, 0x40,
  0x83, 0xca, 0x52, 0x03, 0x32, 0x18, 0xb0, 0xc1, 0xda, 0x36, 0x2c, 0x62,
  0x30, 0x06, 0x95, 0x75, 0x91, 0xc1, 0x40, 0x06, 0x62, 0x60, 0x95, 0xc1,
  0x86, 0x25, 0x1b, 0x83, 0xca, 0x52, 0x03, 0x32, 0x18, 0xbc, 0xcc, 0x02,
  0x83, 0x09, 0x02, 0x21, 0x6d, 0x58, 0xdc, 0x80, 0xaa, 0xbc, 0x0b, 0x1b,
  0x30, 0x37, 0xb0, 0xb6, 0x0d, 0x45, 0x1a, 0xac, 0x01, 0x1b, 0xb4, 0xc1,
  0x1b, 0x6c, 0x18, 0xce, 0x00, 0x0e, 0x80, 0x0d, 0x85, 0x34, 0xc5, 0xc1,
  0x03, 0x54, 0x61, 0x63, 0xb3, 0x6b, 0x73, 0x49, 0x23, 0x2b, 0x73, 0xa3,
  0x9b, 0x12, 0x04, 0x55, 0xc8, 0xf0, 0x5c, 0xec, 0xca, 0xe4, 0xe6, 0xd2,
  0xde, 0xdc, 0xa6, 0x04, 0x44, 0x13, 0x32, 0x3c, 0x17, 0xbb, 0x30, 0x36,
  0xbb, 0x32, 0xb9, 0x29, 0x81, 0x51, 0x87, 0x0c, 0xcf, 0x65, 0x0e, 0x2d,
  0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d, 0xac, 0x8c, 0x6d, 0x4a, 0x80, 0x94,
  0x21, 0xc3, 0x73, 0x91, 0x2b, 0x9b, 0x7b, 0xab, 0x93, 0x1b, 0x2b, 0x9b,
  0x9b, 0x12, 0x38, 0x75, 0xc8, 0xf0, 0x5c, 0xec, 0xd2, 0xca, 0xee, 0x92,
  0xc8, 0xa6, 0xe8, 0xc2, 0xe8, 0xca, 0xa6, 0x04, 0x50, 0x1d, 0x32, 0x3c,
  0x97, 0x32, 0x37, 0x3a, 0xb9, 0x3c, 0xa8, 0xb7, 0x34, 0x37, 0xba, 0xb9,
  0x29, 0x41, 0x1c, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00,
  0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01,
  0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78,
  0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4,
  0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c,
  0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03,
  0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70,
  0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70,
  0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec,
  0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0,
  0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d,
  0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43,
  0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0,
  0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68,
  0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28,
  0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08,
  0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee,
  0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62,
  0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06,
  0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3,
  0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3,
  0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80,
  0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec,
  0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d,
  0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d,
  0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20,
  0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x10, 0xbd, 0xac, 0xd7, 0x54,
  0x26, 0xf0, 0x7c, 0x11, 0x21, 0x35, 0xc4, 0xb2, 0x35, 0x56, 0x00, 0x0d,
  0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0xdb,
  0xc1, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95,
  0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6, 0x25, 0x48,
  0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c,
  0x0b, 0x61, 0x03, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb,
  0xc5, 0x6d, 0x9b, 0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xe1,
  0x7e, 0x71, 0xdb, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00,
  0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x02, 0xd5, 0x70, 0xf9,
  0xce, 0xe3, 0x4b, 0x93, 0x13, 0x11, 0x28, 0x35, 0x3d, 0xd4, 0xe4, 0x17,
  0xb7, 0x6d, 0x08, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x44, 0x34, 0x21,
  0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0xc1, 0x33, 0x5c, 0xbe, 0xf3, 0xf8,
  0x54, 0x03, 0x44, 0x98, 0x5f, 0xdc, 0x36, 0x00, 0x00, 0x00, 0x61, 0x20,
  0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00,
  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x94, 0x8d, 0x00, 0x50, 0x51, 0x02,
  0x44, 0x14, 0x5c, 0x61, 0x94, 0x51, 0x71, 0x95, 0x5d, 0x29, 0xcc, 0x00,
  0x94, 0x5b, 0xc9, 0x94, 0x4a, 0xb9, 0x94, 0x5c, 0x69, 0x14, 0x47, 0x51,
  0x94, 0x48, 0x91, 0x94, 0x49, 0x41, 0x94, 0x44, 0xa1, 0x14, 0x0b, 0x0d,
  0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x2f, 0x8c, 0x11, 0x80, 0x20, 0x08,
  0xe2, 0xdf, 0x18, 0x01, 0x08, 0x82, 0x20, 0x08, 0x06, 0x23, 0x00, 0x63,
  0x04, 0x20, 0x08, 0x82, 0x20, 0x28, 0x00, 0x00, 0x00, 0x00, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0xa0, 0xb9, 0x01, 0x04, 0x06, 0x6c, 0xc0, 0x06,
  0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x77, 0x60, 0x06, 0x67,
  0xd0, 0x06, 0x64, 0x60, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x81,
  0x07, 0x67, 0x80, 0x06, 0x6e, 0xe0, 0x5d, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x60, 0xe4, 0x01, 0x1a, 0xc0, 0xc1, 0x1b, 0x98, 0x01, 0x36, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1e, 0xa4, 0x41, 0x1c, 0xc0, 0x01,
  0x18, 0x64, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xec, 0x81, 0x1a,
  0xc8, 0x41, 0x1c, 0x94, 0x81, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x06, 0x1f, 0xac, 0x81, 0x1c, 0xc8, 0x41, 0x1a, 0x6c, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xf4, 0x01, 0x1b, 0xcc, 0xc1, 0x1c, 0x8c, 0x01,
  0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1f, 0xb4, 0x01, 0x1d,
  0xd0, 0x01, 0x1a, 0x74, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xfc,
  0x81, 0x1b, 0xd4, 0x41, 0x1d, 0xa8, 0x81, 0x67, 0x47, 0x23, 0x1f, 0x3b,
  0x1c, 0xf9, 0xd8, 0xf1, 0xc8, 0xc7, 0x06, 0x09, 0x3e, 0x36, 0x4c, 0xf0,
  0xb1, 0x81, 0x82, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0xa0,
  0x70, 0x06, 0xd0, 0x37, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0x55, 0x29, 0xb0, 0x41, 0x35, 0x06, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x50, 0xa9, 0x42, 0x1c, 0x68, 0xa2, 0x30, 0x9a, 0x10, 0x00,
  0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x60, 0x4e,
  0x26, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x5e, 0x01, 0x0f,
  0x32, 0x27, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x0b, 0x16, 0xf2,
  0x20, 0x73, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x62, 0x41,
  0x0f, 0x32, 0x27, 0xb0, 0xa6, 0x93, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x5c, 0xb3, 0xc0, 0x07, 0x5d, 0x13, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0xc1, 0x45, 0x0b, 0x7d, 0xd0, 0x35, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x5c, 0xb5, 0xe0, 0x07, 0x5d, 0x13, 0x18, 0x13, 0x06, 0xf2,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xeb, 0x16, 0x40, 0x21, 0x0c,
  0x98, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x5c, 0x08, 0x85,
  0x30, 0x60, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x72, 0x41,
  0x14, 0xc2, 0x80, 0x09, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xda,
  0x05, 0x51, 0x58, 0x03, 0x3c, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21,
  0x18, 0x4d, 0x18, 0x04, 0x1b, 0x9a, 0xf8, 0xd8, 0xa0, 0xc4, 0xc7, 0x86,
  0x23, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xa0, 0x98, 0x83, 0x29,
  0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30,
  0xe6, 0x60, 0x0a, 0x81, 0x15, 0x81, 0x7c, 0xac, 0x10, 0xe4, 0x63, 0xc5,
  0x20, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xce, 0xc1, 0x15,
  0xee, 0x60, 0x14, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13,
  0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa, 0x75, 0x90, 0x85,
  0x3d, 0x30, 0x85, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xea, 0x1d, 0x6c, 0xe1,
  0x0f, 0x52, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61,
  0x10, 0x6c, 0xb1, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1,
  0x35, 0x0f, 0xbc, 0x60, 0x07, 0x4b, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x17, 0x3d, 0xf4, 0x82, 0x1d, 0x2c, 0x81, 0x29, 0x79, 0x20, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xec, 0xe1, 0x17, 0xf2, 0x40,
  0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0xba, 0x07, 0x70, 0xc8,
  0x03, 0x25, 0xb0, 0x84, 0x0f, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x57, 0x3e, 0x88, 0x03, 0x1f, 0x24, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x5c, 0xfa, 0x30, 0x0e, 0x7c, 0x90, 0x04, 0x23, 0x06, 0x0b,
  0x00, 0x82, 0x60, 0xa0, 0x80, 0x04, 0x38, 0x1c, 0x44, 0x70, 0x10, 0xc1,
  0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0x20, 0x01, 0x0e, 0x81, 0x05,
  0x89, 0x7c, 0x4c, 0x38, 0xe4, 0x63, 0x43, 0x21, 0x9f, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0xa8, 0x42, 0x02, 0x1d, 0x62, 0xc1, 0x1e, 0x46, 0x13,
  0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0xaa, 0x92, 0x60, 0x87, 0x5a, 0xe0, 0x87, 0xd1, 0x84,
  0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x83, 0x2a, 0x25, 0xe0, 0x21, 0x17, 0xde, 0x61, 0x34, 0x21,
  0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xa0, 0x6a, 0x09, 0x7a, 0xe8, 0x05, 0x73, 0x18, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xa8, 0x62, 0x02, 0x1f, 0xc2, 0x81, 0x25, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0xaa, 0x9a, 0xe0, 0x87, 0x72, 0x68, 0x87, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x30, 0x75, 0xb0, 0xe2, 0x63,
  0xeb, 0x60, 0xc5, 0xc7, 0xd8, 0x01, 0x8a, 0x8f, 0xb5, 0x03, 0x14, 0x1f,
  0x73, 0x07, 0x25, 0x3e, 0xf6, 0x0e, 0x4a, 0x7c, 0x2c, 0x0c, 0x3a, 0xf9,
  0x58, 0x3c, 0x04, 0xf1, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x0b,
  0x2c, 0x52, 0x02, 0x11, 0x83, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0xae, 0xb0, 0x50, 0x09, 0x44, 0x0c, 0x02, 0x2b, 0x83, 0x4c, 0x3e, 0x56,
  0x0f, 0x41, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x22, 0x8b,
  0x96, 0x50, 0xcc, 0x20, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xab,
  0x2c, 0x5c, 0x42, 0x31, 0x83, 0xc0, 0xd2, 0xa0, 0x92, 0x8f, 0xe5, 0x43,
  0x10, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xd0, 0x22, 0x26,
  0x18, 0x35, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x4a, 0x0b,
  0x99, 0x60, 0xd4, 0x20, 0x18, 0x8e, 0x48, 0xfa, 0x81, 0xf8, 0x86, 0x23,
  0x0c, 0x7f, 0x20, 0xbe, 0xe1, 0x88, 0xe1, 0x1f, 0x88, 0x6f, 0xba, 0x01,
  0x24, 0x44, 0x62, 0x98, 0x6e, 0x08, 0x89, 0x91, 0x18, 0xa6, 0x1b, 0x44,
  0x82, 0x24, 0x06, 0x1b, 0x1e, 0xf9, 0xd8, 0xc0, 0xc8, 0xc7, 0x86, 0x44,
  0x3e, 0x36, 0xb8, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0,
  0xa2, 0x8b, 0x9e, 0x18, 0xce, 0x20, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0xab, 0x2e, 0x7c, 0x62, 0x00, 0x83, 0xc0, 0x0c, 0x38, 0x90, 0xcf,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x77, 0x01, 0x16, 0x46, 0x1a,
  0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xe1, 0x45, 0x58, 0x18,
  0x62, 0x10, 0x58, 0x22, 0x07, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0x4b, 0x2f, 0xc6, 0x22, 0x59, 0x83, 0x60, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0xae, 0xbd, 0x20, 0x8b, 0x84, 0x0c, 0x82, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0xa8, 0xfa, 0x82, 0x2c, 0x5a, 0x62, 0x2e, 0x46, 0x13,
  0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x86, 0x45, 0x3e,
  0x36, 0x24, 0xf2, 0xb1, 0xe1, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x54, 0xa4, 0xb1, 0x16, 0x34, 0xd1, 0x17, 0xa3, 0x09, 0x01, 0x30,
  0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0xc7, 0x00, 0x1f, 0x3b, 0x06,
  0xf8, 0xd8, 0x31, 0xc0, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa,
  0xd5, 0x90, 0x8b, 0x9d, 0x10, 0x8b, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xa8, 0x60, 0xe3, 0x2e, 0xc0, 0x42, 0x2e, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xaa, 0x0d, 0xbe, 0x28, 0x8b, 0xb5,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1,
  0x04, 0x62, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x4a, 0x37, 0x42,
  0x43, 0x2d, 0xf6, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34,
  0x61, 0x10, 0x46, 0x13, 0x88, 0xc1, 0xa6, 0xb4, 0x90, 0xcf, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x5c, 0xbf, 0x81, 0x1a, 0x69, 0x31, 0x05, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0x81, 0x47, 0x6a, 0xa4, 0xc5, 0x14,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x15, 0x1e, 0xaa, 0x91, 0x16,
  0x53, 0x60, 0x52, 0x5b, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0xae, 0xf1, 0x60, 0x8d, 0xb6, 0x90, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xb8, 0xc8, 0xa3, 0x35, 0xda, 0x42, 0x0a, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0xe0, 0x2a, 0x0f, 0xd7, 0x68, 0x0b, 0x29, 0xb0, 0x28, 0x2e,
  0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x79, 0xc0, 0x46,
  0x5c, 0x44, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xe8, 0x11,
  0x1b, 0x71, 0x11, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xa5,
  0x87, 0x6c, 0xc4, 0x45, 0x14, 0x18, 0x54, 0x17, 0xf2, 0x19, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x83, 0x6b, 0x3d, 0x68, 0xa3, 0x2e, 0xa0, 0x60, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0xf6, 0xa8, 0x8d, 0xba, 0x80, 0x82,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xda, 0xc3, 0x36, 0xea, 0x02,
  0x0a, 0x46, 0x13, 0xe4, 0x60, 0x18, 0x31, 0x58, 0x00, 0x10, 0x04, 0x03,
  0x85, 0x3e, 0x68, 0x83, 0x25, 0x56, 0x42, 0x25, 0xe4, 0x21, 0x1e, 0xe0,
  0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa, 0xf8, 0xc0, 0x8d, 0xd0,
  0x70, 0x8f, 0xd1, 0x84, 0x20, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03,
  0xc6, 0x3e, 0xdc, 0x63, 0x30, 0xd4, 0x08, 0xe2, 0x33, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0xce, 0x7d, 0xf8, 0x46, 0x70, 0x1a, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xc0, 0xe4, 0xc7, 0x6d, 0x04, 0x16, 0x14, 0xf2, 0x19,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x66, 0x3f, 0x74, 0x23, 0x18, 0x4d,
  0x40, 0x00, 0x0b, 0x04, 0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41,
  0xb5, 0x1f, 0xe2, 0xb1, 0x1a, 0xe5, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0xd0, 0x00,
  0x20, 0x08, 0x06, 0x50, 0x88, 0xac, 0x87, 0x6a, 0xa4, 0x06, 0x6a, 0x9c,
  0x06, 0x31, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0x24,
  0x82, 0x1f, 0x81, 0xcd, 0x86, 0x4f, 0xc4, 0xc7, 0x68, 0xc3, 0x27, 0xe2,
  0x63, 0xb5, 0xe1, 0x13, 0xf1, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x03,
  0x25, 0x45, 0xd2, 0x63, 0x10, 0x82, 0x93, 0x30, 0x89, 0x92, 0xb0, 0x20,
  0x37, 0xe4, 0x63, 0x41, 0x4a, 0xc8, 0xc7, 0x84, 0x94, 0x90, 0x8f, 0x0d,
  0x29, 0x21, 0x1f, 0x43, 0x86, 0xf8, 0x18, 0x32, 0xc4, 0xc7, 0x90, 0x21,
  0x3e, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xc8, 0xc8, 0x7c, 0xa4,
  0x48, 0x8a, 0x80, 0x48, 0x29, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01,
  0x22, 0x23, 0xf3, 0x91, 0x22, 0x29, 0x92, 0x1f, 0xa4, 0x30, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x88, 0x8c, 0xcc, 0x47, 0x8a, 0xa4, 0x48, 0x7f,
  0x8c, 0xc2, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x32, 0x32, 0x1f,
  0x29, 0x92, 0x22, 0xfe, 0xe1, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01,
  0x22, 0x23, 0xf3, 0xa1, 0x22, 0x29, 0x02, 0x22, 0xd3, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x20, 0x32, 0x32, 0x1f, 0x2a, 0x92, 0x22, 0xf9, 0x31,
  0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x22, 0x23, 0xf3, 0xa1, 0x22,
  0x29, 0xd2, 0x1f, 0xd3, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x32,
  0x32, 0x1f, 0x2a, 0x92, 0x22, 0xfe, 0xc1, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x01, 0x22, 0x23, 0xf3, 0x31, 0x22, 0x29, 0x02, 0x22, 0xbc, 0x31,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x88, 0x8c, 0xcc, 0xc7, 0x88, 0xa4,
  0x48, 0x7e, 0xec, 0xc6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x32,
  0x32, 0x1f, 0x26, 0x92, 0x22, 0x20, 0x32, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x01, 0x22, 0x23, 0xf3, 0x61, 0x22, 0x29, 0x92, 0x1f, 0xc2, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x32, 0x32, 0x1f, 0x26, 0x92, 0x22,
  0xfd, 0x11, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x22, 0x23, 0xf3,
  0x21, 0x22, 0x29, 0x02, 0x22, 0x6b, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x88, 0x8c, 0xcc, 0x87, 0x88, 0xa4, 0x48, 0x7e, 0x9c, 0xc1, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x32, 0x32, 0x1f, 0x22, 0x92, 0x22,
  0xfd, 0x31, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xc8, 0xc8,
  0x7c, 0x88, 0x48, 0x8a, 0xf8, 0xc7, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00
};
