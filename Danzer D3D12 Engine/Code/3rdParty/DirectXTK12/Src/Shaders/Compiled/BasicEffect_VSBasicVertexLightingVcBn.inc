#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; COLOR                    0   xyzw        2     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; SV_Position              0   xyzw        2      POS   float   xyzw
;
; shader debug name: Compiled\BasicEffect_VSBasicVertexLightingVcBn.pdb
; shader hash: 4b885e6dc6f27c2b0358850286432207
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; COLOR                    0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 12, outputs: 12
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 8 }
;   output 1 depends on inputs: { 4, 5, 6, 9 }
;   output 2 depends on inputs: { 4, 5, 6, 10 }
;   output 3 depends on inputs: { 11 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 0, 1, 2, 3 }
;   output 9 depends on inputs: { 0, 1, 2, 3 }
;   output 10 depends on inputs: { 0, 1, 2, 3 }
;   output 11 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSBasicVertexLightingVcBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = fmul fast float %6, 2.000000e+00
  %14 = fmul fast float %7, 2.000000e+00
  %15 = fmul fast float %8, 2.000000e+00
  %16 = fadd fast float %13, -1.000000e+00
  %17 = fadd fast float %14, -1.000000e+00
  %18 = fadd fast float %15, -1.000000e+00
  %19 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %20 = extractvalue %dx.types.CBufRet.f32 %19, 0
  %21 = extractvalue %dx.types.CBufRet.f32 %19, 1
  %22 = extractvalue %dx.types.CBufRet.f32 %19, 2
  %23 = extractvalue %dx.types.CBufRet.f32 %19, 3
  %24 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %25 = extractvalue %dx.types.CBufRet.f32 %24, 0
  %26 = extractvalue %dx.types.CBufRet.f32 %24, 1
  %27 = extractvalue %dx.types.CBufRet.f32 %24, 2
  %28 = extractvalue %dx.types.CBufRet.f32 %24, 3
  %29 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.f32 %29, 0
  %31 = extractvalue %dx.types.CBufRet.f32 %29, 1
  %32 = extractvalue %dx.types.CBufRet.f32 %29, 2
  %33 = extractvalue %dx.types.CBufRet.f32 %29, 3
  %34 = fmul fast float %20, %9
  %35 = call float @dx.op.tertiary.f32(i32 46, float %10, float %21, float %34)  ; FMad(a,b,c)
  %36 = call float @dx.op.tertiary.f32(i32 46, float %11, float %22, float %35)  ; FMad(a,b,c)
  %37 = call float @dx.op.tertiary.f32(i32 46, float %12, float %23, float %36)  ; FMad(a,b,c)
  %38 = fmul fast float %25, %9
  %39 = call float @dx.op.tertiary.f32(i32 46, float %10, float %26, float %38)  ; FMad(a,b,c)
  %40 = call float @dx.op.tertiary.f32(i32 46, float %11, float %27, float %39)  ; FMad(a,b,c)
  %41 = call float @dx.op.tertiary.f32(i32 46, float %12, float %28, float %40)  ; FMad(a,b,c)
  %42 = fmul fast float %30, %9
  %43 = call float @dx.op.tertiary.f32(i32 46, float %10, float %31, float %42)  ; FMad(a,b,c)
  %44 = call float @dx.op.tertiary.f32(i32 46, float %11, float %32, float %43)  ; FMad(a,b,c)
  %45 = call float @dx.op.tertiary.f32(i32 46, float %12, float %33, float %44)  ; FMad(a,b,c)
  %46 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %47 = extractvalue %dx.types.CBufRet.f32 %46, 0
  %48 = extractvalue %dx.types.CBufRet.f32 %46, 1
  %49 = extractvalue %dx.types.CBufRet.f32 %46, 2
  %50 = fsub fast float %47, %37
  %51 = fsub fast float %48, %41
  %52 = fsub fast float %49, %45
  %53 = call float @dx.op.dot3.f32(i32 55, float %50, float %51, float %52, float %50, float %51, float %52)  ; Dot3(ax,ay,az,bx,by,bz)
  %54 = call float @dx.op.unary.f32(i32 25, float %53)  ; Rsqrt(value)
  %55 = fmul fast float %50, %54
  %56 = fmul fast float %51, %54
  %57 = fmul fast float %52, %54
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %68 = extractvalue %dx.types.CBufRet.f32 %66, 1
  %69 = extractvalue %dx.types.CBufRet.f32 %66, 2
  %70 = fmul fast float %59, %16
  %71 = call float @dx.op.tertiary.f32(i32 46, float %17, float %60, float %70)  ; FMad(a,b,c)
  %72 = call float @dx.op.tertiary.f32(i32 46, float %18, float %61, float %71)  ; FMad(a,b,c)
  %73 = fmul fast float %63, %16
  %74 = call float @dx.op.tertiary.f32(i32 46, float %17, float %64, float %73)  ; FMad(a,b,c)
  %75 = call float @dx.op.tertiary.f32(i32 46, float %18, float %65, float %74)  ; FMad(a,b,c)
  %76 = fmul fast float %67, %16
  %77 = call float @dx.op.tertiary.f32(i32 46, float %17, float %68, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %18, float %69, float %77)  ; FMad(a,b,c)
  %79 = call float @dx.op.dot3.f32(i32 55, float %72, float %75, float %78, float %72, float %75, float %78)  ; Dot3(ax,ay,az,bx,by,bz)
  %80 = call float @dx.op.unary.f32(i32 25, float %79)  ; Rsqrt(value)
  %81 = fmul fast float %80, %72
  %82 = fmul fast float %80, %75
  %83 = fmul fast float %80, %78
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = fsub fast float %55, %85
  %97 = fsub fast float %56, %86
  %98 = fsub fast float %57, %87
  %99 = call float @dx.op.dot3.f32(i32 55, float %96, float %97, float %98, float %96, float %97, float %98)  ; Dot3(ax,ay,az,bx,by,bz)
  %100 = call float @dx.op.unary.f32(i32 25, float %99)  ; Rsqrt(value)
  %101 = fmul fast float %100, %97
  %102 = fmul fast float %100, %98
  %103 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %104 = extractvalue %dx.types.CBufRet.f32 %103, 0
  %105 = extractvalue %dx.types.CBufRet.f32 %103, 1
  %106 = extractvalue %dx.types.CBufRet.f32 %103, 2
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %110 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.f32 %111, 1
  %114 = extractvalue %dx.types.CBufRet.f32 %111, 2
  %115 = fsub fast float %55, %104
  %116 = fsub fast float %56, %105
  %117 = fsub fast float %57, %106
  %118 = call float @dx.op.dot3.f32(i32 55, float %115, float %116, float %117, float %115, float %116, float %117)  ; Dot3(ax,ay,az,bx,by,bz)
  %119 = call float @dx.op.unary.f32(i32 25, float %118)  ; Rsqrt(value)
  %120 = fmul fast float %119, %116
  %121 = fmul fast float %119, %117
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %124 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %125 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 0
  %128 = extractvalue %dx.types.CBufRet.f32 %126, 1
  %129 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.f32 %130, 0
  %132 = extractvalue %dx.types.CBufRet.f32 %130, 1
  %133 = extractvalue %dx.types.CBufRet.f32 %130, 2
  %134 = fsub fast float %55, %123
  %135 = fsub fast float %56, %124
  %136 = fsub fast float %57, %125
  %137 = call float @dx.op.dot3.f32(i32 55, float %134, float %135, float %136, float %134, float %135, float %136)  ; Dot3(ax,ay,az,bx,by,bz)
  %138 = call float @dx.op.unary.f32(i32 25, float %137)  ; Rsqrt(value)
  %139 = fmul fast float %138, %135
  %140 = fmul fast float %138, %136
  %141 = fsub fast float -0.000000e+00, %86
  %142 = fsub fast float -0.000000e+00, %87
  %143 = fsub fast float -0.000000e+00, %105
  %144 = fsub fast float -0.000000e+00, %106
  %145 = fsub fast float -0.000000e+00, %124
  %146 = fsub fast float -0.000000e+00, %125
  %147 = fmul fast float %81, %85
  %148 = fsub fast float -0.000000e+00, %147
  %149 = call float @dx.op.tertiary.f32(i32 46, float %141, float %82, float %148)  ; FMad(a,b,c)
  %150 = call float @dx.op.tertiary.f32(i32 46, float %142, float %83, float %149)  ; FMad(a,b,c)
  %151 = fmul fast float %81, %104
  %152 = fsub fast float -0.000000e+00, %151
  %153 = call float @dx.op.tertiary.f32(i32 46, float %143, float %82, float %152)  ; FMad(a,b,c)
  %154 = call float @dx.op.tertiary.f32(i32 46, float %144, float %83, float %153)  ; FMad(a,b,c)
  %155 = fmul fast float %81, %123
  %156 = fsub fast float -0.000000e+00, %155
  %157 = call float @dx.op.tertiary.f32(i32 46, float %145, float %82, float %156)  ; FMad(a,b,c)
  %158 = call float @dx.op.tertiary.f32(i32 46, float %146, float %83, float %157)  ; FMad(a,b,c)
  %159 = fmul fast float %96, %81
  %160 = fmul fast float %159, %100
  %161 = call float @dx.op.tertiary.f32(i32 46, float %101, float %82, float %160)  ; FMad(a,b,c)
  %162 = call float @dx.op.tertiary.f32(i32 46, float %102, float %83, float %161)  ; FMad(a,b,c)
  %163 = fmul fast float %115, %81
  %164 = fmul fast float %163, %119
  %165 = call float @dx.op.tertiary.f32(i32 46, float %120, float %82, float %164)  ; FMad(a,b,c)
  %166 = call float @dx.op.tertiary.f32(i32 46, float %121, float %83, float %165)  ; FMad(a,b,c)
  %167 = fmul fast float %134, %81
  %168 = fmul fast float %167, %138
  %169 = call float @dx.op.tertiary.f32(i32 46, float %139, float %82, float %168)  ; FMad(a,b,c)
  %170 = call float @dx.op.tertiary.f32(i32 46, float %140, float %83, float %169)  ; FMad(a,b,c)
  %171 = fcmp fast olt float %150, 0.000000e+00
  %172 = fcmp fast olt float %154, 0.000000e+00
  %173 = fcmp fast olt float %158, 0.000000e+00
  %174 = select i1 %171, float 0.000000e+00, float 1.000000e+00
  %175 = select i1 %172, float 0.000000e+00, float 1.000000e+00
  %176 = select i1 %173, float 0.000000e+00, float 1.000000e+00
  %177 = fmul fast float %174, %150
  %178 = fmul fast float %175, %154
  %179 = fmul fast float %176, %158
  %180 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %181 = extractvalue %dx.types.CBufRet.f32 %180, 3
  %182 = call float @dx.op.binary.f32(i32 35, float %162, float 0.000000e+00)  ; FMax(a,b)
  %183 = call float @dx.op.binary.f32(i32 35, float %166, float 0.000000e+00)  ; FMax(a,b)
  %184 = call float @dx.op.binary.f32(i32 35, float %170, float 0.000000e+00)  ; FMax(a,b)
  %185 = fmul fast float %182, %174
  %186 = fmul fast float %183, %175
  %187 = fmul fast float %184, %176
  %188 = call float @dx.op.unary.f32(i32 23, float %185)  ; Log(value)
  %189 = call float @dx.op.unary.f32(i32 23, float %186)  ; Log(value)
  %190 = call float @dx.op.unary.f32(i32 23, float %187)  ; Log(value)
  %191 = fmul fast float %188, %181
  %192 = fmul fast float %189, %181
  %193 = fmul fast float %190, %181
  %194 = call float @dx.op.unary.f32(i32 21, float %191)  ; Exp(value)
  %195 = call float @dx.op.unary.f32(i32 21, float %192)  ; Exp(value)
  %196 = call float @dx.op.unary.f32(i32 21, float %193)  ; Exp(value)
  %197 = fmul fast float %194, %150
  %198 = fmul fast float %195, %154
  %199 = fmul fast float %196, %158
  %200 = fmul fast float %177, %89
  %201 = call float @dx.op.tertiary.f32(i32 46, float %178, float %108, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %179, float %127, float %201)  ; FMad(a,b,c)
  %203 = fmul fast float %177, %90
  %204 = call float @dx.op.tertiary.f32(i32 46, float %178, float %109, float %203)  ; FMad(a,b,c)
  %205 = call float @dx.op.tertiary.f32(i32 46, float %179, float %128, float %204)  ; FMad(a,b,c)
  %206 = fmul fast float %177, %91
  %207 = call float @dx.op.tertiary.f32(i32 46, float %178, float %110, float %206)  ; FMad(a,b,c)
  %208 = call float @dx.op.tertiary.f32(i32 46, float %179, float %129, float %207)  ; FMad(a,b,c)
  %209 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %210 = extractvalue %dx.types.CBufRet.f32 %209, 0
  %211 = extractvalue %dx.types.CBufRet.f32 %209, 1
  %212 = extractvalue %dx.types.CBufRet.f32 %209, 2
  %213 = fmul fast float %210, %202
  %214 = fmul fast float %211, %205
  %215 = fmul fast float %212, %208
  %216 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %217 = extractvalue %dx.types.CBufRet.f32 %216, 0
  %218 = extractvalue %dx.types.CBufRet.f32 %216, 1
  %219 = extractvalue %dx.types.CBufRet.f32 %216, 2
  %220 = fadd fast float %213, %217
  %221 = fadd fast float %214, %218
  %222 = fadd fast float %215, %219
  %223 = fmul fast float %197, %93
  %224 = call float @dx.op.tertiary.f32(i32 46, float %198, float %112, float %223)  ; FMad(a,b,c)
  %225 = call float @dx.op.tertiary.f32(i32 46, float %199, float %131, float %224)  ; FMad(a,b,c)
  %226 = fmul fast float %197, %94
  %227 = call float @dx.op.tertiary.f32(i32 46, float %198, float %113, float %226)  ; FMad(a,b,c)
  %228 = call float @dx.op.tertiary.f32(i32 46, float %199, float %132, float %227)  ; FMad(a,b,c)
  %229 = fmul fast float %197, %95
  %230 = call float @dx.op.tertiary.f32(i32 46, float %198, float %114, float %229)  ; FMad(a,b,c)
  %231 = call float @dx.op.tertiary.f32(i32 46, float %199, float %133, float %230)  ; FMad(a,b,c)
  %232 = extractvalue %dx.types.CBufRet.f32 %180, 0
  %233 = extractvalue %dx.types.CBufRet.f32 %180, 1
  %234 = extractvalue %dx.types.CBufRet.f32 %180, 2
  %235 = fmul fast float %232, %225
  %236 = fmul fast float %233, %228
  %237 = fmul fast float %234, %231
  %238 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %239 = extractvalue %dx.types.CBufRet.f32 %238, 0
  %240 = extractvalue %dx.types.CBufRet.f32 %238, 1
  %241 = extractvalue %dx.types.CBufRet.f32 %238, 2
  %242 = extractvalue %dx.types.CBufRet.f32 %238, 3
  %243 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %244 = extractvalue %dx.types.CBufRet.f32 %243, 0
  %245 = extractvalue %dx.types.CBufRet.f32 %243, 1
  %246 = extractvalue %dx.types.CBufRet.f32 %243, 2
  %247 = extractvalue %dx.types.CBufRet.f32 %243, 3
  %248 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %249 = extractvalue %dx.types.CBufRet.f32 %248, 0
  %250 = extractvalue %dx.types.CBufRet.f32 %248, 1
  %251 = extractvalue %dx.types.CBufRet.f32 %248, 2
  %252 = extractvalue %dx.types.CBufRet.f32 %248, 3
  %253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %254 = extractvalue %dx.types.CBufRet.f32 %253, 0
  %255 = extractvalue %dx.types.CBufRet.f32 %253, 1
  %256 = extractvalue %dx.types.CBufRet.f32 %253, 2
  %257 = extractvalue %dx.types.CBufRet.f32 %253, 3
  %258 = fmul fast float %239, %9
  %259 = call float @dx.op.tertiary.f32(i32 46, float %10, float %240, float %258)  ; FMad(a,b,c)
  %260 = call float @dx.op.tertiary.f32(i32 46, float %11, float %241, float %259)  ; FMad(a,b,c)
  %261 = call float @dx.op.tertiary.f32(i32 46, float %12, float %242, float %260)  ; FMad(a,b,c)
  %262 = fmul fast float %244, %9
  %263 = call float @dx.op.tertiary.f32(i32 46, float %10, float %245, float %262)  ; FMad(a,b,c)
  %264 = call float @dx.op.tertiary.f32(i32 46, float %11, float %246, float %263)  ; FMad(a,b,c)
  %265 = call float @dx.op.tertiary.f32(i32 46, float %12, float %247, float %264)  ; FMad(a,b,c)
  %266 = fmul fast float %249, %9
  %267 = call float @dx.op.tertiary.f32(i32 46, float %10, float %250, float %266)  ; FMad(a,b,c)
  %268 = call float @dx.op.tertiary.f32(i32 46, float %11, float %251, float %267)  ; FMad(a,b,c)
  %269 = call float @dx.op.tertiary.f32(i32 46, float %12, float %252, float %268)  ; FMad(a,b,c)
  %270 = fmul fast float %254, %9
  %271 = call float @dx.op.tertiary.f32(i32 46, float %10, float %255, float %270)  ; FMad(a,b,c)
  %272 = call float @dx.op.tertiary.f32(i32 46, float %11, float %256, float %271)  ; FMad(a,b,c)
  %273 = call float @dx.op.tertiary.f32(i32 46, float %12, float %257, float %272)  ; FMad(a,b,c)
  %274 = extractvalue %dx.types.CBufRet.f32 %209, 3
  %275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %276 = extractvalue %dx.types.CBufRet.f32 %275, 0
  %277 = extractvalue %dx.types.CBufRet.f32 %275, 1
  %278 = extractvalue %dx.types.CBufRet.f32 %275, 2
  %279 = extractvalue %dx.types.CBufRet.f32 %275, 3
  %280 = call float @dx.op.dot4.f32(i32 56, float %9, float %10, float %11, float %12, float %276, float %277, float %278, float %279)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %281 = call float @dx.op.unary.f32(i32 7, float %280)  ; Saturate(value)
  %282 = fmul fast float %220, %2
  %283 = fmul fast float %221, %3
  %284 = fmul fast float %222, %4
  %285 = fmul fast float %274, %5
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %282)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %283)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %284)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %285)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %235)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %236)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %237)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %281)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %261)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %265)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %269)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %273)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!7 = !{[14 x i32] [i32 12, i32 12, i32 4080, i32 4080, i32 4080, i32 4080, i32 119, i32 119, i32 119, i32 0, i32 1, i32 2, i32 4, i32 8]}
!8 = !{void ()* @VSBasicVertexLightingVcBn, !"VSBasicVertexLightingVcBn", !9, !4, null}
!9 = !{!10, !17, null}
!10 = !{!11, !14, !16}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"COLOR", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 2, i8 0, !13}
!17 = !{!18, !19, !21}
!18 = !{i32 0, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 0, i8 0, !13}
!19 = !{i32 1, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!20 = !{i32 1}
!21 = !{i32 2, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 2, i8 0, !13}

#endif

const unsigned char BasicEffect_VSBasicVertexLightingVcBn[] = {
  0x44, 0x58, 0x42, 0x43, 0x9d, 0x49, 0x61, 0x63, 0x32, 0x7d, 0xce, 0x53,
  0x91, 0x8e, 0x61, 0xa9, 0x03, 0x8f, 0xf0, 0x07, 0x01, 0x00, 0x00, 0x00,
  0xf1, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xd9, 0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00,
  0x89, 0x02, 0x00, 0x00, 0xc1, 0x02, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00,
  0x1d, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x81, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
  0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x4f, 0x53, 0x47, 0x31, 0x80, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69,
  0x74, 0x69, 0x6f, 0x6e, 0x00, 0x50, 0x53, 0x56, 0x30, 0x20, 0x01, 0x00,
  0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73,
  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
  0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x44, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44,
  0x00, 0x03, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x44, 0x03, 0x03, 0x04, 0x00,
  0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00,
  0x00, 0xf0, 0x0f, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00,
  0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x52, 0x54, 0x53, 0x30, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44,
  0x4e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x43, 0x6f, 0x6d,
  0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45,
  0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x42, 0x61, 0x73, 0x69,
  0x63, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x4c, 0x69, 0x67, 0x68, 0x74,
  0x69, 0x6e, 0x67, 0x56, 0x63, 0x42, 0x6e, 0x2e, 0x70, 0x64, 0x62, 0x00,
  0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4b, 0x88, 0x5e, 0x6d, 0xc6, 0xf2, 0x7c, 0x2b, 0x03, 0x58, 0x85,
  0x02, 0x86, 0x43, 0x22, 0x07, 0x44, 0x58, 0x49, 0x4c, 0xcc, 0x0f, 0x00,
  0x00, 0x60, 0x00, 0x01, 0x00, 0xf3, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49,
  0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xb4, 0x0f, 0x00,
  0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xea, 0x03, 0x00,
  0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00,
  0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32,
  0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b,
  0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32,
  0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14,
  0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e,
  0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5,
  0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8,
  0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x30, 0x00, 0x00,
  0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4,
  0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c,
  0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x90, 0xc1, 0x08, 0x40, 0x09, 0x00,
  0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40,
  0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4,
  0x20, 0x03, 0x31, 0x0c, 0xc3, 0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06,
  0x62, 0x0a, 0x31, 0x10, 0xc3, 0x40, 0x4e, 0x51, 0x06, 0x62, 0x18, 0x86,
  0x61, 0x18, 0x86, 0x81, 0xa0, 0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90,
  0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x31, 0x0c,
  0xc3, 0x40, 0xc5, 0x3d, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x7e, 0x08,
  0x34, 0xc3, 0x42, 0xa0, 0x60, 0x2a, 0x84, 0x44, 0x50, 0x04, 0x55, 0xa5,
  0x18, 0x88, 0x61, 0x18, 0xe8, 0x9a, 0x23, 0x08, 0x8a, 0x41, 0x11, 0x05,
  0x41, 0x64, 0xa4, 0x0d, 0x04, 0x0c, 0x23, 0x10, 0xc3, 0x30, 0xc2, 0x30,
  0xe4, 0x80, 0x97, 0x04, 0xdd, 0x55, 0x87, 0x23, 0x4d, 0x0b, 0x80, 0x39,
  0xd4, 0xe4, 0xa7, 0x40, 0x04, 0x30, 0xc4, 0x44, 0x44, 0x12, 0x6a, 0x3a,
  0xcf, 0x1b, 0xbe, 0xef, 0xf3, 0xbc, 0x0e, 0xfc, 0x40, 0x0a, 0xd3, 0x81,
  0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87,
  0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0,
  0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40,
  0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10,
  0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2,
  0x28, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
  0xe4, 0x61, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0xe3, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x4f, 0x05, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x0b, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x1a, 0x10, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x81, 0x00, 0x11, 0x00, 0x00,
  0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26,
  0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x18, 0x0a, 0xd8,
  0xa0, 0x0c, 0xca, 0xa3, 0x1c, 0x8a, 0x80, 0x8a, 0x92, 0x18, 0x01, 0x28,
  0x84, 0x32, 0x28, 0x02, 0x12, 0x67, 0x00, 0x68, 0x1c, 0xcb, 0x61, 0x18,
  0xf8, 0x1f, 0xe0, 0x7f, 0x80, 0xff, 0x01, 0xfe, 0x87, 0x7b, 0xb8, 0x87,
  0x7b, 0x00, 0x02, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00,
  0x00, 0x67, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13,
  0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b,
  0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b,
  0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9,
  0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13,
  0x04, 0x42, 0x99, 0x20, 0x10, 0xcb, 0x06, 0x61, 0x20, 0x26, 0x08, 0x04,
  0xb3, 0x41, 0x18, 0x0c, 0x0a, 0x76, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26,
  0x08, 0x62, 0x70, 0x11, 0x98, 0x20, 0x10, 0xcd, 0x06, 0x84, 0x50, 0x16,
  0x82, 0x18, 0x18, 0x60, 0x43, 0xd0, 0x6c, 0x20, 0x00, 0xc0, 0x01, 0x26,
  0x08, 0x63, 0x80, 0x6d, 0x08, 0xa0, 0x09, 0x82, 0x00, 0x30, 0xb3, 0x9a,
  0x12, 0x0a, 0x9b, 0x4b, 0x1b, 0xb3, 0x2a, 0x93, 0xa3, 0x2b, 0xc3, 0x63,
  0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0xb3, 0x1a, 0x13, 0x72, 0xe3,
  0x32, 0x65, 0xf5, 0x05, 0xf5, 0x36, 0x97, 0x46, 0x97, 0xf6, 0xe6, 0x36,
  0x41, 0x28, 0xa4, 0x09, 0x42, 0x31, 0x6d, 0x08, 0x88, 0x09, 0x42, 0x41,
  0x4d, 0x10, 0x08, 0x67, 0x82, 0x40, 0x3c, 0x1b, 0x84, 0x4c, 0xdb, 0xb0,
  0x10, 0x54, 0x65, 0x5d, 0xd6, 0x80, 0x11, 0xd6, 0x46, 0xc3, 0xe9, 0x49,
  0xaa, 0x29, 0x88, 0x69, 0x82, 0x50, 0x54, 0x13, 0x04, 0x02, 0xda, 0x20,
  0x64, 0xdf, 0x86, 0x65, 0xe8, 0x2a, 0xeb, 0xb2, 0x06, 0x6f, 0xb0, 0xc0,
  0x60, 0x82, 0x40, 0x44, 0x2c, 0x86, 0x9e, 0x98, 0x9e, 0xa4, 0x36, 0x2c,
  0x62, 0x30, 0x06, 0x95, 0x75, 0x59, 0x03, 0x26, 0x06, 0xd6, 0xb6, 0x61,
  0xe0, 0xc2, 0x80, 0x0c, 0x26, 0x08, 0x85, 0xb5, 0x61, 0x21, 0xc6, 0xa0,
  0xb2, 0x2e, 0x33, 0x18, 0x30, 0xc2, 0xda, 0x36, 0x04, 0xc3, 0x86, 0x65,
  0x18, 0x83, 0xca, 0x42, 0x03, 0x33, 0x18, 0xb0, 0xc1, 0xda, 0x36, 0x2c,
  0x62, 0x40, 0x55, 0xde, 0x85, 0x0d, 0x98, 0x18, 0x58, 0xdb, 0x86, 0xe1,
  0x0c, 0xd2, 0x40, 0x0d, 0x36, 0x0c, 0x65, 0xb0, 0x06, 0xc0, 0x86, 0x42,
  0x9a, 0xd8, 0xe0, 0x01, 0xaa, 0xb0, 0xb1, 0xd9, 0xb5, 0xb9, 0xa4, 0x91,
  0x95, 0xb9, 0xd1, 0x4d, 0x09, 0x82, 0x2a, 0x64, 0x78, 0x2e, 0x76, 0x65,
  0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x02, 0xa2, 0x09, 0x19, 0x9e, 0x8b,
  0x5d, 0x18, 0x9b, 0x5d, 0x99, 0xdc, 0x94, 0xc0, 0xa8, 0x43, 0x86, 0xe7,
  0x32, 0x87, 0x16, 0x46, 0x56, 0x26, 0xd7, 0xf4, 0x46, 0x56, 0xc6, 0x36,
  0x25, 0x40, 0xca, 0x90, 0xe1, 0xb9, 0xc8, 0x95, 0xcd, 0xbd, 0xd5, 0xc9,
  0x8d, 0x95, 0xcd, 0x4d, 0x09, 0x9c, 0x3a, 0x64, 0x78, 0x2e, 0x76, 0x69,
  0x65, 0x77, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x02, 0xa8,
  0x0e, 0x19, 0x9e, 0x4b, 0x99, 0x1b, 0x9d, 0x5c, 0x1e, 0xd4, 0x5b, 0x9a,
  0x1b, 0xdd, 0xdc, 0x94, 0x80, 0x0d, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00,
  0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c,
  0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80,
  0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed,
  0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d,
  0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83,
  0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78,
  0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70,
  0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc,
  0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3,
  0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c,
  0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83,
  0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03,
  0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68,
  0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60,
  0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80,
  0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98,
  0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec,
  0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c,
  0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d,
  0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43,
  0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03,
  0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03,
  0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28,
  0x87, 0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed,
  0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c,
  0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c,
  0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00,
  0x00, 0x71, 0x20, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x06, 0x90, 0xbd,
  0xec, 0x06, 0x48, 0x88, 0xf0, 0x12, 0xd1, 0x44, 0x5c, 0x25, 0x62, 0x1c,
  0x13, 0xd2, 0x18, 0xaf, 0xb0, 0x35, 0x56, 0x00, 0x0d, 0x97, 0xef, 0x3c,
  0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0xdb, 0xc1, 0x36, 0x5c,
  0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0x94,
  0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6, 0x25, 0x48, 0xc3, 0xe5, 0x3b,
  0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x03,
  0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d, 0x9b,
  0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xe1, 0x7e, 0x71, 0xdb,
  0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c,
  0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x02, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4b,
  0x93, 0x13, 0x11, 0x28, 0x35, 0x3d, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x08,
  0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x44, 0x34, 0x21, 0x40, 0x84, 0xf9,
  0xc5, 0x6d, 0x1b, 0xc1, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x54, 0x03, 0x44,
  0x98, 0x5f, 0xdc, 0x36, 0x00, 0x61, 0x20, 0x00, 0x00, 0x54, 0x02, 0x00,
  0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00,
  0x00, 0x94, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14, 0x5c, 0x71, 0x14,
  0x4c, 0x71, 0x95, 0x5d, 0x29, 0x14, 0xc2, 0x0c, 0x40, 0xc9, 0x94, 0x5b,
  0xa9, 0x94, 0x4b, 0x19, 0x95, 0x5c, 0x81, 0x94, 0x48, 0x61, 0x94, 0x49,
  0xa1, 0x94, 0x44, 0x51, 0x14, 0x44, 0x59, 0x14, 0x0b, 0x0d, 0x63, 0x04,
  0x20, 0x08, 0x82, 0xf8, 0x37, 0x46, 0x00, 0x82, 0x20, 0x88, 0xff, 0xc2,
  0x18, 0x01, 0x08, 0x82, 0x20, 0x08, 0x06, 0x23, 0x00, 0x63, 0x04, 0x20,
  0x08, 0x82, 0x20, 0x28, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xa0,
  0xbd, 0x01, 0x24, 0x06, 0x6d, 0xd0, 0x06, 0xdf, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x18, 0x78, 0x80, 0xa1, 0x81, 0x1b, 0x98, 0xc1, 0x35, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1e, 0x64, 0x69, 0xf0, 0x06, 0x60,
  0x80, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xa1, 0x07, 0x9a, 0x1a,
  0xc0, 0x41, 0x19, 0x64, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xec,
  0xc1, 0xb6, 0x06, 0x71, 0x70, 0x06, 0xda, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0x7c, 0xc0, 0xcd, 0x81, 0x1c, 0xa8, 0xc1, 0x36, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x46, 0x1f, 0x74, 0x74, 0x30, 0x07, 0x64, 0xc0,
  0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xe1, 0x07, 0x5e, 0x1d, 0xd0,
  0x41, 0x1a, 0x74, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xfc, 0xc1,
  0x57, 0x07, 0x75, 0xd0, 0x06, 0xde, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0xa0, 0x00, 0x06, 0x76, 0x60, 0x07, 0x67, 0xf0, 0x8d, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0x11, 0x0a, 0x61, 0x70, 0x07, 0x77, 0xc0, 0x06,
  0x60, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x28, 0x88, 0x01,
  0x1e, 0xe0, 0x81, 0x1b, 0x84, 0x81, 0x1d, 0x8f, 0x7c, 0xec, 0x80, 0xe4,
  0x63, 0x47, 0x24, 0x1f, 0x1b, 0x26, 0xf8, 0xd8, 0x40, 0xc1, 0xc7, 0x86,
  0x0a, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0x8d, 0xc2, 0x1a,
  0x48, 0x7b, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x15,
  0x2a, 0xc0, 0xc1, 0x65, 0x06, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0x50, 0xb5, 0x42, 0x1d, 0x70, 0x6a, 0x30, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x60, 0x4e, 0x26,
  0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x64, 0x81, 0x0f, 0x32,
  0x27, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6b, 0x16, 0xfa, 0x20,
  0x73, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x68, 0xc1, 0x0f,
  0x32, 0x27, 0xb0, 0xa6, 0x93, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x5c, 0xb6, 0x00, 0x0a, 0x5d, 0x13, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0xc1, 0x75, 0x0b, 0xa1, 0xd0, 0x35, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x5c, 0xb8, 0x20, 0x0a, 0x5d, 0x13, 0x18, 0x13, 0x06, 0xf2, 0x19,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x4b, 0x17, 0x48, 0x21, 0x0c, 0x98,
  0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xae, 0x5d, 0x28, 0x85, 0x30,
  0x60, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x78, 0xc1, 0x14,
  0xc2, 0x80, 0x09, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xf2, 0x05,
  0x53, 0x68, 0x03, 0x3d, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x04, 0x1b, 0x9a, 0xf8, 0xd8, 0xa0, 0xc4, 0xc7, 0x86, 0x23,
  0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xa0, 0xa4, 0x03, 0x2a, 0x0c,
  0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xe9,
  0xa0, 0x0a, 0x81, 0x15, 0x81, 0x7c, 0xac, 0x10, 0xe4, 0x63, 0xc5, 0x20,
  0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xd4, 0x41, 0x16, 0xf2,
  0xa0, 0x14, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06,
  0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0x77, 0xb0, 0x85, 0x3e,
  0x40, 0x85, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x4a, 0x1e, 0x74, 0x21, 0x14,
  0x68, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x6c, 0xb1, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x65,
  0x0f, 0xe0, 0x60, 0x07, 0x4b, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xd7, 0x3d, 0x84, 0x83, 0x1d, 0x2c, 0x81, 0x29, 0x79, 0x20, 0x9f, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xf2, 0x61, 0x1c, 0xf2, 0x40, 0x09,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0xd2, 0x07, 0x72, 0xc8, 0x03,
  0x25, 0xb0, 0x84, 0x0f, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0x17, 0x3f, 0x98, 0x03, 0x1f, 0x24, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x5c, 0xfd, 0x70, 0x0e, 0x7c, 0x90, 0x04, 0x23, 0x06, 0x0b, 0x00,
  0x82, 0x60, 0xa0, 0x8c, 0x84, 0x38, 0x1c, 0x44, 0x70, 0x10, 0xc1, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0x23, 0x41, 0x0e, 0x81, 0x05, 0x89,
  0x7c, 0x4c, 0x38, 0xe4, 0x63, 0x43, 0x21, 0x9f, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xa8, 0x48, 0x82, 0x1d, 0x66, 0xa1, 0x1f, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0x2a, 0x94, 0x80, 0x87, 0x5b, 0x18, 0x89, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x83, 0x8a, 0x25, 0xe8, 0x61, 0x17, 0xca, 0x61, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x2c, 0x0d, 0x96, 0xf8, 0x58,
  0x1a, 0x2c, 0xf1, 0xb1, 0x34, 0x58, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20,
  0x08, 0x06, 0xca, 0x4d, 0xd8, 0xc3, 0x20, 0x04, 0x83, 0x10, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0x01, 0x73, 0x13, 0xf8, 0x10, 0x58, 0x40, 0xc8,
  0xc7, 0x04, 0x42, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0xdd,
  0xc4, 0x3f, 0x98, 0x43, 0x3f, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0x3b,
  0x31, 0x12, 0xea, 0x20, 0x13, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd5, 0x4f,
  0x9c, 0x84, 0x3b, 0xdc, 0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0x18, 0x1f, 0x2c, 0xf1, 0x31, 0x3e, 0x58, 0xe2, 0x63,
  0x7c, 0xb0, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x14, 0xb5,
  0x48, 0x89, 0x41, 0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0x46, 0x2d, 0x56, 0x22, 0xb0, 0x80, 0x90, 0x8f, 0x09, 0x84, 0x7c,
  0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x52, 0x0b, 0x99, 0xc8, 0x87,
  0x98, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xdc, 0xc2, 0x26, 0xfa, 0xa1,
  0x24, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0xb9, 0xd0, 0x89, 0x90, 0x40,
  0x89, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0,
  0x57, 0x58, 0xe2, 0x63, 0xaf, 0xb0, 0xc4, 0xc7, 0x5e, 0x61, 0x89, 0xcf,
  0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x28, 0x7d, 0xc1, 0x13, 0x83, 0x10,
  0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x4c, 0x5f, 0xf8,
  0x44, 0x60, 0x01, 0x21, 0x1f, 0x13, 0x08, 0xf9, 0x58, 0x4b, 0xdc, 0x41,
  0x7c, 0xcc, 0x25, 0xee, 0x20, 0x3e, 0xf6, 0x12, 0x66, 0x10, 0x1f, 0x83,
  0x09, 0x33, 0x88, 0x8f, 0xc5, 0x44, 0x15, 0x1f, 0x93, 0x89, 0x2a, 0x3e,
  0x26, 0x0a, 0x7e, 0x20, 0x1f, 0xa3, 0x89, 0x20, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x70, 0x91, 0x86, 0x5b, 0x20, 0xa3, 0x10, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0xc1, 0x55, 0x1a, 0x6f, 0x81, 0x8c, 0x42, 0x60,
  0xa6, 0xf0, 0x06, 0xf2, 0x31, 0x9c, 0x08, 0xe2, 0x33, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x17, 0x6a, 0xc8, 0x85, 0x72, 0x0a, 0xc1, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x5c, 0xa9, 0x31, 0x17, 0xca, 0x29, 0x04, 0xa6,
  0x0a, 0x60, 0x20, 0x1f, 0xe3, 0x89, 0x20, 0x3e, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x70, 0xb1, 0x86, 0x5d, 0x30, 0xab, 0x10, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0xc1, 0xd5, 0x1a, 0x77, 0xc1, 0xac, 0x42, 0x60, 0x7f,
  0xe0, 0x0a, 0xf2, 0xb1, 0x80, 0x0f, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0x17, 0x6c, 0xe8, 0x05, 0x1f, 0xbc, 0x42, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x57, 0x6c, 0xec, 0x05, 0x1f, 0xbc, 0x42, 0x60,
  0x70, 0x20, 0x0b, 0xf2, 0xb1, 0xa0, 0x0d, 0xe4, 0x33, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x17, 0x6d, 0xf8, 0x45, 0x1b, 0xcc, 0x42, 0x30, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x6d, 0xfc, 0x45, 0x1b, 0xcc, 0x42,
  0x60, 0x61, 0x60, 0x0b, 0xf2, 0xb1, 0xc0, 0x93, 0xcf, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x5c, 0xb8, 0x21, 0x1a, 0xde, 0x2d, 0x04, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x70, 0xe5, 0xc6, 0x68, 0x78, 0xb7, 0x10, 0x0c,
  0x47, 0x54, 0x6c, 0x41, 0x7c, 0xc3, 0x11, 0x52, 0x5b, 0x10, 0xdf, 0x70,
  0xc4, 0xe3, 0x16, 0xc4, 0x37, 0xdd, 0xf0, 0x16, 0x72, 0x31, 0x4c, 0x37,
  0xc0, 0xc5, 0x5c, 0x0c, 0xd3, 0x0d, 0x71, 0x41, 0x17, 0x83, 0x0d, 0x9b,
  0x7c, 0x6c, 0xc0, 0xe4, 0x63, 0x43, 0x25, 0x9f, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xa8, 0xc8, 0x83, 0x35, 0xe6, 0x42, 0x37, 0x46, 0x13, 0x82,
  0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0xf4, 0x30, 0x0d, 0xea,
  0x2e, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0x49, 0x8f, 0xd3, 0x88,
  0xf0, 0x62, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0xf5, 0x40, 0x0d,
  0x27, 0x2f, 0x6c, 0x58, 0xe4, 0x63, 0xc3, 0x22, 0x1f, 0x1b, 0x16, 0xf9,
  0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0xf3, 0x1e, 0xad, 0x31, 0x8c,
  0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x03, 0x1f, 0xae, 0x31, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0x01, 0x13, 0x1f, 0xaf, 0x31, 0xd8, 0xa0, 0xc8,
  0xc7, 0x86, 0x45, 0x3e, 0x36, 0x30, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x03, 0xa6, 0x3e, 0x68, 0x63, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0xc6, 0x3e, 0x6a, 0x63, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03,
  0xe6, 0x3e, 0x6c, 0x63, 0xb0, 0xe1, 0x0d, 0xe4, 0x63, 0x03, 0x1b, 0xc8,
  0xc7, 0x86, 0x34, 0x90, 0x8f, 0x5d, 0xef, 0x20, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0xf0, 0x43, 0x3c, 0xae, 0x5e, 0x08, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0xca, 0x8f, 0xf1, 0xb8, 0x56, 0x21, 0x30,
  0x2d, 0x1e, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x7e,
  0x94, 0x87, 0xf6, 0x0b, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c,
  0xfc, 0x61, 0x1e, 0x5a, 0x2b, 0x04, 0xd6, 0xcd, 0x83, 0x7c, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0xf2, 0x0f, 0xf4, 0xe8, 0xc2, 0x21, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xeb, 0x3f, 0xd2, 0xa3, 0x7b, 0x85,
  0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa, 0x10, 0x49, 0x0f, 0xd8,
  0xe8, 0x8f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0xb0, 0x61, 0x91, 0x8f, 0x0d, 0x89, 0x7c, 0x6c, 0x38, 0xe4, 0x33, 0x62,
  0x70, 0x00, 0x20, 0x08, 0x06, 0x15, 0x8a, 0xc0, 0xc7, 0x6d, 0x94, 0xc8,
  0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0x31,
  0xc0, 0xc7, 0x8e, 0x01, 0x3e, 0x76, 0x0c, 0xf0, 0x31, 0x4d, 0x24, 0xe4,
  0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x8b, 0xe4, 0x87, 0x06,
  0x0f, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x30, 0xa2, 0x1f,
  0x9a, 0x2f, 0x04, 0xd6, 0x91, 0x84, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0xe0, 0x92, 0x11, 0xfe, 0xe8, 0xe4, 0x21, 0x18, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x6b, 0x46, 0xfa, 0xa3, 0x03, 0x87, 0xc0, 0xc0, 0xc0,
  0x24, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x8d, 0xfc,
  0x07, 0x18, 0xd0, 0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97,
  0x8d, 0x80, 0x08, 0x18, 0x88, 0x43, 0x30, 0x9a, 0x40, 0x07, 0xc0, 0x68,
  0x42, 0x1d, 0x04, 0xa3, 0x09, 0x76, 0x20, 0xd8, 0xa0, 0xc8, 0xc7, 0x06,
  0x44, 0x3e, 0x36, 0x18, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83,
  0xca, 0x47, 0x4c, 0xa4, 0x3d, 0xe6, 0x63, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0xaa, 0x31, 0x59, 0x11, 0xf9, 0x20, 0x91, 0xd1, 0x84,
  0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xd0, 0x04, 0x46, 0xee, 0x43,
  0x46, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61,
  0x34, 0x81, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x6a, 0x93,
  0x1a, 0xe1, 0x8f, 0x18, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0xb0, 0x29, 0x3f, 0xe4, 0x33, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x9c, 0xf0, 0x48, 0x7e, 0x4c, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x73, 0xd2, 0x23, 0xf9, 0x31,
  0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xd1, 0x89, 0x8f, 0xe4,
  0xc7, 0x14, 0x98, 0xd4, 0x1f, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0xcb, 0x4e, 0xc0, 0xa4, 0x3f, 0xa4, 0x60, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0xae, 0x3b, 0x09, 0x93, 0xfe, 0x90, 0x82, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0xf0, 0x44, 0x4c, 0xfa, 0x43, 0x0a, 0x2c, 0x0a,
  0x11, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xa5, 0x27, 0x64,
  0x12, 0x22, 0x51, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x9e,
  0x94, 0x49, 0x88, 0x44, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c,
  0x7c, 0x62, 0x26, 0x21, 0x12, 0x05, 0x06, 0x95, 0x88, 0x7c, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0xf2, 0x13, 0x34, 0x29, 0x11, 0x28, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xeb, 0x4f, 0xd2, 0xa4, 0x44, 0xa0,
  0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x50, 0x51, 0x93, 0x12,
  0x81, 0x82, 0xd1, 0x84, 0x50, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1,
  0xa0, 0x1a, 0x95, 0x35, 0x91, 0x11, 0x37, 0x19, 0x4d, 0x08, 0x80, 0xd1,
  0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x18, 0x31, 0x68,
  0x00, 0x10, 0x04, 0x03, 0x28, 0x55, 0xe8, 0xe4, 0x45, 0x5c, 0xa4, 0x45,
  0x58, 0x84, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18,
  0x56, 0x01, 0x95, 0xc0, 0xfc, 0x00, 0x47, 0xe4, 0x63, 0x7e, 0x80, 0x23,
  0xf2, 0x31, 0x3f, 0xc0, 0x11, 0xf9, 0xd8, 0x82, 0x23, 0xf2, 0x19, 0x31,
  0x48, 0x00, 0x10, 0x04, 0x03, 0x64, 0x56, 0xea, 0x44, 0x55, 0x54, 0x45,
  0x54, 0x88, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x66, 0xa5, 0x4e,
  0x54, 0x45, 0x55, 0xf6, 0x64, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03,
  0x64, 0x56, 0xea, 0x44, 0x55, 0x54, 0xe5, 0x4f, 0x84, 0x11, 0x83, 0x04,
  0x00, 0x41, 0x30, 0x40, 0x66, 0xa5, 0x4e, 0x54, 0x45, 0x55, 0x40, 0x25,
  0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x64, 0x56, 0xea, 0x64, 0x55,
  0x54, 0x45, 0x54, 0xe6, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90,
  0x59, 0xa9, 0x93, 0x55, 0x51, 0x95, 0x3d, 0x91, 0x83, 0x11, 0x83, 0x04,
  0x00, 0x41, 0x30, 0x40, 0x66, 0xa5, 0x4e, 0x56, 0x45, 0x55, 0xfe, 0x24,
  0x0e, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x99, 0x95, 0x3a, 0x59,
  0x15, 0x55, 0x01, 0x95, 0x62, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90,
  0x59, 0xa9, 0x13, 0x52, 0x51, 0x15, 0x51, 0xc9, 0x46, 0x0c, 0x12, 0x00,
  0x04, 0xc1, 0x00, 0x99, 0x95, 0x3a, 0x21, 0x15, 0x55, 0xd9, 0x93, 0x6a,
  0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x59, 0xa9, 0x13, 0x52, 0x51,
  0x95, 0x3f, 0x89, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x99, 0x95,
  0x3a, 0x21, 0x15, 0x55, 0x01, 0x95, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00
};
