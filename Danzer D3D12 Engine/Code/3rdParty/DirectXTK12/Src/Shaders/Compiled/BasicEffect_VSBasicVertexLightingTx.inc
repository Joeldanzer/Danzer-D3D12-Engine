#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; SV_Position              0   xyzw        3      POS   float   xyzw
;
; shader debug name: Compiled\BasicEffect_VSBasicVertexLightingTx.pdb
; shader hash: 9b48050058563dfd612afce910f66e97
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 10, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6 }
;   output 1 depends on inputs: { 4, 5, 6 }
;   output 2 depends on inputs: { 4, 5, 6 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3 }
;   output 13 depends on inputs: { 0, 1, 2, 3 }
;   output 14 depends on inputs: { 0, 1, 2, 3 }
;   output 15 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSBasicVertexLightingTx() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %12 = extractvalue %dx.types.CBufRet.f32 %11, 0
  %13 = extractvalue %dx.types.CBufRet.f32 %11, 1
  %14 = extractvalue %dx.types.CBufRet.f32 %11, 2
  %15 = extractvalue %dx.types.CBufRet.f32 %11, 3
  %16 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %17 = extractvalue %dx.types.CBufRet.f32 %16, 0
  %18 = extractvalue %dx.types.CBufRet.f32 %16, 1
  %19 = extractvalue %dx.types.CBufRet.f32 %16, 2
  %20 = extractvalue %dx.types.CBufRet.f32 %16, 3
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %25 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %26 = fmul fast float %12, %7
  %27 = call float @dx.op.tertiary.f32(i32 46, float %8, float %13, float %26)  ; FMad(a,b,c)
  %28 = call float @dx.op.tertiary.f32(i32 46, float %9, float %14, float %27)  ; FMad(a,b,c)
  %29 = call float @dx.op.tertiary.f32(i32 46, float %10, float %15, float %28)  ; FMad(a,b,c)
  %30 = fmul fast float %17, %7
  %31 = call float @dx.op.tertiary.f32(i32 46, float %8, float %18, float %30)  ; FMad(a,b,c)
  %32 = call float @dx.op.tertiary.f32(i32 46, float %9, float %19, float %31)  ; FMad(a,b,c)
  %33 = call float @dx.op.tertiary.f32(i32 46, float %10, float %20, float %32)  ; FMad(a,b,c)
  %34 = fmul fast float %22, %7
  %35 = call float @dx.op.tertiary.f32(i32 46, float %8, float %23, float %34)  ; FMad(a,b,c)
  %36 = call float @dx.op.tertiary.f32(i32 46, float %9, float %24, float %35)  ; FMad(a,b,c)
  %37 = call float @dx.op.tertiary.f32(i32 46, float %10, float %25, float %36)  ; FMad(a,b,c)
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = extractvalue %dx.types.CBufRet.f32 %38, 1
  %41 = extractvalue %dx.types.CBufRet.f32 %38, 2
  %42 = fsub fast float %39, %29
  %43 = fsub fast float %40, %33
  %44 = fsub fast float %41, %37
  %45 = call float @dx.op.dot3.f32(i32 55, float %42, float %43, float %44, float %42, float %43, float %44)  ; Dot3(ax,ay,az,bx,by,bz)
  %46 = call float @dx.op.unary.f32(i32 25, float %45)  ; Rsqrt(value)
  %47 = fmul fast float %42, %46
  %48 = fmul fast float %43, %46
  %49 = fmul fast float %44, %46
  %50 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.f32 %50, 0
  %52 = extractvalue %dx.types.CBufRet.f32 %50, 1
  %53 = extractvalue %dx.types.CBufRet.f32 %50, 2
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = fmul fast float %51, %4
  %63 = call float @dx.op.tertiary.f32(i32 46, float %5, float %52, float %62)  ; FMad(a,b,c)
  %64 = call float @dx.op.tertiary.f32(i32 46, float %6, float %53, float %63)  ; FMad(a,b,c)
  %65 = fmul fast float %55, %4
  %66 = call float @dx.op.tertiary.f32(i32 46, float %5, float %56, float %65)  ; FMad(a,b,c)
  %67 = call float @dx.op.tertiary.f32(i32 46, float %6, float %57, float %66)  ; FMad(a,b,c)
  %68 = fmul fast float %59, %4
  %69 = call float @dx.op.tertiary.f32(i32 46, float %5, float %60, float %68)  ; FMad(a,b,c)
  %70 = call float @dx.op.tertiary.f32(i32 46, float %6, float %61, float %69)  ; FMad(a,b,c)
  %71 = call float @dx.op.dot3.f32(i32 55, float %64, float %67, float %70, float %64, float %67, float %70)  ; Dot3(ax,ay,az,bx,by,bz)
  %72 = call float @dx.op.unary.f32(i32 25, float %71)  ; Rsqrt(value)
  %73 = fmul fast float %72, %64
  %74 = fmul fast float %72, %67
  %75 = fmul fast float %72, %70
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %80 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.f32 %80, 0
  %82 = extractvalue %dx.types.CBufRet.f32 %80, 1
  %83 = extractvalue %dx.types.CBufRet.f32 %80, 2
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = fsub fast float %47, %77
  %89 = fsub fast float %48, %78
  %90 = fsub fast float %49, %79
  %91 = call float @dx.op.dot3.f32(i32 55, float %88, float %89, float %90, float %88, float %89, float %90)  ; Dot3(ax,ay,az,bx,by,bz)
  %92 = call float @dx.op.unary.f32(i32 25, float %91)  ; Rsqrt(value)
  %93 = fmul fast float %92, %89
  %94 = fmul fast float %92, %90
  %95 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %96 = extractvalue %dx.types.CBufRet.f32 %95, 0
  %97 = extractvalue %dx.types.CBufRet.f32 %95, 1
  %98 = extractvalue %dx.types.CBufRet.f32 %95, 2
  %99 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.f32 %99, 0
  %101 = extractvalue %dx.types.CBufRet.f32 %99, 1
  %102 = extractvalue %dx.types.CBufRet.f32 %99, 2
  %103 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %104 = extractvalue %dx.types.CBufRet.f32 %103, 0
  %105 = extractvalue %dx.types.CBufRet.f32 %103, 1
  %106 = extractvalue %dx.types.CBufRet.f32 %103, 2
  %107 = fsub fast float %47, %96
  %108 = fsub fast float %48, %97
  %109 = fsub fast float %49, %98
  %110 = call float @dx.op.dot3.f32(i32 55, float %107, float %108, float %109, float %107, float %108, float %109)  ; Dot3(ax,ay,az,bx,by,bz)
  %111 = call float @dx.op.unary.f32(i32 25, float %110)  ; Rsqrt(value)
  %112 = fmul fast float %111, %108
  %113 = fmul fast float %111, %109
  %114 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %115 = extractvalue %dx.types.CBufRet.f32 %114, 0
  %116 = extractvalue %dx.types.CBufRet.f32 %114, 1
  %117 = extractvalue %dx.types.CBufRet.f32 %114, 2
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 0
  %120 = extractvalue %dx.types.CBufRet.f32 %118, 1
  %121 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %124 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %125 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %126 = fsub fast float %47, %115
  %127 = fsub fast float %48, %116
  %128 = fsub fast float %49, %117
  %129 = call float @dx.op.dot3.f32(i32 55, float %126, float %127, float %128, float %126, float %127, float %128)  ; Dot3(ax,ay,az,bx,by,bz)
  %130 = call float @dx.op.unary.f32(i32 25, float %129)  ; Rsqrt(value)
  %131 = fmul fast float %130, %127
  %132 = fmul fast float %130, %128
  %133 = fsub fast float -0.000000e+00, %78
  %134 = fsub fast float -0.000000e+00, %79
  %135 = fsub fast float -0.000000e+00, %97
  %136 = fsub fast float -0.000000e+00, %98
  %137 = fsub fast float -0.000000e+00, %116
  %138 = fsub fast float -0.000000e+00, %117
  %139 = fmul fast float %73, %77
  %140 = fsub fast float -0.000000e+00, %139
  %141 = call float @dx.op.tertiary.f32(i32 46, float %133, float %74, float %140)  ; FMad(a,b,c)
  %142 = call float @dx.op.tertiary.f32(i32 46, float %134, float %75, float %141)  ; FMad(a,b,c)
  %143 = fmul fast float %73, %96
  %144 = fsub fast float -0.000000e+00, %143
  %145 = call float @dx.op.tertiary.f32(i32 46, float %135, float %74, float %144)  ; FMad(a,b,c)
  %146 = call float @dx.op.tertiary.f32(i32 46, float %136, float %75, float %145)  ; FMad(a,b,c)
  %147 = fmul fast float %73, %115
  %148 = fsub fast float -0.000000e+00, %147
  %149 = call float @dx.op.tertiary.f32(i32 46, float %137, float %74, float %148)  ; FMad(a,b,c)
  %150 = call float @dx.op.tertiary.f32(i32 46, float %138, float %75, float %149)  ; FMad(a,b,c)
  %151 = fmul fast float %88, %73
  %152 = fmul fast float %151, %92
  %153 = call float @dx.op.tertiary.f32(i32 46, float %93, float %74, float %152)  ; FMad(a,b,c)
  %154 = call float @dx.op.tertiary.f32(i32 46, float %94, float %75, float %153)  ; FMad(a,b,c)
  %155 = fmul fast float %107, %73
  %156 = fmul fast float %155, %111
  %157 = call float @dx.op.tertiary.f32(i32 46, float %112, float %74, float %156)  ; FMad(a,b,c)
  %158 = call float @dx.op.tertiary.f32(i32 46, float %113, float %75, float %157)  ; FMad(a,b,c)
  %159 = fmul fast float %126, %73
  %160 = fmul fast float %159, %130
  %161 = call float @dx.op.tertiary.f32(i32 46, float %131, float %74, float %160)  ; FMad(a,b,c)
  %162 = call float @dx.op.tertiary.f32(i32 46, float %132, float %75, float %161)  ; FMad(a,b,c)
  %163 = fcmp fast olt float %142, 0.000000e+00
  %164 = fcmp fast olt float %146, 0.000000e+00
  %165 = fcmp fast olt float %150, 0.000000e+00
  %166 = select i1 %163, float 0.000000e+00, float 1.000000e+00
  %167 = select i1 %164, float 0.000000e+00, float 1.000000e+00
  %168 = select i1 %165, float 0.000000e+00, float 1.000000e+00
  %169 = fmul fast float %166, %142
  %170 = fmul fast float %167, %146
  %171 = fmul fast float %168, %150
  %172 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %173 = extractvalue %dx.types.CBufRet.f32 %172, 3
  %174 = call float @dx.op.binary.f32(i32 35, float %154, float 0.000000e+00)  ; FMax(a,b)
  %175 = call float @dx.op.binary.f32(i32 35, float %158, float 0.000000e+00)  ; FMax(a,b)
  %176 = call float @dx.op.binary.f32(i32 35, float %162, float 0.000000e+00)  ; FMax(a,b)
  %177 = fmul fast float %174, %166
  %178 = fmul fast float %175, %167
  %179 = fmul fast float %176, %168
  %180 = call float @dx.op.unary.f32(i32 23, float %177)  ; Log(value)
  %181 = call float @dx.op.unary.f32(i32 23, float %178)  ; Log(value)
  %182 = call float @dx.op.unary.f32(i32 23, float %179)  ; Log(value)
  %183 = fmul fast float %180, %173
  %184 = fmul fast float %181, %173
  %185 = fmul fast float %182, %173
  %186 = call float @dx.op.unary.f32(i32 21, float %183)  ; Exp(value)
  %187 = call float @dx.op.unary.f32(i32 21, float %184)  ; Exp(value)
  %188 = call float @dx.op.unary.f32(i32 21, float %185)  ; Exp(value)
  %189 = fmul fast float %186, %142
  %190 = fmul fast float %187, %146
  %191 = fmul fast float %188, %150
  %192 = fmul fast float %169, %81
  %193 = call float @dx.op.tertiary.f32(i32 46, float %170, float %100, float %192)  ; FMad(a,b,c)
  %194 = call float @dx.op.tertiary.f32(i32 46, float %171, float %119, float %193)  ; FMad(a,b,c)
  %195 = fmul fast float %169, %82
  %196 = call float @dx.op.tertiary.f32(i32 46, float %170, float %101, float %195)  ; FMad(a,b,c)
  %197 = call float @dx.op.tertiary.f32(i32 46, float %171, float %120, float %196)  ; FMad(a,b,c)
  %198 = fmul fast float %169, %83
  %199 = call float @dx.op.tertiary.f32(i32 46, float %170, float %102, float %198)  ; FMad(a,b,c)
  %200 = call float @dx.op.tertiary.f32(i32 46, float %171, float %121, float %199)  ; FMad(a,b,c)
  %201 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %202 = extractvalue %dx.types.CBufRet.f32 %201, 0
  %203 = extractvalue %dx.types.CBufRet.f32 %201, 1
  %204 = extractvalue %dx.types.CBufRet.f32 %201, 2
  %205 = fmul fast float %202, %194
  %206 = fmul fast float %203, %197
  %207 = fmul fast float %204, %200
  %208 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %209 = extractvalue %dx.types.CBufRet.f32 %208, 0
  %210 = extractvalue %dx.types.CBufRet.f32 %208, 1
  %211 = extractvalue %dx.types.CBufRet.f32 %208, 2
  %212 = fadd fast float %205, %209
  %213 = fadd fast float %206, %210
  %214 = fadd fast float %207, %211
  %215 = fmul fast float %189, %85
  %216 = call float @dx.op.tertiary.f32(i32 46, float %190, float %104, float %215)  ; FMad(a,b,c)
  %217 = call float @dx.op.tertiary.f32(i32 46, float %191, float %123, float %216)  ; FMad(a,b,c)
  %218 = fmul fast float %189, %86
  %219 = call float @dx.op.tertiary.f32(i32 46, float %190, float %105, float %218)  ; FMad(a,b,c)
  %220 = call float @dx.op.tertiary.f32(i32 46, float %191, float %124, float %219)  ; FMad(a,b,c)
  %221 = fmul fast float %189, %87
  %222 = call float @dx.op.tertiary.f32(i32 46, float %190, float %106, float %221)  ; FMad(a,b,c)
  %223 = call float @dx.op.tertiary.f32(i32 46, float %191, float %125, float %222)  ; FMad(a,b,c)
  %224 = extractvalue %dx.types.CBufRet.f32 %172, 0
  %225 = extractvalue %dx.types.CBufRet.f32 %172, 1
  %226 = extractvalue %dx.types.CBufRet.f32 %172, 2
  %227 = fmul fast float %224, %217
  %228 = fmul fast float %225, %220
  %229 = fmul fast float %226, %223
  %230 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %231 = extractvalue %dx.types.CBufRet.f32 %230, 0
  %232 = extractvalue %dx.types.CBufRet.f32 %230, 1
  %233 = extractvalue %dx.types.CBufRet.f32 %230, 2
  %234 = extractvalue %dx.types.CBufRet.f32 %230, 3
  %235 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %236 = extractvalue %dx.types.CBufRet.f32 %235, 0
  %237 = extractvalue %dx.types.CBufRet.f32 %235, 1
  %238 = extractvalue %dx.types.CBufRet.f32 %235, 2
  %239 = extractvalue %dx.types.CBufRet.f32 %235, 3
  %240 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %241 = extractvalue %dx.types.CBufRet.f32 %240, 0
  %242 = extractvalue %dx.types.CBufRet.f32 %240, 1
  %243 = extractvalue %dx.types.CBufRet.f32 %240, 2
  %244 = extractvalue %dx.types.CBufRet.f32 %240, 3
  %245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.f32 %245, 0
  %247 = extractvalue %dx.types.CBufRet.f32 %245, 1
  %248 = extractvalue %dx.types.CBufRet.f32 %245, 2
  %249 = extractvalue %dx.types.CBufRet.f32 %245, 3
  %250 = fmul fast float %231, %7
  %251 = call float @dx.op.tertiary.f32(i32 46, float %8, float %232, float %250)  ; FMad(a,b,c)
  %252 = call float @dx.op.tertiary.f32(i32 46, float %9, float %233, float %251)  ; FMad(a,b,c)
  %253 = call float @dx.op.tertiary.f32(i32 46, float %10, float %234, float %252)  ; FMad(a,b,c)
  %254 = fmul fast float %236, %7
  %255 = call float @dx.op.tertiary.f32(i32 46, float %8, float %237, float %254)  ; FMad(a,b,c)
  %256 = call float @dx.op.tertiary.f32(i32 46, float %9, float %238, float %255)  ; FMad(a,b,c)
  %257 = call float @dx.op.tertiary.f32(i32 46, float %10, float %239, float %256)  ; FMad(a,b,c)
  %258 = fmul fast float %241, %7
  %259 = call float @dx.op.tertiary.f32(i32 46, float %8, float %242, float %258)  ; FMad(a,b,c)
  %260 = call float @dx.op.tertiary.f32(i32 46, float %9, float %243, float %259)  ; FMad(a,b,c)
  %261 = call float @dx.op.tertiary.f32(i32 46, float %10, float %244, float %260)  ; FMad(a,b,c)
  %262 = fmul fast float %246, %7
  %263 = call float @dx.op.tertiary.f32(i32 46, float %8, float %247, float %262)  ; FMad(a,b,c)
  %264 = call float @dx.op.tertiary.f32(i32 46, float %9, float %248, float %263)  ; FMad(a,b,c)
  %265 = call float @dx.op.tertiary.f32(i32 46, float %10, float %249, float %264)  ; FMad(a,b,c)
  %266 = extractvalue %dx.types.CBufRet.f32 %201, 3
  %267 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %268 = extractvalue %dx.types.CBufRet.f32 %267, 0
  %269 = extractvalue %dx.types.CBufRet.f32 %267, 1
  %270 = extractvalue %dx.types.CBufRet.f32 %267, 2
  %271 = extractvalue %dx.types.CBufRet.f32 %267, 3
  %272 = call float @dx.op.dot4.f32(i32 56, float %7, float %8, float %9, float %10, float %268, float %269, float %270, float %271)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %273 = call float @dx.op.unary.f32(i32 7, float %272)  ; Saturate(value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %253)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %257)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %261)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %265)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %212)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %213)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %214)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %266)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %227)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %228)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %229)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %273)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %2)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!7 = !{[12 x i32] [i32 10, i32 16, i32 61680, i32 61680, i32 61680, i32 61680, i32 119, i32 119, i32 119, i32 0, i32 256, i32 512]}
!8 = !{void ()* @VSBasicVertexLightingTx, !"VSBasicVertexLightingTx", !9, !4, null}
!9 = !{!10, !18, null}
!10 = !{!11, !14, !16}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 2, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{!19, !20, !22, !23}
!19 = !{i32 0, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 0, i8 0, !13}
!20 = !{i32 1, !"COLOR", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!21 = !{i32 1}
!22 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 2, i8 0, !17}
!23 = !{i32 3, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 3, i8 0, !13}

#endif

const unsigned char BasicEffect_VSBasicVertexLightingTx[] = {
  0x44, 0x58, 0x42, 0x43, 0x94, 0x4d, 0xd2, 0xd0, 0x5d, 0xc0, 0x5a, 0x07,
  0x45, 0xd6, 0x61, 0xd3, 0xa2, 0x46, 0x4f, 0x1b, 0x01, 0x00, 0x00, 0x00,
  0x79, 0x13, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00,
  0xd1, 0x02, 0x00, 0x00, 0x61, 0x03, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00,
  0xbd, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x84, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
  0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f,
  0x4f, 0x52, 0x44, 0x00, 0x4f, 0x53, 0x47, 0x31, 0xa9, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x9d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f,
  0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
  0x00, 0x50, 0x53, 0x56, 0x30, 0x3c, 0x01, 0x00, 0x00, 0x30, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
  0xff, 0x01, 0x00, 0x00, 0x00, 0x03, 0x04, 0x00, 0x03, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00,
  0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
  0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x02, 0x00,
  0x00, 0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44,
  0x00, 0x03, 0x02, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x03, 0x03, 0x04, 0x00,
  0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00,
  0x00, 0xf0, 0xf0, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00,
  0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x52, 0x54, 0x53, 0x30, 0x88, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x88, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x05, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
  0xff, 0x49, 0x4c, 0x44, 0x4e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
  0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x42, 0x61,
  0x73, 0x69, 0x63, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53,
  0x42, 0x61, 0x73, 0x69, 0x63, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x4c,
  0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x2e, 0x70, 0x64,
  0x62, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x9b, 0x48, 0x05, 0x00, 0x58, 0x56, 0x3d,
  0xfd, 0x61, 0x2a, 0xfc, 0xe9, 0x10, 0xf6, 0x6e, 0x97, 0x44, 0x58, 0x49,
  0x4c, 0xb4, 0x0f, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0xed, 0x03, 0x00,
  0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x00, 0x9c, 0x0f, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00,
  0x00, 0xe4, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04,
  0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08,
  0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b,
  0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62,
  0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32,
  0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81,
  0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff,
  0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03,
  0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8,
  0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60,
  0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00,
  0x00, 0x30, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85,
  0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90,
  0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x90, 0xc1,
  0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e,
  0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20,
  0x88, 0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3, 0x30, 0x0c, 0xa4,
  0x94, 0x61, 0x20, 0x06, 0x62, 0x0a, 0x31, 0x10, 0xc3, 0x40, 0x4e, 0x51,
  0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x86, 0x81, 0xa0, 0xa3, 0x86, 0xcb,
  0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0xfc, 0xe2,
  0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x40, 0xc5, 0x3d, 0xc3, 0xe5, 0x4f, 0xd8,
  0x43, 0x48, 0x7e, 0x08, 0x34, 0xc3, 0x42, 0xa0, 0x60, 0x2a, 0x84, 0x44,
  0x50, 0x04, 0x55, 0xa5, 0x18, 0x88, 0x61, 0x18, 0xe8, 0x9a, 0x23, 0x08,
  0x8a, 0x41, 0x11, 0x05, 0x41, 0x64, 0xa4, 0x0d, 0x04, 0x0c, 0x23, 0x10,
  0xc3, 0x30, 0xc2, 0x30, 0xe4, 0x80, 0x97, 0x04, 0xdd, 0x55, 0x87, 0x23,
  0x4d, 0x0b, 0x80, 0x39, 0xd4, 0xe4, 0xa7, 0x40, 0x04, 0x30, 0xc4, 0x44,
  0x44, 0x12, 0x6a, 0x3a, 0xcf, 0x1b, 0xbe, 0xef, 0xf3, 0xbc, 0x0e, 0xfc,
  0x40, 0x0a, 0x93, 0x81, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60,
  0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf,
  0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6,
  0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73,
  0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74,
  0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71,
  0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43,
  0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x86, 0x3c, 0x06, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x79, 0x10, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x18, 0xf2, 0x28, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xe3, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x02, 0x02, 0x20, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x05, 0x04, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x0b, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x1a,
  0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x81,
  0x00, 0x11, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c,
  0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04,
  0xa0, 0x18, 0x0a, 0xd8, 0xa0, 0x0c, 0xca, 0xa3, 0x1c, 0x8a, 0x80, 0x8a,
  0x92, 0x18, 0x01, 0x28, 0x84, 0x32, 0x28, 0x02, 0x12, 0x67, 0x00, 0x68,
  0x1c, 0x8b, 0x51, 0x20, 0xf8, 0xe4, 0x03, 0xf8, 0xe4, 0x03, 0xf8, 0xe4,
  0x03, 0xf8, 0xe4, 0x83, 0x7b, 0xb8, 0x87, 0x7b, 0x00, 0x40, 0x04, 0x84,
  0x00, 0x79, 0x18, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c,
  0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03,
  0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01,
  0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a,
  0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b,
  0xd9, 0x10, 0x04, 0x13, 0x04, 0x42, 0x99, 0x20, 0x10, 0xcb, 0x06, 0x61,
  0x20, 0x26, 0x08, 0x04, 0xb3, 0x41, 0x18, 0x0c, 0x0a, 0x76, 0x73, 0x1b,
  0x06, 0xc4, 0x20, 0x26, 0x08, 0x62, 0x70, 0x11, 0x98, 0x20, 0x10, 0xcd,
  0x06, 0x84, 0x50, 0x16, 0x82, 0x18, 0x18, 0x60, 0x43, 0xd0, 0x6c, 0x20,
  0x00, 0xc0, 0x01, 0x26, 0x08, 0x63, 0x80, 0x6d, 0x08, 0xa0, 0x09, 0x82,
  0x00, 0xf0, 0xb2, 0x9a, 0x12, 0x0a, 0x9b, 0x4b, 0x1b, 0xb3, 0x2a, 0x93,
  0xa3, 0x2b, 0xc3, 0x63, 0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0xa3,
  0xc2, 0xe3, 0x32, 0x65, 0xf5, 0x05, 0xf5, 0x36, 0x97, 0x46, 0x97, 0xf6,
  0xe6, 0x36, 0x41, 0x28, 0xa4, 0x09, 0x42, 0x31, 0x6d, 0x08, 0x88, 0x09,
  0x42, 0x41, 0x4d, 0x10, 0x08, 0x67, 0x82, 0x40, 0x3c, 0x1b, 0x84, 0x4c,
  0xdb, 0xb0, 0x10, 0x54, 0x65, 0x5d, 0xd6, 0x80, 0x11, 0xd6, 0x46, 0xc3,
  0xe9, 0x49, 0xaa, 0x29, 0x88, 0x69, 0x82, 0x50, 0x54, 0x13, 0x04, 0x02,
  0xda, 0x20, 0x64, 0xdf, 0x86, 0x65, 0xe8, 0x2a, 0xeb, 0xb2, 0x06, 0x6f,
  0xb0, 0xc0, 0x60, 0x82, 0x40, 0x44, 0x44, 0xa8, 0x8a, 0xb0, 0x86, 0x9e,
  0x9e, 0xa4, 0x88, 0x26, 0x08, 0x85, 0xb5, 0x41, 0xc8, 0xb2, 0x0d, 0x8b,
  0x18, 0x8c, 0x41, 0x65, 0x5d, 0xd6, 0x40, 0x06, 0x62, 0x60, 0x95, 0xc1,
  0x86, 0x81, 0x0b, 0x03, 0x33, 0x60, 0x31, 0xf4, 0xc4, 0xf4, 0x24, 0xb5,
  0x61, 0x21, 0xd0, 0xa0, 0xb2, 0x2e, 0x32, 0x18, 0x30, 0xc2, 0xda, 0x36,
  0x04, 0xc3, 0x86, 0x65, 0x40, 0x83, 0xca, 0x52, 0x03, 0x32, 0x18, 0xb0,
  0xc1, 0xda, 0x36, 0x2c, 0x62, 0x30, 0x06, 0x95, 0x75, 0x91, 0xc1, 0x40,
  0x06, 0x62, 0x60, 0x95, 0xc1, 0x86, 0x25, 0xa3, 0x2a, 0xef, 0xc2, 0x06,
  0x2c, 0xb3, 0xb6, 0x0d, 0x44, 0x1a, 0xac, 0x01, 0x1b, 0xb4, 0xc1, 0x86,
  0xe1, 0x0c, 0xdc, 0x00, 0xd8, 0x50, 0x48, 0xd3, 0x1b, 0x3c, 0x40, 0x15,
  0x36, 0x36, 0xbb, 0x36, 0x97, 0x34, 0xb2, 0x32, 0x37, 0xba, 0x29, 0x41,
  0x50, 0x85, 0x0c, 0xcf, 0xc5, 0xae, 0x4c, 0x6e, 0x2e, 0xed, 0xcd, 0x6d,
  0x4a, 0x40, 0x34, 0x21, 0xc3, 0x73, 0xb1, 0x0b, 0x63, 0xb3, 0x2b, 0x93,
  0x9b, 0x12, 0x18, 0x75, 0xc8, 0xf0, 0x5c, 0xe6, 0xd0, 0xc2, 0xc8, 0xca,
  0xe4, 0x9a, 0xde, 0xc8, 0xca, 0xd8, 0xa6, 0x04, 0x48, 0x19, 0x32, 0x3c,
  0x17, 0xb9, 0xb2, 0xb9, 0xb7, 0x3a, 0xb9, 0xb1, 0xb2, 0xb9, 0x29, 0x81,
  0x53, 0x87, 0x0c, 0xcf, 0xc5, 0x2e, 0xad, 0xec, 0x2e, 0x89, 0x6c, 0x8a,
  0x2e, 0x8c, 0xae, 0x6c, 0x4a, 0x00, 0xd5, 0x21, 0xc3, 0x73, 0x29, 0x73,
  0xa3, 0x93, 0xcb, 0x83, 0x7a, 0x4b, 0x73, 0xa3, 0x9b, 0x9b, 0x12, 0xbc,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00,
  0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d,
  0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07,
  0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80,
  0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66,
  0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d,
  0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07,
  0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03,
  0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90,
  0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50,
  0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2,
  0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39,
  0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14,
  0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07,
  0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07,
  0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87,
  0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0,
  0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8,
  0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc,
  0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6,
  0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39,
  0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f,
  0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c,
  0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87,
  0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0,
  0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8,
  0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2,
  0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x06, 0x70, 0xbd, 0xec, 0x06, 0x48, 0x88,
  0xf0, 0x12, 0xd1, 0x44, 0x5c, 0x25, 0x62, 0x1c, 0x13, 0xd2, 0x18, 0xed,
  0x65, 0x05, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x48, 0x03, 0x44, 0x98,
  0x5f, 0xdc, 0xb6, 0x1d, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54,
  0x51, 0x10, 0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xf9, 0xc5,
  0x6d, 0x5b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13,
  0x11, 0x02, 0xcd, 0xb0, 0x10, 0x36, 0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe,
  0xe0, 0x4c, 0xb7, 0x5f, 0xdc, 0xb6, 0x19, 0x38, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x38, 0x13, 0xee, 0x17, 0xb7, 0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce,
  0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x26,
  0x50, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81, 0x52, 0xd3,
  0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x86, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe,
  0x44, 0x44, 0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x11, 0x3c, 0xc3,
  0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x03, 0x00,
  0x00, 0x61, 0x20, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x13, 0x04, 0x41,
  0x2c, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x94, 0x8d, 0x00,
  0x50, 0x51, 0x02, 0x44, 0x14, 0x5c, 0x71, 0x95, 0x5d, 0x29, 0x14, 0xc2,
  0x0c, 0x40, 0xc9, 0x94, 0x5b, 0xa9, 0x94, 0x4b, 0x19, 0x95, 0x5c, 0x81,
  0x94, 0x48, 0x61, 0x94, 0x49, 0xa1, 0x94, 0x44, 0x51, 0x14, 0x44, 0x59,
  0x14, 0x4b, 0xc1, 0x14, 0x07, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8,
  0x37, 0x02, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0x02, 0x00, 0x00,
  0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xa0, 0xb5, 0x01, 0x04, 0x06,
  0x6b, 0xb0, 0x06, 0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x76,
  0x80, 0x99, 0x01, 0x1b, 0x90, 0xc1, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0xc6, 0x1d, 0x64, 0x67, 0xd0, 0x06, 0x1e, 0x36, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x06, 0x1e, 0x68, 0x6f, 0xe0, 0x06, 0x66, 0x90, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x91, 0x07, 0x1b, 0x1c, 0xbc, 0x01,
  0x18, 0x68, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xe8, 0x01, 0x17,
  0x07, 0x70, 0x50, 0x06, 0xdb, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0x7b, 0xd0, 0xc5, 0x41, 0x1c, 0xa4, 0x01, 0x37, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x06, 0x1f, 0x78, 0x72, 0x20, 0x07, 0x63, 0xd0, 0x8d, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0xd1, 0x07, 0xdf, 0x1c, 0xcc, 0x01, 0x1a,
  0x78, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xf8, 0x01, 0x18, 0xd0,
  0x01, 0x1d, 0xa8, 0xc1, 0x37, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x55,
  0x1e, 0x8c, 0x81, 0x12, 0x07, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0x50, 0xf9, 0x01, 0x1a, 0x3c, 0xde, 0x68, 0x42, 0x00, 0x8c, 0x26,
  0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x54, 0xa3, 0xd0, 0x06, 0x94, 0x18, 0x8c, 0x26, 0x04,
  0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x98,
  0x33, 0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x54, 0xa0,
  0x83, 0xc9, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x4a, 0x85,
  0x3a, 0x98, 0x9c, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x55,
  0xb0, 0x83, 0xc9, 0x09, 0xac, 0xb9, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0x17, 0x2b, 0xe0, 0xc1, 0xd5, 0x04, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x70, 0xb5, 0x42, 0x1e, 0x5c, 0x4d, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x97, 0x2b, 0xe8, 0xc1, 0xd5, 0x04, 0xc6, 0x6c, 0xf2,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x0b, 0x16, 0xf8, 0x60, 0x63,
  0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x62, 0xa1, 0x0f, 0x36,
  0x26, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x4b, 0x16, 0xfc, 0x60,
  0x63, 0x82, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0x68, 0xc1, 0x0f,
  0xca, 0x40, 0x0e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13,
  0x06, 0xc1, 0x86, 0x26, 0x3e, 0x36, 0x28, 0xf1, 0xb1, 0xe1, 0x88, 0xcf,
  0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x28, 0xbf, 0x00, 0x0a, 0x83, 0x10,
  0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xcc, 0x2f, 0x88,
  0x42, 0x60, 0x45, 0x20, 0x1f, 0x2b, 0x04, 0xf9, 0x58, 0x31, 0xc8, 0x67,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0x70, 0x50, 0x85, 0x38, 0xe8,
  0x83, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x8a, 0x1c, 0x5c, 0xa1, 0x0e, 0x40,
  0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x42, 0x07, 0x59, 0xc8, 0x03, 0x56,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x5b,
  0xf4, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xb1, 0x03,
  0x2e, 0xe8, 0xc1, 0x12, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xd5,
  0x0e, 0xb9, 0xa0, 0x07, 0x4b, 0x60, 0x4a, 0x1f, 0xc8, 0x67, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0xae, 0x77, 0xd8, 0x85, 0x3e, 0x50, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xe0, 0x81, 0x17, 0xfa, 0x40, 0x09,
  0x2c, 0x01, 0x05, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x25,
  0x0f, 0xbe, 0x00, 0x0a, 0x49, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xd7, 0x3c, 0xfc, 0x02, 0x28, 0x24, 0xc1, 0x88, 0xc1, 0x02, 0x80, 0x20,
  0x18, 0x28, 0xf9, 0xa0, 0x0b, 0x07, 0x11, 0x1c, 0x44, 0x30, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0x4c, 0x3e, 0xf0, 0x42, 0x60, 0x41, 0x22, 0x1f,
  0x13, 0x0e, 0xf9, 0xd8, 0x50, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10,
  0x0c, 0x2a, 0x7d, 0x20, 0x87, 0x55, 0x98, 0x87, 0xd1, 0x84, 0x00, 0x18,
  0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04,
  0x83, 0xca, 0x1f, 0xd0, 0xe1, 0x15, 0xf2, 0x61, 0x34, 0x21, 0x00, 0x46,
  0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1,
  0xa0, 0x12, 0x09, 0x76, 0x98, 0x85, 0x5e, 0x18, 0x4d, 0x08, 0x80, 0xd1,
  0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x4b, 0x83, 0x25, 0x3e, 0x96, 0x06,
  0x4b, 0x7c, 0x2c, 0x0d, 0x96, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82,
  0x81, 0xd2, 0x12, 0xee, 0x30, 0x08, 0xc1, 0x20, 0x04, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xc0, 0xb4, 0x04, 0x3c, 0x04, 0x16, 0x10, 0xf2, 0x31,
  0x81, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0x2d, 0x71,
  0x0f, 0xbe, 0x50, 0x0f, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3,
  0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x55, 0x4c, 0xec,
  0x83, 0x38, 0xa0, 0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x55, 0x13, 0xff,
  0x60, 0x0e, 0xef, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0xc6, 0x07, 0x4b, 0x7c, 0x8c, 0x0f, 0x96, 0xf8, 0x18, 0x1f,
  0x2c, 0xf1, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0x05, 0x2c, 0x42,
  0x62, 0x10, 0x82, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80,
  0x01, 0x8b, 0x91, 0x08, 0x2c, 0x20, 0xe4, 0x63, 0x02, 0x21, 0x9f, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xc0, 0x42, 0x25, 0xe2, 0x21, 0x25,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0xb2, 0x70, 0x89, 0x7a, 0xe8, 0x87,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x83, 0x0a, 0x2d, 0x64, 0x22, 0x1f, 0x40, 0x62,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0xec, 0x15,
  0x96, 0xf8, 0xd8, 0x2b, 0x2c, 0xf1, 0xb1, 0x57, 0x58, 0xe2, 0x33, 0x62,
  0xb0, 0x00, 0x20, 0x08, 0x06, 0xca, 0x5c, 0xd0, 0xc4, 0x20, 0x04, 0x83,
  0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x33, 0x17, 0x36, 0x11,
  0x58, 0x40, 0xc8, 0xc7, 0x04, 0x42, 0x3e, 0x56, 0x12, 0x77, 0x10, 0x1f,
  0x33, 0x89, 0x3b, 0x88, 0x8f, 0x9d, 0x84, 0x19, 0xc4, 0xc7, 0x50, 0xc2,
  0x0c, 0xe2, 0x63, 0x29, 0x51, 0xc5, 0xc7, 0x54, 0xa2, 0x8a, 0x8f, 0x89,
  0x82, 0x1f, 0xc8, 0xc7, 0x58, 0x22, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x5c, 0x7a, 0x61, 0x16, 0xc8, 0x28, 0x04, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x70, 0xed, 0xc5, 0x59, 0x20, 0xa3, 0x10, 0x98, 0x29,
  0xbc, 0x81, 0x7c, 0x0c, 0x26, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0xc1, 0xe5, 0x17, 0x6a, 0xa1, 0x9c, 0x42, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0xd7, 0x5f, 0xac, 0x85, 0x72, 0x0a, 0x81, 0xa9, 0x02,
  0x18, 0xc8, 0xc7, 0x68, 0x22, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x5c, 0xa2, 0xe1, 0x16, 0xcc, 0x2a, 0x04, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x70, 0x8d, 0xc6, 0x5b, 0x30, 0xab, 0x10, 0xd8, 0x1f, 0xb8,
  0x82, 0x7c, 0x2c, 0xe0, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0xc1, 0x65, 0x1a, 0x72, 0xc1, 0x07, 0xaf, 0x10, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0xc1, 0x75, 0x1a, 0x73, 0xc1, 0x07, 0xaf, 0x10, 0x18, 0x1c,
  0xc8, 0x82, 0x7c, 0x2c, 0x68, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0xc1, 0xa5, 0x1a, 0x76, 0xd1, 0x06, 0xb3, 0x10, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0xc1, 0xb5, 0x1a, 0x77, 0xd1, 0x06, 0xb3, 0x10, 0x58,
  0x18, 0xd8, 0x82, 0x7c, 0x2c, 0xf0, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0x97, 0x6b, 0xe8, 0x85, 0x77, 0x0b, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x5c, 0xaf, 0xb1, 0x17, 0xde, 0x2d, 0x04, 0xc3, 0x11,
  0x15, 0x59, 0x10, 0xdf, 0x70, 0x84, 0x54, 0x16, 0xc4, 0x37, 0x1c, 0xf1,
  0x98, 0x05, 0xf1, 0x4d, 0x37, 0x9c, 0x05, 0x5a, 0x0c, 0xd3, 0x0d, 0x68,
  0x91, 0x16, 0xc3, 0x74, 0x43, 0x5a, 0xa8, 0xc5, 0x60, 0xc3, 0x26, 0x1f,
  0x1b, 0x30, 0xf9, 0xd8, 0x50, 0xc9, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10,
  0x0c, 0x2a, 0xdd, 0x20, 0x8d, 0xb5, 0x80, 0x8d, 0xd1, 0x84, 0x60, 0x18,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xc7, 0x37, 0xfc, 0x82, 0x7a, 0x8b,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x70, 0x7e, 0xe3, 0x2f, 0x22, 0xb8,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x07, 0x3c, 0x40, 0xc3, 0x89,
  0x0b, 0x1b, 0x16, 0xf9, 0xd8, 0xb0, 0xc8, 0xc7, 0x86, 0x45, 0x3e, 0x23,
  0x06, 0x06, 0x00, 0x82, 0x60, 0xc0, 0x94, 0x47, 0x69, 0x0c, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0xc0, 0x98, 0x87, 0x69, 0x0c, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xc0, 0x9c, 0xc7, 0x69, 0x0c, 0x36, 0x28, 0xf2, 0xb1,
  0x61, 0x91, 0x8f, 0x0d, 0x8c, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1,
  0x80, 0x59, 0x0f, 0xd6, 0x18, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80,
  0x61, 0x8f, 0xd6, 0x18, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80, 0x69,
  0x0f, 0xd7, 0x18, 0x6c, 0x78, 0x03, 0xf9, 0xd8, 0xc0, 0x06, 0xf2, 0xb1,
  0x21, 0x0d, 0xe4, 0x63, 0xd7, 0x3b, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0x2e, 0xf7, 0xd0, 0x8d, 0xab, 0x17, 0x82, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0xde, 0x63, 0x37, 0xae, 0x55, 0x08, 0x4c, 0x8b,
  0x07, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x15, 0x1f, 0xbd,
  0xa1, 0xfd, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x7c,
  0xf8, 0x86, 0xd6, 0x0a, 0x81, 0x75, 0xf3, 0x20, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0xe8, 0x03, 0x3c, 0xba, 0x70, 0x08, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0xaa, 0x8f, 0xf0, 0xe8, 0x5e, 0x21, 0x18,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xea, 0x3e, 0xc2, 0x03, 0x35, 0xe6,
  0x63, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6c,
  0x58, 0xe4, 0x63, 0x43, 0x22, 0x1f, 0x1b, 0x0e, 0xf9, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0x41, 0xe5, 0x1f, 0xe8, 0xf1, 0x1a, 0xfb, 0x31, 0x9a,
  0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x76, 0x0c, 0xf0,
  0xb1, 0x63, 0x80, 0x8f, 0x1d, 0x03, 0x7c, 0x4c, 0x13, 0x09, 0xf9, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x55, 0x22, 0xf1, 0xa1, 0xc1, 0x43,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x89, 0xc8, 0x87, 0xe6,
  0x0b, 0x81, 0x75, 0x24, 0x21, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xb8, 0x50, 0x84, 0x3e, 0x3a, 0x79, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0xe0, 0x4a, 0x91, 0xfa, 0xe8, 0xc0, 0x21, 0x30, 0x30, 0x30, 0x09,
  0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xb5, 0x22, 0xf7, 0x01,
  0x06, 0xf4, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xc5, 0x22,
  0xf8, 0x01, 0x06, 0xe2, 0x10, 0x8c, 0x26, 0xd0, 0x01, 0x30, 0x9a, 0x50,
  0x07, 0xc1, 0x68, 0x82, 0x1d, 0x08, 0x36, 0x28, 0xf2, 0xb1, 0x01, 0x91,
  0x8f, 0x0d, 0x86, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xa2,
  0x11, 0xff, 0x28, 0x8f, 0xf5, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21,
  0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x83, 0x2a, 0x47, 0x46, 0x44, 0x3d, 0xf8, 0x63, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0x1f, 0x41, 0x91, 0xf7, 0xa0, 0x8f,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d,
  0x20, 0x86, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xc6, 0xa4, 0x45,
  0xe8, 0x23, 0x45, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13,
  0x06, 0x61, 0x34, 0x81, 0x18, 0x6c, 0x9a, 0x0f, 0xf9, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0xc1, 0x85, 0x26, 0x34, 0x32, 0x1f, 0x53, 0x30, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x9a, 0xd4, 0xc8, 0x7c, 0x4c, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x6a, 0x62, 0x23, 0xf3, 0x31,
  0x05, 0x26, 0xdd, 0x87, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0,
  0x62, 0x13, 0x1c, 0xb9, 0x0f, 0x29, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0xab, 0x4d, 0x72, 0xe4, 0x3e, 0xa4, 0x60, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0x2e, 0x37, 0xd1, 0x91, 0xfb, 0x90, 0x02, 0x8b, 0xf6, 0x43,
  0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xc1, 0x09, 0x8f, 0xec,
  0x47, 0x14, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x15, 0x27, 0x3d,
  0xb2, 0x1f, 0x51, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x9c,
  0xf8, 0xc8, 0x7e, 0x44, 0x81, 0x41, 0xff, 0x21, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0xe8, 0x04, 0x4c, 0xfe, 0x03, 0x0a, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0xaa, 0x93, 0x30, 0xf9, 0x0f, 0x28, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xcb, 0x4e, 0xc4, 0xe4, 0x3f, 0xa0,
  0x60, 0x34, 0x21, 0x14, 0x86, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8,
  0xf2, 0x64, 0x4c, 0x54, 0xc4, 0x45, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41,
  0x08, 0x46, 0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x46, 0x0c, 0x1a, 0x00,
  0x04, 0xc1, 0x00, 0xfa, 0x13, 0x35, 0x49, 0x11, 0x14, 0x39, 0x11, 0x13,
  0x21, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x46, 0x54,
  0xec, 0x24, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xa4, 0x54, 0xd2,
  0x24, 0x4f, 0xf8, 0x84, 0x4e, 0xaa, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30,
  0x40, 0x4a, 0x25, 0x4d, 0xf2, 0x84, 0x4f, 0xda, 0x24, 0x1a, 0x31, 0x48,
  0x00, 0x10, 0x04, 0x03, 0xa4, 0x54, 0xd2, 0x24, 0x4f, 0xf8, 0x24, 0x4e,
  0x9a, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x4a, 0x25, 0x4d, 0xf2,
  0x84, 0x4f, 0xe4, 0x24, 0x19, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xa4,
  0x54, 0xd2, 0x84, 0x4f, 0xf8, 0x84, 0x4e, 0xfc, 0x60, 0xc4, 0x20, 0x01,
  0x40, 0x10, 0x0c, 0x90, 0x52, 0x49, 0x13, 0x3e, 0xe1, 0x93, 0x36, 0xe9,
  0x83, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x4a, 0x25, 0x4d, 0xf8,
  0x84, 0x4f, 0xe2, 0x84, 0x0f, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00,
  0x29, 0x95, 0x34, 0xe1, 0x13, 0x3e, 0x91, 0x13, 0x64, 0xc4, 0x20, 0x01,
  0x40, 0x10, 0x0c, 0x90, 0x52, 0x49, 0x93, 0x3e, 0xe1, 0x13, 0x3a, 0x79,
  0x83, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x4a, 0x25, 0x4d, 0xfa,
  0x84, 0x4f, 0xda, 0xc4, 0x0d, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00,
  0x29, 0x95, 0x34, 0xe9, 0x13, 0x3e, 0x89, 0x93, 0x36, 0x18, 0x31, 0x48,
  0x00, 0x10, 0x04, 0x03, 0xa4, 0x54, 0xd2, 0xa4, 0x4f, 0xf8, 0x44, 0x4e,
  0x82, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x4a, 0x25, 0x4d, 0xec,
  0x84, 0x4f, 0xe8, 0x04, 0x46, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00,
  0x29, 0x95, 0x34, 0xb1, 0x13, 0x3e, 0x69, 0x93, 0x17, 0x41, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00
};
