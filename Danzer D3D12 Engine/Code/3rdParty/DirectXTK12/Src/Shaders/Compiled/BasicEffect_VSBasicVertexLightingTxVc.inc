#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; SV_Position              0   xyzw        3      POS   float   xyzw
;
; shader debug name: Compiled\BasicEffect_VSBasicVertexLightingTxVc.pdb
; shader hash: ee6cb974587dca788d5bc5901a7ed2bd
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; COLOR                    0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 12 }
;   output 1 depends on inputs: { 4, 5, 6, 13 }
;   output 2 depends on inputs: { 4, 5, 6, 14 }
;   output 3 depends on inputs: { 15 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3 }
;   output 13 depends on inputs: { 0, 1, 2, 3 }
;   output 14 depends on inputs: { 0, 1, 2, 3 }
;   output 15 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSBasicVertexLightingTxVc() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %16 = extractvalue %dx.types.CBufRet.f32 %15, 0
  %17 = extractvalue %dx.types.CBufRet.f32 %15, 1
  %18 = extractvalue %dx.types.CBufRet.f32 %15, 2
  %19 = extractvalue %dx.types.CBufRet.f32 %15, 3
  %20 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.f32 %20, 0
  %22 = extractvalue %dx.types.CBufRet.f32 %20, 1
  %23 = extractvalue %dx.types.CBufRet.f32 %20, 2
  %24 = extractvalue %dx.types.CBufRet.f32 %20, 3
  %25 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %26 = extractvalue %dx.types.CBufRet.f32 %25, 0
  %27 = extractvalue %dx.types.CBufRet.f32 %25, 1
  %28 = extractvalue %dx.types.CBufRet.f32 %25, 2
  %29 = extractvalue %dx.types.CBufRet.f32 %25, 3
  %30 = fmul fast float %16, %11
  %31 = call float @dx.op.tertiary.f32(i32 46, float %12, float %17, float %30)  ; FMad(a,b,c)
  %32 = call float @dx.op.tertiary.f32(i32 46, float %13, float %18, float %31)  ; FMad(a,b,c)
  %33 = call float @dx.op.tertiary.f32(i32 46, float %14, float %19, float %32)  ; FMad(a,b,c)
  %34 = fmul fast float %21, %11
  %35 = call float @dx.op.tertiary.f32(i32 46, float %12, float %22, float %34)  ; FMad(a,b,c)
  %36 = call float @dx.op.tertiary.f32(i32 46, float %13, float %23, float %35)  ; FMad(a,b,c)
  %37 = call float @dx.op.tertiary.f32(i32 46, float %14, float %24, float %36)  ; FMad(a,b,c)
  %38 = fmul fast float %26, %11
  %39 = call float @dx.op.tertiary.f32(i32 46, float %12, float %27, float %38)  ; FMad(a,b,c)
  %40 = call float @dx.op.tertiary.f32(i32 46, float %13, float %28, float %39)  ; FMad(a,b,c)
  %41 = call float @dx.op.tertiary.f32(i32 46, float %14, float %29, float %40)  ; FMad(a,b,c)
  %42 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %43 = extractvalue %dx.types.CBufRet.f32 %42, 0
  %44 = extractvalue %dx.types.CBufRet.f32 %42, 1
  %45 = extractvalue %dx.types.CBufRet.f32 %42, 2
  %46 = fsub fast float %43, %33
  %47 = fsub fast float %44, %37
  %48 = fsub fast float %45, %41
  %49 = call float @dx.op.dot3.f32(i32 55, float %46, float %47, float %48, float %46, float %47, float %48)  ; Dot3(ax,ay,az,bx,by,bz)
  %50 = call float @dx.op.unary.f32(i32 25, float %49)  ; Rsqrt(value)
  %51 = fmul fast float %46, %50
  %52 = fmul fast float %47, %50
  %53 = fmul fast float %48, %50
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = fmul fast float %55, %8
  %67 = call float @dx.op.tertiary.f32(i32 46, float %9, float %56, float %66)  ; FMad(a,b,c)
  %68 = call float @dx.op.tertiary.f32(i32 46, float %10, float %57, float %67)  ; FMad(a,b,c)
  %69 = fmul fast float %59, %8
  %70 = call float @dx.op.tertiary.f32(i32 46, float %9, float %60, float %69)  ; FMad(a,b,c)
  %71 = call float @dx.op.tertiary.f32(i32 46, float %10, float %61, float %70)  ; FMad(a,b,c)
  %72 = fmul fast float %63, %8
  %73 = call float @dx.op.tertiary.f32(i32 46, float %9, float %64, float %72)  ; FMad(a,b,c)
  %74 = call float @dx.op.tertiary.f32(i32 46, float %10, float %65, float %73)  ; FMad(a,b,c)
  %75 = call float @dx.op.dot3.f32(i32 55, float %68, float %71, float %74, float %68, float %71, float %74)  ; Dot3(ax,ay,az,bx,by,bz)
  %76 = call float @dx.op.unary.f32(i32 25, float %75)  ; Rsqrt(value)
  %77 = fmul fast float %76, %68
  %78 = fmul fast float %76, %71
  %79 = fmul fast float %76, %74
  %80 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.f32 %80, 0
  %82 = extractvalue %dx.types.CBufRet.f32 %80, 1
  %83 = extractvalue %dx.types.CBufRet.f32 %80, 2
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = fsub fast float %51, %81
  %93 = fsub fast float %52, %82
  %94 = fsub fast float %53, %83
  %95 = call float @dx.op.dot3.f32(i32 55, float %92, float %93, float %94, float %92, float %93, float %94)  ; Dot3(ax,ay,az,bx,by,bz)
  %96 = call float @dx.op.unary.f32(i32 25, float %95)  ; Rsqrt(value)
  %97 = fmul fast float %96, %93
  %98 = fmul fast float %96, %94
  %99 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.f32 %99, 0
  %101 = extractvalue %dx.types.CBufRet.f32 %99, 1
  %102 = extractvalue %dx.types.CBufRet.f32 %99, 2
  %103 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %104 = extractvalue %dx.types.CBufRet.f32 %103, 0
  %105 = extractvalue %dx.types.CBufRet.f32 %103, 1
  %106 = extractvalue %dx.types.CBufRet.f32 %103, 2
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %110 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %111 = fsub fast float %51, %100
  %112 = fsub fast float %52, %101
  %113 = fsub fast float %53, %102
  %114 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %111, float %112, float %113)  ; Dot3(ax,ay,az,bx,by,bz)
  %115 = call float @dx.op.unary.f32(i32 25, float %114)  ; Rsqrt(value)
  %116 = fmul fast float %115, %112
  %117 = fmul fast float %115, %113
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 0
  %120 = extractvalue %dx.types.CBufRet.f32 %118, 1
  %121 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %124 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %125 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 0
  %128 = extractvalue %dx.types.CBufRet.f32 %126, 1
  %129 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %130 = fsub fast float %51, %119
  %131 = fsub fast float %52, %120
  %132 = fsub fast float %53, %121
  %133 = call float @dx.op.dot3.f32(i32 55, float %130, float %131, float %132, float %130, float %131, float %132)  ; Dot3(ax,ay,az,bx,by,bz)
  %134 = call float @dx.op.unary.f32(i32 25, float %133)  ; Rsqrt(value)
  %135 = fmul fast float %134, %131
  %136 = fmul fast float %134, %132
  %137 = fsub fast float -0.000000e+00, %82
  %138 = fsub fast float -0.000000e+00, %83
  %139 = fsub fast float -0.000000e+00, %101
  %140 = fsub fast float -0.000000e+00, %102
  %141 = fsub fast float -0.000000e+00, %120
  %142 = fsub fast float -0.000000e+00, %121
  %143 = fmul fast float %77, %81
  %144 = fsub fast float -0.000000e+00, %143
  %145 = call float @dx.op.tertiary.f32(i32 46, float %137, float %78, float %144)  ; FMad(a,b,c)
  %146 = call float @dx.op.tertiary.f32(i32 46, float %138, float %79, float %145)  ; FMad(a,b,c)
  %147 = fmul fast float %77, %100
  %148 = fsub fast float -0.000000e+00, %147
  %149 = call float @dx.op.tertiary.f32(i32 46, float %139, float %78, float %148)  ; FMad(a,b,c)
  %150 = call float @dx.op.tertiary.f32(i32 46, float %140, float %79, float %149)  ; FMad(a,b,c)
  %151 = fmul fast float %77, %119
  %152 = fsub fast float -0.000000e+00, %151
  %153 = call float @dx.op.tertiary.f32(i32 46, float %141, float %78, float %152)  ; FMad(a,b,c)
  %154 = call float @dx.op.tertiary.f32(i32 46, float %142, float %79, float %153)  ; FMad(a,b,c)
  %155 = fmul fast float %92, %77
  %156 = fmul fast float %155, %96
  %157 = call float @dx.op.tertiary.f32(i32 46, float %97, float %78, float %156)  ; FMad(a,b,c)
  %158 = call float @dx.op.tertiary.f32(i32 46, float %98, float %79, float %157)  ; FMad(a,b,c)
  %159 = fmul fast float %111, %77
  %160 = fmul fast float %159, %115
  %161 = call float @dx.op.tertiary.f32(i32 46, float %116, float %78, float %160)  ; FMad(a,b,c)
  %162 = call float @dx.op.tertiary.f32(i32 46, float %117, float %79, float %161)  ; FMad(a,b,c)
  %163 = fmul fast float %130, %77
  %164 = fmul fast float %163, %134
  %165 = call float @dx.op.tertiary.f32(i32 46, float %135, float %78, float %164)  ; FMad(a,b,c)
  %166 = call float @dx.op.tertiary.f32(i32 46, float %136, float %79, float %165)  ; FMad(a,b,c)
  %167 = fcmp fast olt float %146, 0.000000e+00
  %168 = fcmp fast olt float %150, 0.000000e+00
  %169 = fcmp fast olt float %154, 0.000000e+00
  %170 = select i1 %167, float 0.000000e+00, float 1.000000e+00
  %171 = select i1 %168, float 0.000000e+00, float 1.000000e+00
  %172 = select i1 %169, float 0.000000e+00, float 1.000000e+00
  %173 = fmul fast float %170, %146
  %174 = fmul fast float %171, %150
  %175 = fmul fast float %172, %154
  %176 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %177 = extractvalue %dx.types.CBufRet.f32 %176, 3
  %178 = call float @dx.op.binary.f32(i32 35, float %158, float 0.000000e+00)  ; FMax(a,b)
  %179 = call float @dx.op.binary.f32(i32 35, float %162, float 0.000000e+00)  ; FMax(a,b)
  %180 = call float @dx.op.binary.f32(i32 35, float %166, float 0.000000e+00)  ; FMax(a,b)
  %181 = fmul fast float %178, %170
  %182 = fmul fast float %179, %171
  %183 = fmul fast float %180, %172
  %184 = call float @dx.op.unary.f32(i32 23, float %181)  ; Log(value)
  %185 = call float @dx.op.unary.f32(i32 23, float %182)  ; Log(value)
  %186 = call float @dx.op.unary.f32(i32 23, float %183)  ; Log(value)
  %187 = fmul fast float %184, %177
  %188 = fmul fast float %185, %177
  %189 = fmul fast float %186, %177
  %190 = call float @dx.op.unary.f32(i32 21, float %187)  ; Exp(value)
  %191 = call float @dx.op.unary.f32(i32 21, float %188)  ; Exp(value)
  %192 = call float @dx.op.unary.f32(i32 21, float %189)  ; Exp(value)
  %193 = fmul fast float %190, %146
  %194 = fmul fast float %191, %150
  %195 = fmul fast float %192, %154
  %196 = fmul fast float %173, %85
  %197 = call float @dx.op.tertiary.f32(i32 46, float %174, float %104, float %196)  ; FMad(a,b,c)
  %198 = call float @dx.op.tertiary.f32(i32 46, float %175, float %123, float %197)  ; FMad(a,b,c)
  %199 = fmul fast float %173, %86
  %200 = call float @dx.op.tertiary.f32(i32 46, float %174, float %105, float %199)  ; FMad(a,b,c)
  %201 = call float @dx.op.tertiary.f32(i32 46, float %175, float %124, float %200)  ; FMad(a,b,c)
  %202 = fmul fast float %173, %87
  %203 = call float @dx.op.tertiary.f32(i32 46, float %174, float %106, float %202)  ; FMad(a,b,c)
  %204 = call float @dx.op.tertiary.f32(i32 46, float %175, float %125, float %203)  ; FMad(a,b,c)
  %205 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %206 = extractvalue %dx.types.CBufRet.f32 %205, 0
  %207 = extractvalue %dx.types.CBufRet.f32 %205, 1
  %208 = extractvalue %dx.types.CBufRet.f32 %205, 2
  %209 = fmul fast float %206, %198
  %210 = fmul fast float %207, %201
  %211 = fmul fast float %208, %204
  %212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %213 = extractvalue %dx.types.CBufRet.f32 %212, 0
  %214 = extractvalue %dx.types.CBufRet.f32 %212, 1
  %215 = extractvalue %dx.types.CBufRet.f32 %212, 2
  %216 = fadd fast float %209, %213
  %217 = fadd fast float %210, %214
  %218 = fadd fast float %211, %215
  %219 = fmul fast float %193, %89
  %220 = call float @dx.op.tertiary.f32(i32 46, float %194, float %108, float %219)  ; FMad(a,b,c)
  %221 = call float @dx.op.tertiary.f32(i32 46, float %195, float %127, float %220)  ; FMad(a,b,c)
  %222 = fmul fast float %193, %90
  %223 = call float @dx.op.tertiary.f32(i32 46, float %194, float %109, float %222)  ; FMad(a,b,c)
  %224 = call float @dx.op.tertiary.f32(i32 46, float %195, float %128, float %223)  ; FMad(a,b,c)
  %225 = fmul fast float %193, %91
  %226 = call float @dx.op.tertiary.f32(i32 46, float %194, float %110, float %225)  ; FMad(a,b,c)
  %227 = call float @dx.op.tertiary.f32(i32 46, float %195, float %129, float %226)  ; FMad(a,b,c)
  %228 = extractvalue %dx.types.CBufRet.f32 %176, 0
  %229 = extractvalue %dx.types.CBufRet.f32 %176, 1
  %230 = extractvalue %dx.types.CBufRet.f32 %176, 2
  %231 = fmul fast float %228, %221
  %232 = fmul fast float %229, %224
  %233 = fmul fast float %230, %227
  %234 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %235 = extractvalue %dx.types.CBufRet.f32 %234, 0
  %236 = extractvalue %dx.types.CBufRet.f32 %234, 1
  %237 = extractvalue %dx.types.CBufRet.f32 %234, 2
  %238 = extractvalue %dx.types.CBufRet.f32 %234, 3
  %239 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %240 = extractvalue %dx.types.CBufRet.f32 %239, 0
  %241 = extractvalue %dx.types.CBufRet.f32 %239, 1
  %242 = extractvalue %dx.types.CBufRet.f32 %239, 2
  %243 = extractvalue %dx.types.CBufRet.f32 %239, 3
  %244 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %245 = extractvalue %dx.types.CBufRet.f32 %244, 0
  %246 = extractvalue %dx.types.CBufRet.f32 %244, 1
  %247 = extractvalue %dx.types.CBufRet.f32 %244, 2
  %248 = extractvalue %dx.types.CBufRet.f32 %244, 3
  %249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %250 = extractvalue %dx.types.CBufRet.f32 %249, 0
  %251 = extractvalue %dx.types.CBufRet.f32 %249, 1
  %252 = extractvalue %dx.types.CBufRet.f32 %249, 2
  %253 = extractvalue %dx.types.CBufRet.f32 %249, 3
  %254 = fmul fast float %235, %11
  %255 = call float @dx.op.tertiary.f32(i32 46, float %12, float %236, float %254)  ; FMad(a,b,c)
  %256 = call float @dx.op.tertiary.f32(i32 46, float %13, float %237, float %255)  ; FMad(a,b,c)
  %257 = call float @dx.op.tertiary.f32(i32 46, float %14, float %238, float %256)  ; FMad(a,b,c)
  %258 = fmul fast float %240, %11
  %259 = call float @dx.op.tertiary.f32(i32 46, float %12, float %241, float %258)  ; FMad(a,b,c)
  %260 = call float @dx.op.tertiary.f32(i32 46, float %13, float %242, float %259)  ; FMad(a,b,c)
  %261 = call float @dx.op.tertiary.f32(i32 46, float %14, float %243, float %260)  ; FMad(a,b,c)
  %262 = fmul fast float %245, %11
  %263 = call float @dx.op.tertiary.f32(i32 46, float %12, float %246, float %262)  ; FMad(a,b,c)
  %264 = call float @dx.op.tertiary.f32(i32 46, float %13, float %247, float %263)  ; FMad(a,b,c)
  %265 = call float @dx.op.tertiary.f32(i32 46, float %14, float %248, float %264)  ; FMad(a,b,c)
  %266 = fmul fast float %250, %11
  %267 = call float @dx.op.tertiary.f32(i32 46, float %12, float %251, float %266)  ; FMad(a,b,c)
  %268 = call float @dx.op.tertiary.f32(i32 46, float %13, float %252, float %267)  ; FMad(a,b,c)
  %269 = call float @dx.op.tertiary.f32(i32 46, float %14, float %253, float %268)  ; FMad(a,b,c)
  %270 = extractvalue %dx.types.CBufRet.f32 %205, 3
  %271 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %272 = extractvalue %dx.types.CBufRet.f32 %271, 0
  %273 = extractvalue %dx.types.CBufRet.f32 %271, 1
  %274 = extractvalue %dx.types.CBufRet.f32 %271, 2
  %275 = extractvalue %dx.types.CBufRet.f32 %271, 3
  %276 = call float @dx.op.dot4.f32(i32 56, float %11, float %12, float %13, float %14, float %272, float %273, float %274, float %275)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %277 = call float @dx.op.unary.f32(i32 7, float %276)  ; Saturate(value)
  %278 = fmul fast float %216, %2
  %279 = fmul fast float %217, %3
  %280 = fmul fast float %218, %4
  %281 = fmul fast float %270, %5
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %278)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %279)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %280)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %281)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %231)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %232)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %233)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %277)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %257)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %261)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %265)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %269)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!7 = !{[18 x i32] [i32 16, i32 16, i32 61680, i32 61680, i32 61680, i32 61680, i32 119, i32 119, i32 119, i32 0, i32 256, i32 512, i32 0, i32 0, i32 1, i32 2, i32 4, i32 8]}
!8 = !{void ()* @VSBasicVertexLightingTxVc, !"VSBasicVertexLightingTxVc", !9, !4, null}
!9 = !{!10, !19, null}
!10 = !{!11, !14, !16, !18}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 2, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{i32 3, !"COLOR", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 3, i8 0, !13}
!19 = !{!20, !21, !23, !24}
!20 = !{i32 0, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 0, i8 0, !13}
!21 = !{i32 1, !"COLOR", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!22 = !{i32 1}
!23 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 2, i8 0, !17}
!24 = !{i32 3, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 3, i8 0, !13}

#endif

const unsigned char BasicEffect_VSBasicVertexLightingTxVc[] = {
  0x44, 0x58, 0x42, 0x43, 0xeb, 0xfb, 0x50, 0xc9, 0xdb, 0xd2, 0x29, 0x04,
  0x8e, 0x06, 0xb0, 0xdc, 0x66, 0xa2, 0x2b, 0x71, 0x01, 0x00, 0x00, 0x00,
  0x27, 0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00,
  0x1b, 0x03, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0xeb, 0x03, 0x00, 0x00,
  0x07, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xaa, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50,
  0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d,
  0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x4f, 0x53, 0x47, 0x31, 0xa9, 0x00,
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
  0x6f, 0x6e, 0x00, 0x50, 0x53, 0x56, 0x30, 0x60, 0x01, 0x00, 0x00, 0x30,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00, 0x00, 0x00, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x03, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x02, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x03, 0x03, 0x04, 0x00, 0x00, 0xf0,
  0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0,
  0xf0, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x77,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08,
  0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0x88, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e, 0x38, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x32, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c,
  0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
  0x56, 0x53, 0x42, 0x61, 0x73, 0x69, 0x63, 0x56, 0x65, 0x72, 0x74, 0x65,
  0x78, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x56,
  0x63, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0x6c, 0xb9, 0x74, 0x58,
  0x7d, 0xca, 0x78, 0x8d, 0x5b, 0xc5, 0x90, 0x1a, 0x7e, 0xd2, 0xbd, 0x44,
  0x58, 0x49, 0x4c, 0x18, 0x10, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0x06,
  0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21,
  0x0c, 0x00, 0x00, 0xfd, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41,
  0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25,
  0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42,
  0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a,
  0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00,
  0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41,
  0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51,
  0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff,
  0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff,
  0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00,
  0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13,
  0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89,
  0x20, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20,
  0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84,
  0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10,
  0x90, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0,
  0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c,
  0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3, 0x30,
  0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06, 0x62, 0x0a, 0x31, 0x10, 0xc3, 0x40,
  0x4e, 0x51, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x86, 0x81, 0xa0, 0xa3,
  0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98,
  0xfc, 0xe2, 0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x40, 0xc5, 0x3d, 0xc3, 0xe5,
  0x4f, 0xd8, 0x43, 0x48, 0x7e, 0x08, 0x34, 0xc3, 0x42, 0xa0, 0x60, 0x2a,
  0x84, 0x44, 0x50, 0x04, 0x55, 0xa5, 0x18, 0x88, 0x61, 0x18, 0xe8, 0x9a,
  0x23, 0x08, 0x8a, 0x41, 0x11, 0x05, 0x41, 0x64, 0xa4, 0x0d, 0x04, 0x0c,
  0x23, 0x10, 0xc3, 0x30, 0xc2, 0x30, 0xe4, 0x80, 0x97, 0x04, 0xdd, 0x55,
  0x87, 0x23, 0x4d, 0x0b, 0x80, 0x39, 0xd4, 0xe4, 0xa7, 0x40, 0x04, 0x30,
  0xc4, 0x44, 0x44, 0x12, 0x6a, 0x3a, 0xcf, 0x1b, 0xbe, 0xef, 0xf3, 0xbc,
  0x0e, 0xfc, 0x40, 0x0a, 0x53, 0x82, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87,
  0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87,
  0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00,
  0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0,
  0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60,
  0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60,
  0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0,
  0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40,
  0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x28, 0x40, 0x00, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x80, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xe3, 0x00, 0x01, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x02, 0x02,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x05,
  0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e,
  0x0b, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86,
  0x3c, 0x1a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x64, 0x81, 0x00, 0x13, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19,
  0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a,
  0x60, 0x04, 0xa0, 0x18, 0x0a, 0xd8, 0xa0, 0x0c, 0xca, 0xa3, 0x1c, 0x8a,
  0x80, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x84, 0x32, 0x28, 0x02, 0x12, 0x67,
  0x00, 0x68, 0x1c, 0x4b, 0x82, 0x20, 0xf8, 0xe4, 0x03, 0xf8, 0xe4, 0x03,
  0xf8, 0xe4, 0x03, 0xf8, 0xe4, 0x83, 0x7b, 0xb8, 0x87, 0x7b, 0x00, 0x40,
  0x04, 0x84, 0x00, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x79,
  0x18, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46,
  0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b,
  0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1,
  0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa,
  0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10,
  0x04, 0x13, 0x04, 0x42, 0x99, 0x20, 0x10, 0xcb, 0x06, 0x61, 0x20, 0x26,
  0x08, 0x04, 0xb3, 0x41, 0x18, 0x0c, 0x0a, 0x76, 0x73, 0x1b, 0x06, 0xc4,
  0x20, 0x26, 0x08, 0x62, 0x70, 0x11, 0x98, 0x20, 0x10, 0xcd, 0x06, 0x84,
  0x50, 0x16, 0x82, 0x18, 0x18, 0x60, 0x43, 0xd0, 0x6c, 0x20, 0x00, 0xc0,
  0x01, 0x26, 0x08, 0x63, 0x80, 0x6d, 0x08, 0xa0, 0x09, 0x82, 0x00, 0x30,
  0xb3, 0x9a, 0x12, 0x0a, 0x9b, 0x4b, 0x1b, 0xb3, 0x2a, 0x93, 0xa3, 0x2b,
  0xc3, 0x63, 0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0xa3, 0xc2, 0xb3,
  0x1a, 0xe3, 0x32, 0x65, 0xf5, 0x05, 0xf5, 0x36, 0x97, 0x46, 0x97, 0xf6,
  0xe6, 0x36, 0x41, 0x28, 0xa4, 0x09, 0x42, 0x31, 0x6d, 0x08, 0x88, 0x09,
  0x42, 0x41, 0x4d, 0x10, 0x08, 0x67, 0x82, 0x40, 0x3c, 0x1b, 0x84, 0x4c,
  0xdb, 0xb0, 0x10, 0x54, 0x65, 0x5d, 0xd6, 0x80, 0x11, 0xd6, 0x46, 0xc3,
  0xe9, 0x49, 0xaa, 0x29, 0x88, 0x69, 0x82, 0x50, 0x54, 0x13, 0x04, 0x02,
  0xda, 0x20, 0x64, 0xdf, 0x86, 0x65, 0xe8, 0x2a, 0xeb, 0xb2, 0x06, 0x6f,
  0xb0, 0xc0, 0x60, 0x82, 0x40, 0x44, 0x44, 0xa8, 0x8a, 0xb0, 0x86, 0x9e,
  0x9e, 0xa4, 0x88, 0x26, 0x08, 0x85, 0xb5, 0x41, 0xc8, 0xb2, 0x0d, 0x8b,
  0x18, 0x8c, 0x41, 0x65, 0x5d, 0xd6, 0x40, 0x06, 0x62, 0x60, 0x95, 0x01,
  0x8b, 0xa1, 0x27, 0xa6, 0x27, 0xa9, 0x0d, 0x4b, 0x76, 0x06, 0x95, 0x75,
  0x59, 0x03, 0x96, 0x59, 0xdb, 0x06, 0x82, 0x0b, 0x03, 0x33, 0x40, 0x83,
  0x0d, 0x0b, 0x71, 0x06, 0x95, 0x75, 0x91, 0xc1, 0x80, 0x11, 0xd6, 0xb6,
  0x21, 0x18, 0x36, 0x2c, 0xc3, 0x19, 0x54, 0xd6, 0x1a, 0x90, 0xc1, 0x80,
  0x0d, 0xd6, 0xb6, 0x61, 0x11, 0x83, 0x31, 0xa8, 0xac, 0x8b, 0x0c, 0x06,
  0x32, 0x10, 0x03, 0xab, 0x0c, 0x36, 0x2c, 0x19, 0x55, 0x79, 0x17, 0x36,
  0x60, 0x99, 0xb5, 0x6d, 0x20, 0xd4, 0x80, 0x0d, 0xda, 0xc0, 0x0d, 0x36,
  0x0c, 0x69, 0xf0, 0x06, 0xc0, 0x86, 0x42, 0x9a, 0xe0, 0xe0, 0x01, 0xaa,
  0xb0, 0xb1, 0xd9, 0xb5, 0xb9, 0xa4, 0x91, 0x95, 0xb9, 0xd1, 0x4d, 0x09,
  0x82, 0x2a, 0x64, 0x78, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
  0x53, 0x02, 0xa2, 0x09, 0x19, 0x9e, 0x8b, 0x5d, 0x18, 0x9b, 0x5d, 0x99,
  0xdc, 0x94, 0xc0, 0xa8, 0x43, 0x86, 0xe7, 0x32, 0x87, 0x16, 0x46, 0x56,
  0x26, 0xd7, 0xf4, 0x46, 0x56, 0xc6, 0x36, 0x25, 0x40, 0xca, 0x90, 0xe1,
  0xb9, 0xc8, 0x95, 0xcd, 0xbd, 0xd5, 0xc9, 0x8d, 0x95, 0xcd, 0x4d, 0x09,
  0x9c, 0x3a, 0x64, 0x78, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x53,
  0x74, 0x61, 0x74, 0x65, 0x53, 0x02, 0xa8, 0x0e, 0x19, 0x9e, 0x4b, 0x99,
  0x1b, 0x9d, 0x5c, 0x1e, 0xd4, 0x5b, 0x9a, 0x1b, 0xdd, 0xdc, 0x94, 0x00,
  0x0e, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33,
  0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98,
  0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33,
  0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05,
  0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43,
  0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08,
  0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78,
  0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1,
  0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33,
  0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e,
  0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03,
  0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60,
  0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80,
  0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8,
  0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18,
  0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee,
  0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c,
  0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c,
  0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43,
  0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3,
  0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83,
  0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21,
  0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca,
  0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef,
  0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c,
  0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f,
  0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x06, 0x90, 0xbd, 0xec, 0x06, 0x48, 0x88, 0xf0, 0x12,
  0xd1, 0x44, 0x5c, 0x25, 0x62, 0x1c, 0x13, 0xd2, 0x18, 0xed, 0xf5, 0x0a,
  0x56, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9,
  0xc5, 0x6d, 0xdb, 0xc1, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15,
  0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc,
  0xb6, 0x25, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11,
  0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x03, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f,
  0xce, 0x74, 0xfb, 0xc5, 0x6d, 0x9b, 0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8,
  0x83, 0x33, 0xe1, 0x7e, 0x71, 0xdb, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c,
  0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x02,
  0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x93, 0x13, 0x11, 0x28, 0x35, 0x3d,
  0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x08, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f,
  0x44, 0x34, 0x21, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0xc1, 0x33, 0x5c,
  0xbe, 0xf3, 0xf8, 0x54, 0x03, 0x44, 0x98, 0x5f, 0xdc, 0x36, 0x00, 0x61,
  0x20, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x94, 0x8d, 0x00, 0x50, 0x51,
  0x02, 0x44, 0x14, 0x5c, 0x71, 0x95, 0x5d, 0x29, 0x14, 0xc2, 0x0c, 0x40,
  0xc9, 0x94, 0x5b, 0xa9, 0x94, 0x4b, 0x19, 0x95, 0x5c, 0x81, 0x94, 0x48,
  0x61, 0x94, 0x49, 0xa1, 0x94, 0x44, 0x51, 0x14, 0x44, 0x59, 0x14, 0x4b,
  0xc1, 0x14, 0x07, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x37, 0x02,
  0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0x02, 0x00, 0x00, 0x00, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0xa0, 0xb5, 0x01, 0x04, 0x06, 0x6b, 0xb0,
  0x06, 0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x76, 0x80, 0xa5,
  0x01, 0x1b, 0x90, 0xc1, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6,
  0x1d, 0x64, 0x6a, 0xd0, 0x06, 0x1e, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x06, 0x1e, 0x68, 0x6b, 0xe0, 0x06, 0x63, 0x90, 0x8d, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0x91, 0x07, 0x1b, 0x1b, 0xbc, 0x41, 0x19, 0x68,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xe8, 0x01, 0xa7, 0x06, 0x70,
  0x80, 0x06, 0xdb, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7b, 0xd0,
  0xad, 0x41, 0x1c, 0x88, 0x01, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x06, 0x1f, 0x78, 0x73, 0x20, 0x07, 0x6a, 0xd0, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0xd1, 0x07, 0x1f, 0x1d, 0xcc, 0x01, 0x19, 0x78, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xf8, 0x01, 0x18, 0xd4, 0x01, 0x1d,
  0xa4, 0xc1, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1f, 0x84,
  0x41, 0x1d, 0xd4, 0x41, 0x1b, 0x80, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0xa0, 0x20, 0x06, 0x76, 0x60, 0x07, 0x67, 0x10, 0x06, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x84, 0xc2, 0x18, 0xdc, 0xc1, 0x1d,
  0xb0, 0x81, 0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x21, 0x0a,
  0x64, 0x80, 0x07, 0x78, 0xe0, 0x06, 0x63, 0x30, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0x55, 0x1f, 0x9c, 0x81, 0x53, 0x07, 0xa3, 0x09, 0x01, 0x30,
  0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x50, 0x89, 0x02, 0x1b, 0x4c, 0x62, 0x30, 0x9a,
  0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd5, 0x29, 0xc4, 0x01, 0x66,
  0x06, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30,
  0x9a, 0x40, 0x0c, 0xe6, 0x4c, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0x8b, 0x15, 0xf0, 0x60, 0x72, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xb8, 0x5a, 0x21, 0x0f, 0x26, 0x27, 0x18, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0xcb, 0x15, 0xf4, 0x60, 0x72, 0x02, 0x6b, 0x2e, 0xf9, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x05, 0x0b, 0x7c, 0x70, 0x35, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xb1, 0xd0, 0x07, 0x57, 0x13,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x25, 0x0b, 0x7e, 0x70, 0x35,
  0x81, 0x31, 0x9b, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0xa2,
  0x05, 0x50, 0xd8, 0x98, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xae,
  0x5a, 0x08, 0x85, 0x8d, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0,
  0xb2, 0x05, 0x51, 0xd8, 0x98, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c,
  0x2a, 0x5c, 0x10, 0x85, 0x34, 0xb0, 0x83, 0xd1, 0x84, 0x00, 0x18, 0x4d,
  0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0xa1, 0x89, 0x8f, 0x0d, 0x4a, 0x7c,
  0x6c, 0x38, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0xca, 0x38,
  0x90, 0xc2, 0x20, 0x04, 0x83, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x01, 0x33, 0x0e, 0xa6, 0x10, 0x58, 0x11, 0xc8, 0xc7, 0x0a, 0x41, 0x3e,
  0x56, 0x0c, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x8a, 0x1c,
  0x5c, 0xa1, 0x0e, 0x42, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60,
  0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x42, 0x07,
  0x59, 0xc8, 0x03, 0x52, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xd8, 0xc1,
  0x16, 0xfa, 0x00, 0x16, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x06, 0xc1, 0x16, 0x3d, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x5c, 0xf0, 0xc0, 0x0b, 0x7a, 0xb0, 0x04, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x70, 0xc5, 0x43, 0x2f, 0xe8, 0xc1, 0x12, 0x98, 0xd2, 0x07,
  0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6b, 0x1e, 0x7e, 0xa1,
  0x0f, 0x94, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x7a, 0x00,
  0x87, 0x3e, 0x50, 0x02, 0x4b, 0x40, 0x41, 0x3e, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x70, 0xd9, 0x83, 0x38, 0x80, 0x42, 0x12, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0xc1, 0x75, 0x0f, 0xe3, 0x00, 0x0a, 0x49, 0x30, 0x62,
  0xb0, 0x00, 0x20, 0x08, 0x06, 0x4a, 0x3f, 0xf8, 0xc2, 0x41, 0x04, 0x07,
  0x11, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0xd3, 0x0f, 0xe0, 0x10,
  0x58, 0x90, 0xc8, 0xc7, 0x84, 0x43, 0x3e, 0x36, 0x14, 0xf2, 0x19, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x83, 0xca, 0x1f, 0xd0, 0xe1, 0x15, 0xee, 0x61,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x12, 0x09, 0x76, 0x98, 0x85, 0x7e, 0x18,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xa8, 0x4c, 0x02, 0x1e, 0x6e, 0x21, 0x1c, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0xd2, 0x60,
  0x89, 0x8f, 0xa5, 0xc1, 0x12, 0x1f, 0x4b, 0x83, 0x25, 0x3e, 0x23, 0x06,
  0x0b, 0x00, 0x82, 0x60, 0xa0, 0xc4, 0x84, 0x3c, 0x0c, 0x42, 0x30, 0x08,
  0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0x31, 0x41, 0x0f, 0x81,
  0x05, 0x84, 0x7c, 0x4c, 0x20, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x55, 0x4c, 0xec, 0x83, 0x38, 0xe4, 0xc3, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0x41, 0x55, 0x13, 0xff, 0x60, 0x0e, 0x2c, 0x31, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x50, 0xe5, 0xc4, 0x48, 0xa8, 0xc3, 0x3c, 0x8c, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0xf1, 0xc1, 0x12, 0x1f, 0xe3, 0x83,
  0x25, 0x3e, 0xc6, 0x07, 0x4b, 0x7c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1,
  0x40, 0x21, 0x8b, 0x92, 0x18, 0x84, 0x60, 0x10, 0x82, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0x60, 0xc8, 0xe2, 0x24, 0x02, 0x0b, 0x08, 0xf9, 0x98,
  0x40, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0xb2, 0x70,
  0x89, 0x7a, 0x68, 0x89, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x0a, 0x2d, 0x64,
  0x22, 0x1f, 0x42, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34,
  0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x62, 0x0b, 0x9b,
  0xe8, 0x07, 0x92, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d,
  0x18, 0x04, 0x7b, 0x85, 0x25, 0x3e, 0xf6, 0x0a, 0x4b, 0x7c, 0xec, 0x15,
  0x96, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x81, 0x72, 0x17, 0x38,
  0x31, 0x08, 0xc1, 0x20, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xc0,
  0xdc, 0x85, 0x4e, 0x04, 0x16, 0x10, 0xf2, 0x31, 0x81, 0x90, 0x8f, 0xa5,
  0xc4, 0x1d, 0xc4, 0xc7, 0x54, 0xe2, 0x0e, 0xe2, 0x63, 0x2b, 0x61, 0x06,
  0xf1, 0x31, 0x96, 0x30, 0x83, 0xf8, 0x58, 0x4b, 0x54, 0xf1, 0x31, 0x97,
  0xa8, 0xe2, 0x63, 0xa2, 0xe0, 0x07, 0xf2, 0x31, 0x98, 0x08, 0xe2, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x5f, 0xa8, 0x05, 0x32, 0x0a,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x7f, 0xb1, 0x16, 0xc8,
  0x28, 0x04, 0x66, 0x0a, 0x6f, 0x20, 0x1f, 0xa3, 0x89, 0x20, 0x3e, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0x89, 0x86, 0x5b, 0x28, 0xa7, 0x10,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x35, 0x1a, 0x6f, 0xa1, 0x9c,
  0x42, 0x60, 0xaa, 0x00, 0x06, 0xf2, 0x31, 0x9c, 0x08, 0xe2, 0x33, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x69, 0xc8, 0x05, 0xb3, 0x0a, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xa7, 0x31, 0x17, 0xcc, 0x2a,
  0x04, 0xf6, 0x07, 0xae, 0x20, 0x1f, 0x0b, 0xf8, 0x40, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x70, 0xa9, 0x86, 0x5d, 0xf0, 0xc1, 0x2b, 0x04,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xad, 0xc6, 0x5d, 0xf0, 0xc1,
  0x2b, 0x04, 0x06, 0x07, 0xb2, 0x20, 0x1f, 0x0b, 0xda, 0x40, 0x3e, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xb9, 0x86, 0x5e, 0xb4, 0xc1, 0x2c,
  0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xbd, 0xc6, 0x5e, 0xb4,
  0xc1, 0x2c, 0x04, 0x16, 0x06, 0xb6, 0x20, 0x1f, 0x0b, 0x3c, 0xf9, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x25, 0x1b, 0x7e, 0xe1, 0xdd, 0x42,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x6c, 0xfc, 0x85, 0x77,
  0x0b, 0xc1, 0x70, 0x44, 0x85, 0x16, 0xc4, 0x37, 0x1c, 0x21, 0xa5, 0x05,
  0xf1, 0x0d, 0x47, 0x3c, 0x6a, 0x41, 0x7c, 0xd3, 0x0d, 0x6b, 0xc1, 0x16,
  0xc3, 0x74, 0x03, 0x5b, 0xb4, 0xc5, 0x30, 0xdd, 0xd0, 0x16, 0x6e, 0x31,
  0xd8, 0xb0, 0xc9, 0xc7, 0x06, 0x4c, 0x3e, 0x36, 0x54, 0xf2, 0x19, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x83, 0xca, 0x37, 0x50, 0xe3, 0x2d, 0x68, 0x63,
  0x34, 0x21, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0x11, 0x0f,
  0xd1, 0xa0, 0xe6, 0x62, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x9c, 0xf1,
  0x18, 0x8d, 0x88, 0x2e, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0x21,
  0x0f, 0xd2, 0x70, 0xea, 0xc2, 0x86, 0x45, 0x3e, 0x36, 0x2c, 0xf2, 0xb1,
  0x61, 0x91, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xe9, 0x91,
  0x1a, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xea, 0xa1, 0x1a,
  0xc3, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xeb, 0xb1, 0x1a, 0x83,
  0x0d, 0x8a, 0x7c, 0x6c, 0x58, 0xe4, 0x63, 0x03, 0x23, 0x9f, 0x11, 0x03,
  0x03, 0x00, 0x41, 0x30, 0x60, 0xde, 0x03, 0x36, 0x86, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0x60, 0xe0, 0x23, 0x36, 0x86, 0x11, 0x03, 0x03, 0x00,
  0x41, 0x30, 0x60, 0xe2, 0x43, 0x36, 0x06, 0x1b, 0xde, 0x40, 0x3e, 0x36,
  0xb0, 0x81, 0x7c, 0x6c, 0x48, 0x03, 0xf9, 0xd8, 0xf5, 0x0e, 0xf2, 0x19,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x4b, 0x3e, 0x7c, 0xe3, 0xea, 0x85,
  0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xae, 0xf9, 0xf8, 0x8d, 0x6b,
  0x15, 0x02, 0xd3, 0xe2, 0x41, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x70, 0xd5, 0x47, 0x78, 0x68, 0xbf, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0xc1, 0x65, 0x1f, 0xe2, 0xa1, 0xb5, 0x42, 0x60, 0xdd, 0x3c, 0xc8,
  0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0xfc, 0x20, 0x8f, 0x2e,
  0x1c, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xf2, 0xa3, 0x3c,
  0xba, 0x57, 0x08, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xda, 0x8f,
  0xf2, 0x60, 0x8d, 0xfb, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x04, 0x1b, 0x16, 0xf9, 0xd8, 0x90, 0xc8, 0xc7, 0x86, 0x43,
  0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0x89, 0x08, 0x7b, 0xcc,
  0xc6, 0x7f, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0x82, 0x1d, 0x03, 0x7c, 0xec, 0x18, 0xe0, 0x63, 0xc7, 0x00, 0x1f, 0xd3,
  0x44, 0x42, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xa5, 0x48,
  0x7d, 0x68, 0xf0, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xa5,
  0x22, 0xf6, 0xa1, 0xf9, 0x42, 0x60, 0x1d, 0x49, 0xc8, 0x67, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0x2e, 0x16, 0xc1, 0x8f, 0x4e, 0x1e, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x5a, 0x24, 0x3f, 0x3a, 0x70, 0x08,
  0x0c, 0x0c, 0x4c, 0x42, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70,
  0xbd, 0xc8, 0x7e, 0x80, 0x01, 0x3d, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x70, 0xc1, 0x08, 0x7f, 0x80, 0x81, 0x38, 0x04, 0xa3, 0x09, 0x74,
  0x00, 0x8c, 0x26, 0xd4, 0x41, 0x30, 0x9a, 0x60, 0x07, 0x82, 0x0d, 0x8a,
  0x7c, 0x6c, 0x40, 0xe4, 0x63, 0x83, 0x21, 0x9f, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xa8, 0x70, 0x44, 0x44, 0xd2, 0xe3, 0x3d, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xea, 0x91, 0x13, 0x71, 0x0f, 0x10,
  0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1,
  0x04, 0x62, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x4a, 0x4c, 0x58,
  0x64, 0x3e, 0xf0, 0x63, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34,
  0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c,
  0xaa, 0x33, 0x89, 0x11, 0xfc, 0x68, 0x91, 0xd1, 0x84, 0x00, 0x18, 0x4d,
  0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x06, 0x9b, 0xe6, 0x43,
  0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xb1, 0x09, 0x8e, 0xcc,
  0xc7, 0x14, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xd5, 0x26, 0x39,
  0x32, 0x1f, 0x53, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x9b,
  0xe8, 0xc8, 0x7c, 0x4c, 0x81, 0x49, 0xf7, 0x21, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0xe0, 0x84, 0x47, 0xee, 0x43, 0x0a, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0x8a, 0x93, 0x1e, 0xb9, 0x0f, 0x29, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x4b, 0x4e, 0x7c, 0xe4, 0x3e, 0xa4,
  0xc0, 0xa2, 0xfd, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c,
  0x74, 0x02, 0x26, 0xfb, 0x11, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x70, 0xd5, 0x49, 0x98, 0xec, 0x47, 0x14, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0xc1, 0x65, 0x27, 0x62, 0xb2, 0x1f, 0x51, 0x60, 0xd0, 0x7f, 0xc8,
  0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x3c, 0x21, 0x93, 0xff,
  0x80, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xf2, 0xa4, 0x4c,
  0xfe, 0x03, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0xd2, 0x13,
  0x33, 0xf9, 0x0f, 0x28, 0x18, 0x4d, 0x08, 0x85, 0x61, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0xaa, 0x3e, 0x39, 0x13, 0x17, 0x91, 0x91, 0xd1, 0x84,
  0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86,
  0x11, 0x83, 0x06, 0x00, 0x41, 0x30, 0x80, 0x46, 0xc5, 0x4d, 0x52, 0x04,
  0x45, 0x4e, 0xc4, 0x44, 0x88, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04,
  0xc1, 0x80, 0x31, 0x15, 0x3d, 0x09, 0xcc, 0x0f, 0x68, 0x44, 0x3e, 0xe6,
  0x07, 0x34, 0x22, 0x1f, 0xf3, 0x03, 0x1a, 0x91, 0x8f, 0x2d, 0x34, 0x22,
  0x9f, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x5a, 0x25, 0x4e, 0x48,
  0x85, 0x54, 0xf8, 0x84, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xa4,
  0x55, 0xe2, 0x84, 0x54, 0x48, 0xa5, 0x4e, 0x86, 0x11, 0x83, 0x04, 0x00,
  0x41, 0x30, 0x40, 0x5a, 0x25, 0x4e, 0x48, 0x85, 0x54, 0xf2, 0x44, 0x18,
  0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xa4, 0x55, 0xe2, 0x84, 0x54, 0x48,
  0x45, 0x4f, 0x82, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x5a, 0x25,
  0x4e, 0x4a, 0x85, 0x54, 0xf8, 0x64, 0x0e, 0x46, 0x0c, 0x12, 0x00, 0x04,
  0xc1, 0x00, 0x69, 0x95, 0x38, 0x29, 0x15, 0x52, 0xa9, 0x13, 0x39, 0x18,
  0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xa4, 0x55, 0xe2, 0xa4, 0x54, 0x48,
  0x25, 0x4f, 0xe2, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x56,
  0x89, 0x93, 0x52, 0x21, 0x15, 0x3d, 0x29, 0x46, 0x0c, 0x12, 0x00, 0x04,
  0xc1, 0x00, 0x69, 0x95, 0x38, 0xf1, 0x13, 0x52, 0xe1, 0x13, 0x1a, 0x19,
  0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xa4, 0x55, 0xe2, 0xc4, 0x4f, 0x48,
  0xa5, 0x4e, 0x66, 0x64, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x56,
  0x89, 0x93, 0x50, 0x21, 0x15, 0x3e, 0xc9, 0x46, 0x0c, 0x12, 0x00, 0x04,
  0xc1, 0x00, 0x69, 0x95, 0x38, 0x09, 0x15, 0x52, 0xa9, 0x93, 0x6a, 0xc4,
  0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x56, 0x89, 0x93, 0x50, 0x21, 0x95,
  0x3c, 0x89, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x69, 0x95, 0x38,
  0x09, 0x15, 0x52, 0xd1, 0x93, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00
};
