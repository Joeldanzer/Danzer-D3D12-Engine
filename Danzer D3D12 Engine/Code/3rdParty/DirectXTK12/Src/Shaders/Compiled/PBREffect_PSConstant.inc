#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float       
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: Compiled\PBREffect_PSConstant.pdb
; shader hash: ea654727b758f082689522b28bd93e48
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [388 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s1     1
;                                   texture     f32        cube      T0             t4     1
;                                   texture     f32        cube      T1             t5     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 8, 9, 10 }
;   output 1 depends on inputs: { 4, 5, 6, 8, 9, 10 }
;   output 2 depends on inputs: { 4, 5, 6, 8, 9, 10 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.TextureCube<vector<float, 3> >" = type { <3 x float> }
%hostlayout.Constants = type { <3 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, float, float, float, i32, float, float }
%struct.SamplerState = type { i32 }

define void @PSConstant() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %12 = extractvalue %dx.types.CBufRet.f32 %11, 0
  %13 = extractvalue %dx.types.CBufRet.f32 %11, 1
  %14 = extractvalue %dx.types.CBufRet.f32 %11, 2
  %15 = fsub fast float %12, %8
  %16 = fsub fast float %13, %9
  %17 = fsub fast float %14, %10
  %18 = call float @dx.op.dot3.f32(i32 55, float %15, float %16, float %17, float %15, float %16, float %17)  ; Dot3(ax,ay,az,bx,by,bz)
  %19 = call float @dx.op.unary.f32(i32 25, float %18)  ; Rsqrt(value)
  %20 = fmul fast float %15, %19
  %21 = fmul fast float %16, %19
  %22 = fmul fast float %17, %19
  %23 = call float @dx.op.dot3.f32(i32 55, float %5, float %6, float %7, float %5, float %6, float %7)  ; Dot3(ax,ay,az,bx,by,bz)
  %24 = call float @dx.op.unary.f32(i32 25, float %23)  ; Rsqrt(value)
  %25 = fmul fast float %24, %5
  %26 = fmul fast float %24, %6
  %27 = fmul fast float %24, %7
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.f32 %28, 1
  %31 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %32 = extractvalue %dx.types.CBufRet.f32 %31, 0
  %33 = extractvalue %dx.types.CBufRet.f32 %31, 1
  %34 = extractvalue %dx.types.CBufRet.f32 %31, 2
  %35 = call float @dx.op.dot3.f32(i32 55, float %25, float %26, float %27, float %20, float %21, float %22)  ; Dot3(ax,ay,az,bx,by,bz)
  %36 = call float @dx.op.unary.f32(i32 7, float %35)  ; Saturate(value)
  %37 = fmul fast float %30, %30
  %38 = fmul fast float %32, %29
  %39 = fmul fast float %33, %29
  %40 = fmul fast float %34, %29
  %41 = fsub fast float %32, %38
  %42 = fsub fast float %33, %39
  %43 = fsub fast float %34, %40
  %44 = fadd fast float %32, 0xBFA47AE140000000
  %45 = fadd fast float %33, 0xBFA47AE140000000
  %46 = fadd fast float %34, 0xBFA47AE140000000
  %47 = fmul fast float %44, %29
  %48 = fmul fast float %45, %29
  %49 = fmul fast float %46, %29
  %50 = fadd fast float %47, 0x3FA47AE140000000
  %51 = fadd fast float %48, 0x3FA47AE140000000
  %52 = fadd fast float %49, 0x3FA47AE140000000
  br label %53

; <label>:53                                      ; preds = %53, %0
  %54 = phi float [ 0.000000e+00, %0 ], [ %150, %53 ]
  %55 = phi float [ 0.000000e+00, %0 ], [ %151, %53 ]
  %56 = phi float [ 0.000000e+00, %0 ], [ %152, %53 ]
  %57 = phi i32 [ 0, %0 ], [ %153, %53 ]
  %58 = add nuw nsw i32 %57, 16
  %59 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %58)  ; CBufferLoadLegacy(handle,regIndex)
  %60 = extractvalue %dx.types.CBufRet.f32 %59, 0
  %61 = extractvalue %dx.types.CBufRet.f32 %59, 1
  %62 = extractvalue %dx.types.CBufRet.f32 %59, 2
  %63 = fsub fast float -0.000000e+00, %60
  %64 = fsub fast float -0.000000e+00, %61
  %65 = fsub fast float -0.000000e+00, %62
  %66 = call float @dx.op.dot3.f32(i32 55, float %63, float %64, float %65, float %63, float %64, float %65)  ; Dot3(ax,ay,az,bx,by,bz)
  %67 = call float @dx.op.unary.f32(i32 25, float %66)  ; Rsqrt(value)
  %68 = fmul fast float %67, %63
  %69 = fmul fast float %67, %64
  %70 = fmul fast float %67, %65
  %71 = fadd fast float %68, %20
  %72 = fadd fast float %69, %21
  %73 = fadd fast float %70, %22
  %74 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %71, float %72, float %73)  ; Dot3(ax,ay,az,bx,by,bz)
  %75 = call float @dx.op.unary.f32(i32 25, float %74)  ; Rsqrt(value)
  %76 = fmul fast float %71, %75
  %77 = fmul fast float %72, %75
  %78 = fmul fast float %73, %75
  %79 = call float @dx.op.dot3.f32(i32 55, float %25, float %26, float %27, float %68, float %69, float %70)  ; Dot3(ax,ay,az,bx,by,bz)
  %80 = call float @dx.op.unary.f32(i32 7, float %79)  ; Saturate(value)
  %81 = call float @dx.op.dot3.f32(i32 55, float %68, float %69, float %70, float %76, float %77, float %78)  ; Dot3(ax,ay,az,bx,by,bz)
  %82 = call float @dx.op.unary.f32(i32 7, float %81)  ; Saturate(value)
  %83 = call float @dx.op.dot3.f32(i32 55, float %25, float %26, float %27, float %76, float %77, float %78)  ; Dot3(ax,ay,az,bx,by,bz)
  %84 = call float @dx.op.unary.f32(i32 7, float %83)  ; Saturate(value)
  %85 = fmul fast float %30, 2.000000e+00
  %86 = fmul fast float %82, %82
  %87 = fmul fast float %86, %85
  %88 = fadd fast float %87, -5.000000e-01
  %89 = fsub fast float 1.000000e+00, %80
  %90 = call float @dx.op.unary.f32(i32 23, float %89)  ; Log(value)
  %91 = fmul fast float %90, 5.000000e+00
  %92 = call float @dx.op.unary.f32(i32 21, float %91)  ; Exp(value)
  %93 = fmul fast float %92, %88
  %94 = fadd fast float %93, 1.000000e+00
  %95 = fsub fast float 1.000000e+00, %36
  %96 = call float @dx.op.unary.f32(i32 23, float %95)  ; Log(value)
  %97 = fmul fast float %96, 5.000000e+00
  %98 = call float @dx.op.unary.f32(i32 21, float %97)  ; Exp(value)
  %99 = fmul fast float %98, %88
  %100 = fadd fast float %99, 1.000000e+00
  %101 = fmul fast float %100, %94
  %102 = fmul fast float %37, %37
  %103 = fadd fast float %102, -1.000000e+00
  %104 = fmul fast float %84, %84
  %105 = fmul fast float %104, %103
  %106 = fadd fast float %105, 1.000000e+00
  %107 = fmul fast float %106, %106
  %108 = fmul fast float %107, 0x400921FB60000000
  %109 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %108)  ; FMax(a,b)
  %110 = fdiv fast float %102, %109
  %111 = fsub fast float 0x3FEEB851E0000000, %47
  %112 = fsub fast float 0x3FEEB851E0000000, %48
  %113 = fsub fast float 0x3FEEB851E0000000, %49
  %114 = fsub fast float 1.000000e+00, %82
  %115 = call float @dx.op.unary.f32(i32 23, float %114)  ; Log(value)
  %116 = fmul fast float %115, 5.000000e+00
  %117 = call float @dx.op.unary.f32(i32 21, float %116)  ; Exp(value)
  %118 = fmul fast float %117, %111
  %119 = fmul fast float %117, %112
  %120 = fmul fast float %117, %113
  %121 = fadd fast float %118, %50
  %122 = fadd fast float %119, %51
  %123 = fadd fast float %120, %52
  %124 = fsub fast float 1.000000e+00, %86
  %125 = fmul fast float %102, 2.500000e-01
  %126 = fmul fast float %125, %124
  %127 = fadd fast float %126, %86
  %128 = fdiv fast float 1.000000e+00, %127
  %129 = fmul fast float %128, %110
  %130 = fmul fast float %129, %121
  %131 = fmul fast float %129, %122
  %132 = fmul fast float %129, %123
  %133 = add nuw nsw i32 %57, 19
  %134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %133)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.f32 %134, 0
  %136 = extractvalue %dx.types.CBufRet.f32 %134, 1
  %137 = extractvalue %dx.types.CBufRet.f32 %134, 2
  %138 = fmul fast float %135, %80
  %139 = fmul fast float %136, %80
  %140 = fmul fast float %137, %80
  %141 = fmul fast float %101, %41
  %142 = fmul fast float %101, %42
  %143 = fmul fast float %101, %43
  %144 = fadd fast float %130, %141
  %145 = fadd fast float %131, %142
  %146 = fadd fast float %132, %143
  %147 = fmul fast float %138, %144
  %148 = fmul fast float %139, %145
  %149 = fmul fast float %140, %146
  %150 = fadd fast float %147, %54
  %151 = fadd fast float %148, %55
  %152 = fadd fast float %149, %56
  %153 = add nuw nsw i32 %57, 1
  %154 = icmp eq i32 %153, 3
  br i1 %154, label %155, label %53

; <label>:155                                     ; preds = %53
  %156 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %25, float %26, float %27, float undef, i32 undef, i32 undef, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %157 = extractvalue %dx.types.ResRet.f32 %156, 0
  %158 = extractvalue %dx.types.ResRet.f32 %156, 1
  %159 = extractvalue %dx.types.ResRet.f32 %156, 2
  %160 = fmul fast float %157, %41
  %161 = fmul fast float %158, %42
  %162 = fmul fast float %159, %43
  %163 = fadd fast float %160, %150
  %164 = fadd fast float %161, %151
  %165 = fadd fast float %162, %152
  %166 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %167 = extractvalue %dx.types.CBufRet.i32 %166, 2
  %168 = sitofp i32 %167 to float
  %169 = fmul fast float %168, %30
  %170 = fsub fast float -0.000000e+00, %20
  %171 = fsub fast float -0.000000e+00, %21
  %172 = fsub fast float -0.000000e+00, %22
  %173 = call float @dx.op.dot3.f32(i32 55, float %170, float %171, float %172, float %25, float %26, float %27)  ; Dot3(ax,ay,az,bx,by,bz)
  %174 = fmul fast float %173, 2.000000e+00
  %175 = fmul fast float %174, %25
  %176 = fmul fast float %174, %26
  %177 = fmul fast float %174, %27
  %178 = fsub fast float %170, %175
  %179 = fsub fast float %171, %176
  %180 = fsub fast float %172, %177
  %181 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2, %dx.types.Handle %3, float %178, float %179, float %180, float undef, i32 undef, i32 undef, i32 undef, float %169)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %182 = extractvalue %dx.types.ResRet.f32 %181, 0
  %183 = extractvalue %dx.types.ResRet.f32 %181, 1
  %184 = extractvalue %dx.types.ResRet.f32 %181, 2
  %185 = fmul fast float %182, %50
  %186 = fmul fast float %183, %51
  %187 = fmul fast float %184, %52
  %188 = fadd fast float %163, %185
  %189 = fadd fast float %164, %186
  %190 = fadd fast float %165, %187
  %191 = extractvalue %dx.types.CBufRet.f32 %31, 3
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %188)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %189)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %190)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %191)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!13}
!dx.entryPoints = !{!14}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{!5, null, !9, !11}
!5 = !{!6, !8}
!6 = !{i32 0, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 5, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 5, i32 1, i32 5, i32 0, !7}
!9 = !{!10}
!10 = !{i32 0, %hostlayout.Constants* undef, !"", i32 0, i32 0, i32 1, i32 388, null}
!11 = !{!12}
!12 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!13 = !{[18 x i32] [i32 16, i32 4, i32 0, i32 0, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0]}
!14 = !{void ()* @PSConstant, !"PSConstant", !15, !4, null}
!15 = !{!16, !25, null}
!16 = !{!17, !19, !22, !24}
!17 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !18, i8 2, i32 1, i8 2, i32 0, i8 0, null}
!18 = !{i32 0}
!19 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 1, i8 0, !21}
!20 = !{i32 1}
!21 = !{i32 3, i32 7}
!22 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 3, i32 2, i8 0, !21}
!23 = !{i32 2}
!24 = !{i32 3, !"COLOR", i8 9, i8 0, !18, i8 2, i32 1, i8 4, i32 3, i8 0, null}
!25 = !{!26}
!26 = !{i32 0, !"SV_Target", i8 9, i8 16, !18, i8 0, i32 1, i8 4, i32 0, i8 0, !27}
!27 = !{i32 3, i32 15}

#endif

const unsigned char PBREffect_PSConstant[] = {
  0x44, 0x58, 0x42, 0x43, 0x16, 0xc9, 0x51, 0x83, 0x6a, 0x36, 0x2b, 0xb0,
  0xa5, 0x9f, 0x7e, 0x35, 0x9b, 0x25, 0x1e, 0x9a, 0x01, 0x00, 0x00, 0x00,
  0x57, 0x11, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x3b, 0x01, 0x00, 0x00,
  0xab, 0x02, 0x00, 0x00, 0x5b, 0x04, 0x00, 0x00, 0x8b, 0x04, 0x00, 0x00,
  0xa7, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x32, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67,
  0x65, 0x74, 0x00, 0x50, 0x53, 0x56, 0x30, 0x68, 0x01, 0x00, 0x00, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52,
  0x54, 0x53, 0x30, 0xa8, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a,
  0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8,
  0x01, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x98,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01,
  0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01,
  0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x58,
  0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49,
  0x4c, 0x44, 0x4e, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x50, 0x42, 0x52, 0x45,
  0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x73,
  0x74, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x48,
  0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xea,
  0x65, 0x47, 0x27, 0xb7, 0x58, 0xf0, 0x82, 0x68, 0x95, 0x22, 0xb2, 0x8b,
  0xd9, 0x3e, 0x48, 0x44, 0x58, 0x49, 0x4c, 0xa8, 0x0c, 0x00, 0x00, 0x60,
  0x00, 0x00, 0x00, 0x2a, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00,
  0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x90, 0x0c, 0x00, 0x00, 0x42,
  0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x21, 0x03, 0x00, 0x00, 0x0b,
  0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07,
  0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92,
  0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80,
  0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38,
  0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43,
  0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11,
  0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04,
  0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b,
  0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84,
  0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff,
  0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x32,
  0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04,
  0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b,
  0x84, 0xc4, 0x4c, 0x10, 0xac, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66,
  0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44,
  0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x20, 0x03,
  0x31, 0x0c, 0xc3, 0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06, 0x62, 0x0a,
  0x31, 0x10, 0xc3, 0x40, 0xce, 0x4d, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48,
  0xfe, 0x4a, 0x48, 0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0xa3, 0x62, 0x18, 0x86,
  0x81, 0xa0, 0xe2, 0x9e, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x3f, 0x04,
  0x9a, 0x61, 0x21, 0x50, 0x10, 0x15, 0x06, 0x22, 0x24, 0x69, 0x18, 0x86,
  0x81, 0x20, 0x88, 0x81, 0xa6, 0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90,
  0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0x7c, 0xe4, 0xb6, 0x11, 0x41, 0x10,
  0x04, 0x51, 0x88, 0x8a, 0x90, 0x08, 0xb2, 0x8e, 0x1a, 0x2e, 0x7f, 0xc2,
  0x1e, 0x42, 0xf2, 0xb9, 0x8d, 0x2a, 0x56, 0x62, 0xf2, 0x8b, 0xdb, 0x46,
  0xc4, 0x30, 0x0c, 0x43, 0x21, 0x30, 0x42, 0x22, 0x28, 0x9b, 0x23, 0x08,
  0x8a, 0x21, 0x11, 0x05, 0x41, 0x6c, 0xc4, 0x0d, 0x04, 0x0c, 0x23, 0x0c,
  0xc3, 0x4c, 0x64, 0x30, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e,
  0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e, 0xa3,
  0x50, 0x0f, 0xe2, 0x50, 0x0e, 0x7c, 0x60, 0x0f, 0xe5, 0x30, 0x0e, 0xf4,
  0xf0, 0x0e, 0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4,
  0xc0, 0x06, 0x60, 0x30, 0x07, 0x7e, 0x00, 0x06, 0x7e, 0x80, 0x82, 0x8f,
  0xc0, 0x61, 0x04, 0x62, 0x48, 0x02, 0x31, 0x07, 0xbe, 0xa3, 0x0e, 0x47,
  0x9a, 0x16, 0x00, 0x73, 0xa8, 0xc9, 0xe7, 0x9c, 0x46, 0x9a, 0x80, 0x66,
  0x92, 0x90, 0xf3, 0x8d, 0xe4, 0x38, 0x92, 0xe4, 0x37, 0x0c, 0x03, 0x31,
  0x0c, 0x54, 0xde, 0x24, 0x4d, 0x11, 0x25, 0x4c, 0x3e, 0x0b, 0x30, 0xcf,
  0x42, 0x44, 0xec, 0x04, 0x4c, 0x04, 0x0a, 0x08, 0x3a, 0x53, 0x82, 0x98,
  0x02, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36,
  0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e,
  0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06,
  0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07,
  0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07,
  0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c,
  0x06, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x79, 0x10, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0xf2, 0x28, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0xe4, 0x61, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x60, 0xc8, 0xe3, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x90, 0x67, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0xcf, 0x04, 0x04, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x0b, 0x08, 0x80, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x19, 0x10, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x38, 0x20,
  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01,
  0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19,
  0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a,
  0x60, 0x04, 0xa0, 0x18, 0x0a, 0xa1, 0x14, 0x4a, 0xa2, 0x10, 0x0d, 0xca,
  0xa0, 0x1c, 0x8a, 0xa0, 0x3c, 0xa8, 0x28, 0x89, 0x11, 0x80, 0x22, 0x28,
  0x84, 0x32, 0x28, 0x10, 0x0a, 0x67, 0x00, 0xc8, 0x9c, 0x01, 0x20, 0x74,
  0x06, 0x80, 0xd2, 0xb1, 0x24, 0x88, 0x00, 0x00, 0x00, 0x38, 0x8e, 0x03,
  0x38, 0x8e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x75,
  0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35,
  0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b,
  0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b,
  0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79,
  0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x62,
  0x99, 0x20, 0x10, 0xcc, 0x06, 0x61, 0x20, 0x26, 0x08, 0x44, 0xb3, 0x41,
  0x18, 0x0c, 0x0a, 0x70, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0x61,
  0xc0, 0x11, 0x98, 0x20, 0x10, 0xce, 0x04, 0x81, 0x78, 0x26, 0x08, 0x04,
  0xb4, 0x41, 0x20, 0x9c, 0x0d, 0x09, 0xa1, 0x2c, 0x04, 0x33, 0x34, 0xc4,
  0xb3, 0x21, 0x19, 0x94, 0x85, 0x68, 0x86, 0x86, 0x78, 0x36, 0x08, 0x50,
  0x34, 0x41, 0x30, 0x83, 0x6e, 0x82, 0x40, 0x44, 0x1b, 0x10, 0x62, 0x5a,
  0x08, 0x62, 0xa0, 0x80, 0x0d, 0x41, 0x35, 0x41, 0x40, 0x03, 0x6f, 0x03,
  0x42, 0x5c, 0x0b, 0x31, 0x0c, 0x04, 0xb0, 0x21, 0xc0, 0x36, 0x10, 0x12,
  0x60, 0x65, 0x13, 0x84, 0x34, 0xf8, 0x36, 0x04, 0xdb, 0x04, 0x41, 0x00,
  0xa8, 0x40, 0x4d, 0x0d, 0xbd, 0xb9, 0xcd, 0xd1, 0x85, 0xb9, 0xd1, 0x11,
  0xa1, 0x2a, 0xc2, 0x1a, 0x7a, 0x7a, 0x92, 0x22, 0x9a, 0x20, 0x14, 0xd6,
  0x04, 0xa1, 0xb8, 0x36, 0x04, 0xc4, 0x04, 0xa1, 0xc0, 0x36, 0x2c, 0xc4,
  0x07, 0x06, 0x61, 0x20, 0x06, 0x63, 0x30, 0x8c, 0x01, 0x11, 0x06, 0xc0,
  0x86, 0x60, 0x98, 0x20, 0x14, 0xd9, 0x04, 0x81, 0x90, 0x26, 0x08, 0xc4,
  0xb4, 0x41, 0x38, 0x03, 0x34, 0xd8, 0xb0, 0x0c, 0x1f, 0x18, 0x84, 0x41,
  0x19, 0x8c, 0xc1, 0x60, 0x06, 0x43, 0x18, 0xa4, 0xc1, 0x04, 0x81, 0xa0,
  0x36, 0x04, 0x6b, 0x30, 0x41, 0x28, 0xb4, 0x0d, 0xcb, 0x1a, 0x7c, 0x60,
  0x10, 0x06, 0x6c, 0x30, 0x06, 0x43, 0x1b, 0xac, 0x41, 0x18, 0xa4, 0x01,
  0x8b, 0xa1, 0x27, 0xa6, 0x27, 0xa9, 0x0d, 0xcb, 0x19, 0xbc, 0x01, 0x18,
  0x84, 0x81, 0x18, 0x8c, 0xc1, 0x60, 0x06, 0x67, 0x10, 0x06, 0xc0, 0x06,
  0x82, 0x0c, 0xd4, 0xc0, 0x0d, 0xe0, 0x80, 0xc9, 0x94, 0xd5, 0x17, 0x55,
  0x98, 0xdc, 0x59, 0x19, 0xdd, 0x04, 0xa1, 0xd8, 0x26, 0x08, 0x44, 0xb5,
  0x41, 0x38, 0x03, 0x3a, 0xd8, 0xb0, 0x10, 0x72, 0x00, 0x06, 0x73, 0x20,
  0x06, 0x61, 0x30, 0x98, 0x01, 0x11, 0x06, 0x75, 0xb0, 0x21, 0xb0, 0x83,
  0x0d, 0x43, 0x1c, 0xdc, 0x01, 0xb0, 0xa1, 0xe8, 0x3c, 0x3c, 0xd0, 0x80,
  0x2a, 0x6c, 0x6c, 0x76, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53,
  0x82, 0xa0, 0x0a, 0x19, 0x9e, 0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda, 0x9b,
  0xdb, 0x94, 0x80, 0x68, 0x42, 0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66, 0x57,
  0x26, 0x37, 0x25, 0x30, 0xea, 0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85, 0x91,
  0x95, 0xc9, 0x35, 0xbd, 0x91, 0x95, 0xb1, 0x4d, 0x09, 0x90, 0x32, 0x64,
  0x78, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53,
  0x82, 0xac, 0x0e, 0x19, 0x9e, 0x8b, 0x5d, 0x5a, 0xd9, 0x5d, 0x12, 0xd9,
  0x14, 0x5d, 0x18, 0x5d, 0xd9, 0x94, 0x60, 0xab, 0x43, 0x86, 0xe7, 0x52,
  0xe6, 0x46, 0x27, 0x97, 0x07, 0xf5, 0x96, 0xe6, 0x46, 0x37, 0x37, 0x25,
  0xc0, 0x03, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33,
  0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98,
  0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33,
  0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05,
  0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43,
  0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08,
  0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78,
  0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1,
  0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33,
  0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e,
  0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03,
  0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60,
  0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80,
  0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8,
  0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18,
  0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee,
  0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c,
  0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c,
  0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43,
  0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3,
  0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83,
  0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21,
  0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xd1,
  0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06, 0xf6,
  0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f, 0xf4,
  0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1, 0x1c,
  0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00, 0x71,
  0x20, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x06, 0xa0, 0xa4, 0x2c, 0xe7,
  0x34, 0xd2, 0x04, 0x34, 0x93, 0x15, 0x40, 0xc3, 0xe5, 0x3b, 0x8f, 0x1f,
  0x20, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x96, 0xb0, 0x0d, 0x97, 0xef,
  0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61,
  0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x08, 0xdb, 0x70, 0xf9, 0xce, 0xe3,
  0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20,
  0x60, 0x3e, 0x72, 0xdb, 0xa6, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10,
  0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x0d, 0x38, 0xc3, 0xe5,
  0x3b, 0x8f, 0x3f, 0x38, 0xd3, 0xed, 0x17, 0xb7, 0x6d, 0x01, 0xd3, 0x70,
  0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71,
  0xdb, 0x66, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x04, 0x30, 0xcf, 0x42,
  0xf8, 0xc5, 0x6d, 0xdb, 0x41, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x12, 0xc0,
  0x3c, 0x0b, 0x51, 0x12, 0x15, 0xb1, 0xf8, 0xc5, 0x6d, 0x9b, 0x40, 0x35,
  0x5c, 0xbe, 0xf3, 0xf8, 0xd2, 0xe4, 0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35,
  0xf9, 0xc5, 0x6d, 0x1b, 0xc1, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x54, 0x03,
  0x44, 0x98, 0x5f, 0xdc, 0x36, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x54,
  0x01, 0x00, 0x00, 0x13, 0x04, 0x43, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x1e,
  0x00, 0x00, 0x00, 0xb4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14, 0x5f,
  0xe1, 0x95, 0x49, 0x19, 0x15, 0x48, 0xb1, 0x94, 0x4a, 0xc9, 0x94, 0x5c,
  0xb9, 0x94, 0x5d, 0xb9, 0xcd, 0x00, 0xd0, 0x30, 0x46, 0x00, 0x82, 0x20,
  0x88, 0x7e, 0x63, 0x04, 0x7d, 0xdf, 0xb2, 0xb8, 0x36, 0x46, 0xb0, 0xfb,
  0xa3, 0x4c, 0x82, 0xc1, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0x0b, 0x63,
  0x04, 0x20, 0x08, 0x82, 0xf0, 0x2f, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82,
  0x60, 0x30, 0x03, 0x30, 0x46, 0xf0, 0xd2, 0xf0, 0x7a, 0x7f, 0x63, 0x04,
  0x20, 0x08, 0x82, 0x2a, 0x18, 0x8c, 0x00, 0x8c, 0x11, 0xa8, 0x78, 0x7d,
  0xca, 0xde, 0x18, 0x81, 0x8a, 0xd7, 0xa7, 0xec, 0x0b, 0x63, 0x04, 0x20,
  0x08, 0x82, 0x20, 0x28, 0x8c, 0x11, 0x80, 0x20, 0x08, 0xe2, 0x1f, 0x00,
  0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xc0, 0xcd, 0xc1,
  0x64, 0x06, 0x72, 0xe0, 0x06, 0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x70, 0x74, 0x40, 0x9d, 0x81, 0x1c, 0xc0, 0x81, 0x37, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x5c, 0x1d, 0x54, 0x65, 0x30, 0x07, 0x74, 0xf0, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x67, 0x07, 0x16, 0x1a, 0xd0, 0x01,
  0x1d, 0x80, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa0, 0x30,
  0x07, 0x6d, 0x50, 0x07, 0x6a, 0x30, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0x11, 0x0a, 0x74, 0xe0, 0x06, 0x76, 0x10, 0x06, 0xd4, 0x88, 0x41,
  0x02, 0x80, 0x20, 0x18, 0x18, 0xa2, 0x50, 0x07, 0x6f, 0x70, 0x07, 0x6b,
  0x50, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x31, 0x0a, 0x76, 0x90,
  0x07, 0x78, 0xd0, 0x06, 0xd6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0xa4, 0x70, 0x07, 0x7a, 0x90, 0x07, 0x64, 0x70, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0x51, 0x0a, 0x78, 0xb0, 0x07, 0x7a, 0xe0, 0x06, 0xd8,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x64, 0x7e, 0xb0, 0x1d, 0x7b, 0x30,
  0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x36, 0x1c,
  0xf1, 0xb1, 0xe1, 0x88, 0x8f, 0x0d, 0x47, 0x7c, 0x46, 0x0c, 0x16, 0x00,
  0x04, 0xc1, 0x40, 0x59, 0x85, 0x30, 0x18, 0x84, 0x60, 0x10, 0x82, 0x11,
  0x03, 0x03, 0x00, 0x41, 0x30, 0x60, 0x56, 0xc1, 0x0c, 0x02, 0x2b, 0x02,
  0xf9, 0x58, 0x21, 0xc8, 0xc7, 0x8a, 0x41, 0x3e, 0x23, 0x06, 0x0b, 0x00,
  0x82, 0x60, 0xa0, 0xc0, 0x82, 0x19, 0x48, 0x11, 0x24, 0x45, 0xd0, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xb0, 0xb0, 0x06, 0x81, 0x05, 0x94,
  0x7c, 0x4c, 0xa0, 0xe4, 0x63, 0x03, 0x25, 0x9f, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xc8, 0x5e, 0x81, 0x0d, 0xb0, 0x36, 0x18, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x4c, 0x16,
  0xde, 0x60, 0xa3, 0x83, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0x18, 0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0x85, 0x17, 0xe4,
  0x40, 0x49, 0x90, 0xc7, 0x69, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80,
  0xe1, 0x85, 0x56, 0x08, 0xec, 0x38, 0xe4, 0x63, 0x46, 0x22, 0x1f, 0x33,
  0x14, 0xf9, 0x98, 0xb1, 0xc8, 0xc7, 0x92, 0x21, 0x3e, 0x96, 0x0c, 0xf1,
  0xb1, 0x64, 0x88, 0x8f, 0x31, 0x6e, 0x00, 0x1f, 0x63, 0xde, 0x00, 0x3e,
  0xc6, 0xc0, 0x01, 0x7c, 0x6c, 0x90, 0xe4, 0x63, 0xc3, 0x24, 0x1f, 0x1b,
  0x28, 0xf9, 0xd8, 0x50, 0x07, 0xf0, 0xb1, 0xc1, 0x0e, 0xe0, 0x63, 0xc3,
  0x1d, 0xc0, 0x67, 0x96, 0x20, 0x18, 0xa8, 0x18, 0xe4, 0x01, 0x08, 0x8d,
  0x60, 0xa0, 0x62, 0xa0, 0x07, 0x20, 0x34, 0x82, 0x81, 0x8a, 0xc1, 0x1e,
  0x80, 0xd0, 0x08, 0x06, 0x2a, 0x08, 0xd8, 0x00, 0x42, 0x23, 0xb0, 0xe0,
  0x15, 0x60, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x59, 0x3b, 0xa8,
  0x82, 0x1d, 0x04, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09,
  0x83, 0x60, 0x7f, 0x30, 0xc4, 0xc7, 0x40, 0x61, 0x88, 0x8f, 0x85, 0xc2,
  0x10, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x50, 0xf4, 0x01, 0x16,
  0x06, 0x21, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18,
  0x7d, 0xa8, 0x85, 0xc0, 0x82, 0x42, 0x3e, 0x26, 0x14, 0xf2, 0xb1, 0xa1,
  0x90, 0x8f, 0x0d, 0x72, 0x00, 0x1f, 0x1b, 0xe4, 0x00, 0x3e, 0x36, 0xc8,
  0x01, 0x7c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0x40, 0x11, 0x09, 0x5c,
  0x18, 0x84, 0x60, 0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x60,
  0x44, 0xa2, 0x17, 0x02, 0x2b, 0x02, 0xf9, 0x58, 0x21, 0xc8, 0xc7, 0x8a,
  0x41, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xa0, 0x9c, 0x44, 0x2f,
  0xd4, 0x01, 0x1d, 0xcc, 0xc1, 0xa2, 0x24, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0xc0, 0x9c, 0x04, 0x3e, 0x04, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60,
  0xa0, 0xa4, 0xc4, 0x2f, 0x34, 0xcc, 0x52, 0x10, 0xc3, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0x30, 0x29, 0xa1, 0x0f, 0xc1, 0x88, 0xc1, 0x02, 0x80,
  0x20, 0x18, 0x28, 0x2b, 0x11, 0x0e, 0x79, 0x80, 0x07, 0x77, 0x70, 0x18,
  0xc5, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0x2b, 0xc1, 0x0f, 0x81,
  0xd9, 0x01, 0x2f, 0xc8, 0xc7, 0x08, 0x42, 0x3e, 0x16, 0x08, 0xf2, 0xb1,
  0x00, 0x1c, 0xe0, 0x63, 0xb8, 0x90, 0xc4, 0x67, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0x98, 0x98, 0x50, 0x87, 0xc0, 0x82, 0x5f, 0x90, 0xcf, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0x33, 0xf1, 0x0e, 0x81, 0x05, 0x85,
  0x7c, 0x2c, 0xe8, 0x05, 0xf8, 0x98, 0x2f, 0xe8, 0x41, 0x7c, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0x80, 0xb9, 0x09, 0x78, 0x08, 0x2c, 0x28, 0x07,
  0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x93, 0x13, 0xf5, 0x10,
  0x58, 0xb0, 0xc8, 0xc7, 0x82, 0x71, 0x80, 0x8f, 0x05, 0x87, 0x7c, 0x0c,
  0x14, 0x40, 0x41, 0x3e, 0x16, 0xc0, 0x03, 0x7c, 0x8c, 0xa2, 0xe4, 0x63,
  0x81, 0x20, 0x1f, 0x0b, 0xd2, 0x01, 0x3e, 0x16, 0x04, 0xf2, 0xb1, 0xc0,
  0x1e, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xce, 0x58, 0x8c,
  0x04, 0x3e, 0x04, 0x86, 0x04, 0xf4, 0x31, 0x7a, 0xf8, 0x83, 0xf8, 0x58,
  0x3d, 0xfc, 0x41, 0x7c, 0xcc, 0x1e, 0xfe, 0x20, 0x3e, 0x16, 0x0f, 0x60,
  0x10, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x60, 0xd4, 0x62, 0x24,
  0x02, 0x0b, 0xf0, 0x41, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xc0,
  0xb0, 0x05, 0x4a, 0x04, 0x16, 0x1c, 0xf2, 0x31, 0xe1, 0x90, 0x8f, 0x0d,
  0x87, 0x7c, 0x6c, 0x30, 0x05, 0xf8, 0xd8, 0x60, 0x0a, 0xf0, 0xb1, 0xc1,
  0x14, 0xe0, 0x63, 0xfb, 0x60, 0x06, 0xf1, 0xb1, 0x2b, 0x25, 0xe4, 0x63,
  0x81, 0x20, 0x1f, 0x0b, 0xd2, 0x00, 0x3e, 0xf6, 0x0f, 0x01, 0x7d, 0x2c,
  0x98, 0xe4, 0x63, 0x41, 0x22, 0x1f, 0x13, 0x12, 0xf9, 0xd8, 0x90, 0xc8,
  0xc7, 0x58, 0x81, 0x27, 0x60, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0x19, 0x5e, 0xd4, 0x44, 0x48, 0x04, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0xa3, 0x09, 0x83, 0x60, 0x83, 0x1e, 0xc8, 0xc7, 0x86, 0x3d, 0x90,
  0x8f, 0x0d, 0x7c, 0x20, 0x1f, 0x43, 0x83, 0x71, 0x90, 0x8f, 0xa5, 0xc1,
  0x38, 0xc8, 0xc7, 0xd4, 0x60, 0x1c, 0xe4, 0x63, 0xce, 0x00, 0x1f, 0x73,
  0x06, 0xf8, 0x98, 0x33, 0xc0, 0xc7, 0x92, 0x41, 0x3e, 0x96, 0x0c, 0xf2,
  0xb1, 0x64, 0x90, 0x8f, 0x0d, 0xe0, 0x00, 0x1f, 0x1b, 0xc0, 0x01, 0x3e,
  0x36, 0x80, 0x03, 0x7c, 0x0c, 0x1c, 0x52, 0x03, 0x06, 0xc3, 0x0d, 0xc1,
  0x68, 0x80, 0xc1, 0x2c, 0x83, 0x10, 0x04, 0x23, 0x06, 0x0f, 0x00, 0x82,
  0x60, 0x30, 0xc1, 0xc6, 0x5c, 0xe4, 0xc4, 0x4d, 0x84, 0x04, 0x48, 0xfc,
  0x43, 0x58, 0xa0, 0x05, 0x5a, 0xa0, 0x45, 0x58, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0xf5, 0x20, 0x1f, 0x1b,
  0xea, 0x41, 0x3e, 0x36, 0xd4, 0x83, 0x7c, 0x6c, 0x60, 0xe0, 0x63, 0x03,
  0x03, 0x1f, 0x1b, 0x18, 0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81,
  0x85, 0x1b, 0x74, 0x01, 0x16, 0x75, 0x31, 0x9a, 0x10, 0x08, 0x17, 0x0c,
  0x66, 0x41, 0x4a, 0xc8, 0xc7, 0xd2, 0x82, 0x26, 0xe2, 0x63, 0x6a, 0x41,
  0x13, 0xf1, 0xb1, 0xb5, 0xa0, 0x89, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08,
  0x82, 0x81, 0x42, 0x1e, 0x7a, 0x31, 0x08, 0x81, 0x4c, 0xc4, 0x04, 0x4c,
  0x58, 0x40, 0x17, 0xf2, 0xb1, 0x80, 0x26, 0xe4, 0x63, 0x02, 0x4d, 0xc8,
  0xc7, 0x06, 0x9a, 0x90, 0x8f, 0x21, 0x43, 0x7c, 0x0c, 0x19, 0xe2, 0x63,
  0xc8, 0x10, 0x9f, 0x11, 0x83, 0x07, 0x00, 0x41, 0x30, 0x98, 0xd0, 0xa3,
  0x35, 0xe2, 0x02, 0x2e, 0x06, 0x21, 0xd0, 0x8b, 0xd0, 0x08, 0x8d, 0xd0,
  0x60, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1,
  0x86, 0x92, 0x90, 0x8f, 0x0d, 0x25, 0x21, 0x1f, 0x1b, 0x4a, 0x42, 0x3e,
  0x96, 0x0d, 0xf0, 0xb1, 0x6c, 0x80, 0x8f, 0x65, 0x03, 0x7c, 0x46, 0x13,
  0x7c, 0x62, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x04, 0x3f, 0xd6,
  0xc3, 0x3d, 0xdc, 0x63, 0x3c, 0x88, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30,
  0x40, 0xf0, 0x63, 0x3d, 0xdc, 0xc3, 0x3d, 0x72, 0x63, 0x18, 0x31, 0x48,
  0x00, 0x10, 0x04, 0x03, 0x04, 0x3f, 0xd6, 0xc3, 0x3d, 0xdc, 0x43, 0x3c,
  0x84, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0xf0, 0x63, 0x3d, 0xdc,
  0xc3, 0x3d, 0xc0, 0x23, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
