#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float       
; SV_Position              0   xyzw        4      POS   float   xyz 
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   x           1   TARGET    uint   x   
;
; shader debug name: Compiled\PBREffect_PSTexturedVelocity.pdb
; shader hash: 18d8dbf981681e90cec9ffe993aa9c9d
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
; SV_Position              0          noperspective       
; TEXCOORD                 4                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [388 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;                                   texture     f32          2d      T2             t2     1
;                                   texture     f32        cube      T3             t4     1
;                                   texture     f32        cube      T4             t5     1
;
;
; ViewId state:
;
; Number of inputs: 24, outputs: 5
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 3 depends on inputs: { 0, 1 }
;   output 4 depends on inputs: { 16, 17, 18, 20, 21, 22, 23 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 3> >" = type { <3 x float> }
%hostlayout.Constants = type { <3 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, float, float, float, i32, float, float }
%struct.SamplerState = type { i32 }

define void @PSTexturedVelocity() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 4, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.f32 %20, 0
  %22 = extractvalue %dx.types.CBufRet.f32 %20, 1
  %23 = extractvalue %dx.types.CBufRet.f32 %20, 2
  %24 = fsub fast float %21, %15
  %25 = fsub fast float %22, %16
  %26 = fsub fast float %23, %17
  %27 = call float @dx.op.dot3.f32(i32 55, float %24, float %25, float %26, float %24, float %25, float %26)  ; Dot3(ax,ay,az,bx,by,bz)
  %28 = call float @dx.op.unary.f32(i32 25, float %27)  ; Rsqrt(value)
  %29 = fmul fast float %24, %28
  %30 = fmul fast float %25, %28
  %31 = fmul fast float %26, %28
  %32 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %4, %dx.types.Handle %7, float %18, float %19, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %33 = extractvalue %dx.types.ResRet.f32 %32, 0
  %34 = extractvalue %dx.types.ResRet.f32 %32, 1
  %35 = fmul fast float %33, 2.000000e+00
  %36 = fmul fast float %34, 2.000000e+00
  %37 = fadd fast float %35, -1.000000e+00
  %38 = fadd fast float %36, -1.000000e+00
  %39 = call float @dx.op.dot2.f32(i32 54, float %37, float %38, float %37, float %38)  ; Dot2(ax,ay,bx,by)
  %40 = fsub fast float 1.000000e+00, %39
  %41 = call float @dx.op.unary.f32(i32 24, float %40)  ; Sqrt(value)
  %42 = call float @dx.op.unary.f32(i32 83, float %15)  ; DerivCoarseX(value)
  %43 = call float @dx.op.unary.f32(i32 83, float %16)  ; DerivCoarseX(value)
  %44 = call float @dx.op.unary.f32(i32 83, float %17)  ; DerivCoarseX(value)
  %45 = call float @dx.op.unary.f32(i32 84, float %15)  ; DerivCoarseY(value)
  %46 = call float @dx.op.unary.f32(i32 84, float %16)  ; DerivCoarseY(value)
  %47 = call float @dx.op.unary.f32(i32 84, float %17)  ; DerivCoarseY(value)
  %48 = call float @dx.op.unary.f32(i32 83, float %18)  ; DerivCoarseX(value)
  %49 = call float @dx.op.unary.f32(i32 83, float %19)  ; DerivCoarseX(value)
  %50 = call float @dx.op.unary.f32(i32 84, float %18)  ; DerivCoarseY(value)
  %51 = call float @dx.op.unary.f32(i32 84, float %19)  ; DerivCoarseY(value)
  %52 = fmul fast float %47, %43
  %53 = fmul fast float %46, %44
  %54 = fsub fast float %52, %53
  %55 = fmul fast float %45, %44
  %56 = fmul fast float %47, %42
  %57 = fsub fast float %55, %56
  %58 = fmul fast float %46, %42
  %59 = fmul fast float %45, %43
  %60 = fsub fast float %58, %59
  %61 = fmul fast float %60, %46
  %62 = fmul fast float %57, %47
  %63 = fsub fast float %61, %62
  %64 = fmul fast float %54, %47
  %65 = fmul fast float %60, %45
  %66 = fsub fast float %64, %65
  %67 = fmul fast float %57, %45
  %68 = fmul fast float %54, %46
  %69 = fsub fast float %67, %68
  %70 = fmul fast float %57, %44
  %71 = fmul fast float %60, %43
  %72 = fsub fast float %70, %71
  %73 = fmul fast float %60, %42
  %74 = fmul fast float %54, %44
  %75 = fsub fast float %73, %74
  %76 = fmul fast float %54, %43
  %77 = fmul fast float %57, %42
  %78 = fsub fast float %76, %77
  %79 = fmul fast float %63, %48
  %80 = call float @dx.op.tertiary.f32(i32 46, float %50, float %72, float %79)  ; FMad(a,b,c)
  %81 = fmul fast float %66, %48
  %82 = call float @dx.op.tertiary.f32(i32 46, float %50, float %75, float %81)  ; FMad(a,b,c)
  %83 = fmul fast float %69, %48
  %84 = call float @dx.op.tertiary.f32(i32 46, float %50, float %78, float %83)  ; FMad(a,b,c)
  %85 = call float @dx.op.dot3.f32(i32 55, float %80, float %82, float %84, float %80, float %82, float %84)  ; Dot3(ax,ay,az,bx,by,bz)
  %86 = call float @dx.op.unary.f32(i32 25, float %85)  ; Rsqrt(value)
  %87 = fmul fast float %63, %49
  %88 = call float @dx.op.tertiary.f32(i32 46, float %51, float %72, float %87)  ; FMad(a,b,c)
  %89 = fmul fast float %66, %49
  %90 = call float @dx.op.tertiary.f32(i32 46, float %51, float %75, float %89)  ; FMad(a,b,c)
  %91 = fmul fast float %69, %49
  %92 = call float @dx.op.tertiary.f32(i32 46, float %51, float %78, float %91)  ; FMad(a,b,c)
  %93 = call float @dx.op.dot3.f32(i32 55, float %88, float %90, float %92, float %88, float %90, float %92)  ; Dot3(ax,ay,az,bx,by,bz)
  %94 = call float @dx.op.unary.f32(i32 25, float %93)  ; Rsqrt(value)
  %95 = fmul fast float %94, %88
  %96 = fmul fast float %94, %90
  %97 = fmul fast float %94, %92
  %98 = fmul fast float %80, %37
  %99 = fmul fast float %98, %86
  %100 = call float @dx.op.tertiary.f32(i32 46, float %38, float %95, float %99)  ; FMad(a,b,c)
  %101 = call float @dx.op.tertiary.f32(i32 46, float %41, float %12, float %100)  ; FMad(a,b,c)
  %102 = fmul fast float %82, %37
  %103 = fmul fast float %102, %86
  %104 = call float @dx.op.tertiary.f32(i32 46, float %38, float %96, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.tertiary.f32(i32 46, float %41, float %13, float %104)  ; FMad(a,b,c)
  %106 = fmul fast float %84, %37
  %107 = fmul fast float %106, %86
  %108 = call float @dx.op.tertiary.f32(i32 46, float %38, float %97, float %107)  ; FMad(a,b,c)
  %109 = call float @dx.op.tertiary.f32(i32 46, float %41, float %14, float %108)  ; FMad(a,b,c)
  %110 = call float @dx.op.dot3.f32(i32 55, float %101, float %105, float %109, float %101, float %105, float %109)  ; Dot3(ax,ay,az,bx,by,bz)
  %111 = call float @dx.op.unary.f32(i32 25, float %110)  ; Rsqrt(value)
  %112 = fmul fast float %111, %101
  %113 = fmul fast float %111, %105
  %114 = fmul fast float %111, %109
  %115 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %5, %dx.types.Handle %7, float %18, float %19, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %116 = extractvalue %dx.types.ResRet.f32 %115, 0
  %117 = extractvalue %dx.types.ResRet.f32 %115, 1
  %118 = extractvalue %dx.types.ResRet.f32 %115, 2
  %119 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %3, %dx.types.Handle %7, float %18, float %19, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %120 = extractvalue %dx.types.ResRet.f32 %119, 0
  %121 = extractvalue %dx.types.ResRet.f32 %119, 1
  %122 = extractvalue %dx.types.ResRet.f32 %119, 2
  %123 = call float @dx.op.dot3.f32(i32 55, float %112, float %113, float %114, float %29, float %30, float %31)  ; Dot3(ax,ay,az,bx,by,bz)
  %124 = call float @dx.op.unary.f32(i32 7, float %123)  ; Saturate(value)
  %125 = fmul fast float %121, %121
  %126 = fmul fast float %122, %116
  %127 = fmul fast float %122, %117
  %128 = fmul fast float %122, %118
  %129 = fsub fast float %116, %126
  %130 = fsub fast float %117, %127
  %131 = fsub fast float %118, %128
  %132 = fmul fast float %129, %120
  %133 = fmul fast float %130, %120
  %134 = fmul fast float %131, %120
  %135 = fadd fast float %116, 0xBFA47AE140000000
  %136 = fadd fast float %117, 0xBFA47AE140000000
  %137 = fadd fast float %118, 0xBFA47AE140000000
  %138 = fmul fast float %122, %135
  %139 = fmul fast float %122, %136
  %140 = fmul fast float %122, %137
  %141 = fadd fast float %138, 0x3FA47AE140000000
  %142 = fadd fast float %139, 0x3FA47AE140000000
  %143 = fadd fast float %140, 0x3FA47AE140000000
  %144 = fmul fast float %141, %120
  %145 = fmul fast float %142, %120
  %146 = fmul fast float %143, %120
  br label %147

; <label>:147                                     ; preds = %147, %0
  %148 = phi float [ 0.000000e+00, %0 ], [ %244, %147 ]
  %149 = phi float [ 0.000000e+00, %0 ], [ %245, %147 ]
  %150 = phi float [ 0.000000e+00, %0 ], [ %246, %147 ]
  %151 = phi i32 [ 0, %0 ], [ %247, %147 ]
  %152 = add nuw nsw i32 %151, 16
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 %152)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = fsub fast float -0.000000e+00, %154
  %158 = fsub fast float -0.000000e+00, %155
  %159 = fsub fast float -0.000000e+00, %156
  %160 = call float @dx.op.dot3.f32(i32 55, float %157, float %158, float %159, float %157, float %158, float %159)  ; Dot3(ax,ay,az,bx,by,bz)
  %161 = call float @dx.op.unary.f32(i32 25, float %160)  ; Rsqrt(value)
  %162 = fmul fast float %161, %157
  %163 = fmul fast float %161, %158
  %164 = fmul fast float %161, %159
  %165 = fadd fast float %162, %29
  %166 = fadd fast float %163, %30
  %167 = fadd fast float %164, %31
  %168 = call float @dx.op.dot3.f32(i32 55, float %165, float %166, float %167, float %165, float %166, float %167)  ; Dot3(ax,ay,az,bx,by,bz)
  %169 = call float @dx.op.unary.f32(i32 25, float %168)  ; Rsqrt(value)
  %170 = fmul fast float %165, %169
  %171 = fmul fast float %166, %169
  %172 = fmul fast float %167, %169
  %173 = call float @dx.op.dot3.f32(i32 55, float %112, float %113, float %114, float %162, float %163, float %164)  ; Dot3(ax,ay,az,bx,by,bz)
  %174 = call float @dx.op.unary.f32(i32 7, float %173)  ; Saturate(value)
  %175 = call float @dx.op.dot3.f32(i32 55, float %162, float %163, float %164, float %170, float %171, float %172)  ; Dot3(ax,ay,az,bx,by,bz)
  %176 = call float @dx.op.unary.f32(i32 7, float %175)  ; Saturate(value)
  %177 = call float @dx.op.dot3.f32(i32 55, float %112, float %113, float %114, float %170, float %171, float %172)  ; Dot3(ax,ay,az,bx,by,bz)
  %178 = call float @dx.op.unary.f32(i32 7, float %177)  ; Saturate(value)
  %179 = fmul fast float %121, 2.000000e+00
  %180 = fmul fast float %176, %176
  %181 = fmul fast float %180, %179
  %182 = fadd fast float %181, -5.000000e-01
  %183 = fsub fast float 1.000000e+00, %174
  %184 = call float @dx.op.unary.f32(i32 23, float %183)  ; Log(value)
  %185 = fmul fast float %184, 5.000000e+00
  %186 = call float @dx.op.unary.f32(i32 21, float %185)  ; Exp(value)
  %187 = fmul fast float %186, %182
  %188 = fadd fast float %187, 1.000000e+00
  %189 = fsub fast float 1.000000e+00, %124
  %190 = call float @dx.op.unary.f32(i32 23, float %189)  ; Log(value)
  %191 = fmul fast float %190, 5.000000e+00
  %192 = call float @dx.op.unary.f32(i32 21, float %191)  ; Exp(value)
  %193 = fmul fast float %192, %182
  %194 = fadd fast float %193, 1.000000e+00
  %195 = fmul fast float %194, %188
  %196 = fmul fast float %125, %125
  %197 = fadd fast float %196, -1.000000e+00
  %198 = fmul fast float %178, %178
  %199 = fmul fast float %198, %197
  %200 = fadd fast float %199, 1.000000e+00
  %201 = fmul fast float %200, %200
  %202 = fmul fast float %201, 0x400921FB60000000
  %203 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %202)  ; FMax(a,b)
  %204 = fdiv fast float %196, %203
  %205 = fsub fast float 1.000000e+00, %144
  %206 = fsub fast float 1.000000e+00, %145
  %207 = fsub fast float 1.000000e+00, %146
  %208 = fsub fast float 1.000000e+00, %176
  %209 = call float @dx.op.unary.f32(i32 23, float %208)  ; Log(value)
  %210 = fmul fast float %209, 5.000000e+00
  %211 = call float @dx.op.unary.f32(i32 21, float %210)  ; Exp(value)
  %212 = fmul fast float %211, %205
  %213 = fmul fast float %211, %206
  %214 = fmul fast float %211, %207
  %215 = fadd fast float %212, %144
  %216 = fadd fast float %213, %145
  %217 = fadd fast float %214, %146
  %218 = fsub fast float 1.000000e+00, %180
  %219 = fmul fast float %196, 2.500000e-01
  %220 = fmul fast float %219, %218
  %221 = fadd fast float %220, %180
  %222 = fdiv fast float 1.000000e+00, %221
  %223 = fmul fast float %222, %204
  %224 = fmul fast float %223, %215
  %225 = fmul fast float %223, %216
  %226 = fmul fast float %223, %217
  %227 = add nuw nsw i32 %151, 19
  %228 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 %227)  ; CBufferLoadLegacy(handle,regIndex)
  %229 = extractvalue %dx.types.CBufRet.f32 %228, 0
  %230 = extractvalue %dx.types.CBufRet.f32 %228, 1
  %231 = extractvalue %dx.types.CBufRet.f32 %228, 2
  %232 = fmul fast float %229, %174
  %233 = fmul fast float %230, %174
  %234 = fmul fast float %231, %174
  %235 = fmul fast float %195, %132
  %236 = fmul fast float %195, %133
  %237 = fmul fast float %195, %134
  %238 = fadd fast float %224, %235
  %239 = fadd fast float %225, %236
  %240 = fadd fast float %226, %237
  %241 = fmul fast float %232, %238
  %242 = fmul fast float %233, %239
  %243 = fmul fast float %234, %240
  %244 = fadd fast float %241, %148
  %245 = fadd fast float %242, %149
  %246 = fadd fast float %243, %150
  %247 = add nuw nsw i32 %151, 1
  %248 = icmp eq i32 %247, 3
  br i1 %248, label %249, label %147

; <label>:249                                     ; preds = %147
  %250 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %251 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %252 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %253 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %254 = extractvalue %dx.types.ResRet.f32 %115, 3
  %255 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %6, float %112, float %113, float %114, float undef, i32 undef, i32 undef, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %256 = extractvalue %dx.types.ResRet.f32 %255, 0
  %257 = extractvalue %dx.types.ResRet.f32 %255, 1
  %258 = extractvalue %dx.types.ResRet.f32 %255, 2
  %259 = fmul fast float %256, %132
  %260 = fmul fast float %257, %133
  %261 = fmul fast float %258, %134
  %262 = fadd fast float %259, %244
  %263 = fadd fast float %260, %245
  %264 = fadd fast float %261, %246
  %265 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %8, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %266 = extractvalue %dx.types.CBufRet.i32 %265, 2
  %267 = sitofp i32 %266 to float
  %268 = fmul fast float %267, %121
  %269 = fsub fast float -0.000000e+00, %29
  %270 = fsub fast float -0.000000e+00, %30
  %271 = fsub fast float -0.000000e+00, %31
  %272 = call float @dx.op.dot3.f32(i32 55, float %269, float %270, float %271, float %112, float %113, float %114)  ; Dot3(ax,ay,az,bx,by,bz)
  %273 = fmul fast float %272, 2.000000e+00
  %274 = fmul fast float %273, %112
  %275 = fmul fast float %273, %113
  %276 = fmul fast float %273, %114
  %277 = fsub fast float %269, %274
  %278 = fsub fast float %270, %275
  %279 = fsub fast float %271, %276
  %280 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2, %dx.types.Handle %6, float %277, float %278, float %279, float undef, i32 undef, i32 undef, i32 undef, float %268)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %281 = extractvalue %dx.types.ResRet.f32 %280, 0
  %282 = extractvalue %dx.types.ResRet.f32 %280, 1
  %283 = extractvalue %dx.types.ResRet.f32 %280, 2
  %284 = fmul fast float %281, %144
  %285 = fmul fast float %282, %145
  %286 = fmul fast float %283, %146
  %287 = fadd fast float %262, %284
  %288 = fadd fast float %263, %285
  %289 = fadd fast float %264, %286
  %290 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %291 = extractvalue %dx.types.CBufRet.f32 %290, 3
  %292 = fmul fast float %291, %254
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %287)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %288)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %289)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %292)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  %293 = fdiv fast float %250, %10
  %294 = fdiv fast float %9, %10
  %295 = fdiv fast float %251, %10
  %296 = fmul fast float %293, 5.000000e-01
  %297 = fmul fast float %294, 5.000000e-01
  %298 = fadd fast float %296, 5.000000e-01
  %299 = fsub fast float 5.000000e-01, %297
  %300 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %301 = extractvalue %dx.types.CBufRet.f32 %300, 3
  %302 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %303 = extractvalue %dx.types.CBufRet.f32 %302, 0
  %304 = fmul fast float %301, %298
  %305 = fmul fast float %303, %299
  %306 = fsub fast float %304, %252
  %307 = fsub fast float %305, %11
  %308 = fsub fast float %295, %253
  %309 = bitcast float %306 to i32
  %310 = lshr i32 %309, 31
  %311 = fmul fast float %306, 0x3F00000000000000
  %312 = call float @dx.op.unary.f32(i32 6, float %311)  ; FAbs(value)
  %313 = call float @dx.op.binary.f32(i32 35, float %312, float 0.000000e+00)  ; FMax(a,b)
  %314 = call float @dx.op.binary.f32(i32 36, float %313, float 0x3F7FFC0000000000)  ; FMin(a,b)
  %315 = call i32 @dx.op.legacyF32ToF16(i32 130, float %314)  ; LegacyF32ToF16(value)
  %316 = add i32 %315, 8
  %317 = lshr i32 %316, 4
  %318 = shl nuw nsw i32 %310, 9
  %319 = or i32 %317, %318
  %320 = bitcast float %307 to i32
  %321 = lshr i32 %320, 31
  %322 = fmul fast float %307, 0x3F00000000000000
  %323 = call float @dx.op.unary.f32(i32 6, float %322)  ; FAbs(value)
  %324 = call float @dx.op.binary.f32(i32 35, float %323, float 0.000000e+00)  ; FMax(a,b)
  %325 = call float @dx.op.binary.f32(i32 36, float %324, float 0x3F7FFC0000000000)  ; FMin(a,b)
  %326 = call i32 @dx.op.legacyF32ToF16(i32 130, float %325)  ; LegacyF32ToF16(value)
  %327 = add i32 %326, 8
  %328 = lshr i32 %327, 4
  %329 = shl nuw nsw i32 %321, 9
  %330 = or i32 %328, %329
  %331 = shl i32 %330, 10
  %332 = or i32 %319, %331
  %333 = bitcast float %308 to i32
  %334 = lshr i32 %333, 31
  %335 = fmul fast float %308, 7.812500e-03
  %336 = call float @dx.op.unary.f32(i32 6, float %335)  ; FAbs(value)
  %337 = call float @dx.op.binary.f32(i32 35, float %336, float 0.000000e+00)  ; FMax(a,b)
  %338 = call float @dx.op.binary.f32(i32 36, float %337, float 0x3F7FFC0000000000)  ; FMin(a,b)
  %339 = call i32 @dx.op.legacyF32ToF16(i32 130, float %338)  ; LegacyF32ToF16(value)
  %340 = add i32 %339, 2
  %341 = lshr i32 %340, 2
  %342 = shl nuw nsw i32 %334, 11
  %343 = or i32 %341, %342
  %344 = shl i32 %343, 20
  %345 = or i32 %332, %344
  call void @dx.op.storeOutput.i32(i32 5, i32 1, i32 0, i8 0, i32 %345)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!17}
!dx.entryPoints = !{!18}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{!5, null, !12, !14}
!5 = !{!6, !8, !9, !10, !11}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 5, i32 0, !7}
!11 = !{i32 4, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 5, i32 1, i32 5, i32 0, !7}
!12 = !{!13}
!13 = !{i32 0, %hostlayout.Constants* undef, !"", i32 0, i32 0, i32 1, i32 388, null}
!14 = !{!15, !16}
!15 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!16 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!17 = !{[26 x i32] [i32 24, i32 5, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 0, i32 16, i32 16, i32 16, i32 16]}
!18 = !{void ()* @PSTexturedVelocity, !"PSTexturedVelocity", !19, !4, null}
!19 = !{!20, !34, null}
!20 = !{!21, !24, !27, !29, !30, !31}
!21 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 2, i32 0, i8 0, !23}
!22 = !{i32 0}
!23 = !{i32 3, i32 3}
!24 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 4, i32 1, i8 0, !26}
!25 = !{i32 1}
!26 = !{i32 3, i32 7}
!27 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !28, i8 2, i32 1, i8 3, i32 2, i8 0, !26}
!28 = !{i32 2}
!29 = !{i32 3, !"COLOR", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 3, i8 0, null}
!30 = !{i32 4, !"SV_Position", i8 9, i8 3, !22, i8 4, i32 1, i8 4, i32 4, i8 0, !26}
!31 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !32, i8 2, i32 1, i8 4, i32 5, i8 0, !33}
!32 = !{i32 4}
!33 = !{i32 3, i32 15}
!34 = !{!35, !36}
!35 = !{i32 0, !"SV_Target", i8 9, i8 16, !22, i8 0, i32 1, i8 4, i32 0, i8 0, !33}
!36 = !{i32 1, !"SV_Target", i8 5, i8 16, !25, i8 0, i32 1, i8 1, i32 1, i8 0, !37}
!37 = !{i32 3, i32 1}

#endif

const unsigned char PBREffect_PSTexturedVelocity[] = {
  0x44, 0x58, 0x42, 0x43, 0x3e, 0x0f, 0x13, 0x2e, 0xcb, 0xf8, 0x11, 0xf2,
  0xcc, 0x89, 0xe7, 0x21, 0xc8, 0xa5, 0xdb, 0x4e, 0x01, 0x00, 0x00, 0x00,
  0x7c, 0x19, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00,
  0xdc, 0x03, 0x00, 0x00, 0x8c, 0x05, 0x00, 0x00, 0xc4, 0x05, 0x00, 0x00,
  0xe0, 0x05, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xfe, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x53, 0x56, 0x5f,
  0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x52, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x24, 0x02, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x06, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
  0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f,
  0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x03,
  0x03, 0x04, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x05, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x41, 0x10,
  0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xa8, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x78, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64,
  0x5c, 0x50, 0x42, 0x52, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50,
  0x53, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x64, 0x56, 0x65, 0x6c,
  0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00,
  0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0xd8, 0xdb, 0xf9, 0x81, 0x68, 0x1e, 0x90, 0xce, 0xc9, 0xff, 0xe9,
  0x93, 0xaa, 0x9c, 0x9d, 0x44, 0x58, 0x49, 0x4c, 0x94, 0x13, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0xe5, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x7c, 0x13, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xdc, 0x04, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d,
  0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff,
  0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00,
  0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84,
  0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c,
  0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xe4, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a,
  0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10,
  0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x18,
  0x00, 0x41, 0x10, 0x05, 0x41, 0x4a, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61,
  0x18, 0x88, 0x29, 0xc3, 0x40, 0x0c, 0xe4, 0xdc, 0x34, 0x5c, 0xfe, 0x84,
  0x3d, 0x84, 0xe4, 0xaf, 0x84, 0xb4, 0x12, 0x93, 0x5f, 0xdc, 0x36, 0x2a,
  0x86, 0x61, 0x18, 0x08, 0x2a, 0xee, 0x19, 0x2e, 0x7f, 0xc2, 0x1e, 0x42,
  0xf2, 0x43, 0xa0, 0x19, 0x16, 0x02, 0x05, 0x51, 0x61, 0x20, 0x42, 0x92,
  0x86, 0x61, 0x18, 0x08, 0x82, 0x18, 0x68, 0x2a, 0xc6, 0x40, 0x0c, 0xc3,
  0x30, 0x50, 0x55, 0x88, 0x81, 0x18, 0x06, 0xba, 0x4a, 0x31, 0x10, 0xc3,
  0x30, 0x50, 0x56, 0x06, 0x82, 0x18, 0x68, 0x3b, 0x6a, 0xb8, 0xfc, 0x09,
  0x7b, 0x08, 0xc9, 0xe7, 0x36, 0xaa, 0x58, 0x89, 0xc9, 0x47, 0x6e, 0x1b,
  0x11, 0x04, 0x41, 0x10, 0x85, 0xe8, 0x08, 0x89, 0x20, 0xef, 0xa8, 0xe1,
  0xf2, 0x27, 0xec, 0x21, 0x24, 0x9f, 0xdb, 0xa8, 0x62, 0x25, 0x26, 0xbf,
  0xb8, 0x6d, 0x44, 0x0c, 0xc3, 0x30, 0x14, 0x02, 0x24, 0x24, 0x82, 0xc2,
  0x39, 0x82, 0xa0, 0x18, 0x12, 0x51, 0x10, 0xc4, 0x48, 0xe4, 0x40, 0xc0,
  0x30, 0x02, 0x31, 0xcc, 0xd4, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f,
  0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f,
  0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f,
  0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f,
  0x6c, 0x00, 0x06, 0x74, 0xe0, 0x07, 0x60, 0xe0, 0x07, 0x7a, 0xa0, 0x07,
  0xed, 0x90, 0x0e, 0xf0, 0x30, 0x0f, 0xbf, 0x40, 0x0f, 0xf9, 0x00, 0x0f,
  0xe5, 0x80, 0x02, 0x62, 0x26, 0x31, 0x18, 0x07, 0x76, 0x08, 0x87, 0x79,
  0x98, 0x07, 0x37, 0xa0, 0x85, 0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07, 0x79,
  0x28, 0x07, 0x39, 0x20, 0x05, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a,
  0x78, 0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a,
  0x60, 0x03, 0x30, 0xa0, 0x03, 0x3f, 0x00, 0x03, 0x3f, 0x40, 0xc2, 0x89,
  0x52, 0x3a, 0x8c, 0x30, 0x0c, 0x33, 0xb5, 0xc1, 0x38, 0xb0, 0x43, 0x38,
  0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d,
  0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38,
  0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38,
  0xd0, 0x03, 0x1b, 0x80, 0xc1, 0x1c, 0xf8, 0x01, 0x18, 0xf8, 0x81, 0x1e,
  0xe8, 0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc, 0xc3, 0x2f, 0xd0, 0x43, 0x3e,
  0xc0, 0x43, 0x39, 0xa0, 0x80, 0x98, 0x49, 0x0c, 0xc6, 0x81, 0x1d, 0xc2,
  0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea,
  0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6,
  0x81, 0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2,
  0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe6, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90,
  0xb0, 0xb2, 0xd4, 0xce, 0x44, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f,
  0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f,
  0xe5, 0x30, 0x0a, 0xf5, 0x20, 0x0e, 0xe5, 0xc0, 0x07, 0xf6, 0x50, 0x0e,
  0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0, 0x0e,
  0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x73, 0xe0, 0x07, 0x60, 0xe0, 0x07,
  0x28, 0x58, 0xe9, 0x4d, 0x82, 0x33, 0x07, 0xd6, 0xa3, 0x0e, 0x47, 0x9a,
  0x16, 0x00, 0x73, 0xa8, 0xc9, 0xe7, 0x9c, 0x46, 0x9a, 0x80, 0x66, 0x92,
  0x90, 0xb3, 0xc6, 0x72, 0x1c, 0xcb, 0xf2, 0x3a, 0x0c, 0x03, 0x31, 0x0c,
  0x34, 0xdf, 0x24, 0x4d, 0x11, 0x25, 0x4c, 0x3e, 0x0b, 0x30, 0xcf, 0x42,
  0x44, 0xec, 0x04, 0x4c, 0x04, 0x0a, 0x08, 0xaa, 0x53, 0x83, 0x98, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86,
  0x3c, 0x06, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x79, 0x10, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0xf2, 0x28, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x30, 0xe4, 0x61, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x60, 0xc8, 0xe3, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x67, 0x02, 0x02, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x05, 0x04, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x0b, 0x08, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x19, 0x10,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x26,
  0x20, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2,
  0x6c, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
  0xe4, 0xf1, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x13, 0x06, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x30, 0xe4, 0x21, 0x03, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x18, 0x8a, 0xa0, 0x24,
  0xca, 0xa0, 0x10, 0x4a, 0xa1, 0x10, 0x0d, 0xca, 0xa1, 0x3c, 0xa8, 0x28,
  0x89, 0x11, 0x80, 0x22, 0x28, 0x84, 0x32, 0x28, 0x90, 0x52, 0x28, 0x01,
  0x52, 0x67, 0x00, 0xc8, 0x9d, 0x01, 0x20, 0x78, 0x06, 0x80, 0xe8, 0x19,
  0x00, 0xb2, 0x67, 0x00, 0xe8, 0x1e, 0x4b, 0xc3, 0x8a, 0xe7, 0x01, 0x80,
  0xe3, 0x38, 0x80, 0xe3, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x82, 0x00,
  0x08, 0x82, 0x20, 0x00, 0x79, 0x18, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b,
  0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99,
  0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62,
  0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73,
  0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0xe2, 0x99, 0x20, 0x10,
  0xd0, 0x06, 0x61, 0x20, 0x26, 0x08, 0x44, 0xb4, 0x41, 0x18, 0x0c, 0x0a,
  0x70, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0x6a, 0x20, 0x06, 0x04,
  0x26, 0x08, 0x84, 0x34, 0x41, 0x20, 0xa6, 0x0d, 0x02, 0xd1, 0x6c, 0x48,
  0x08, 0x65, 0x21, 0x88, 0x81, 0x21, 0x9c, 0x09, 0x82, 0x1b, 0x8c, 0xc1,
  0x86, 0x64, 0x80, 0x16, 0x62, 0x18, 0x18, 0xc2, 0xd9, 0x90, 0x30, 0xd0,
  0x42, 0x30, 0x03, 0x43, 0x38, 0x13, 0x04, 0x82, 0x9a, 0x20, 0xc0, 0x01,
  0x19, 0x4c, 0x10, 0x88, 0x6a, 0x82, 0x40, 0x58, 0x1b, 0x92, 0x89, 0x5a,
  0x88, 0x6a, 0xb0, 0x08, 0x67, 0x43, 0x52, 0x51, 0x0b, 0x61, 0x0d, 0x16,
  0xe1, 0x6c, 0x28, 0x9e, 0x48, 0xba, 0xb0, 0x09, 0x02, 0x1d, 0x94, 0xc1,
  0x04, 0x81, 0xb8, 0x36, 0x20, 0x84, 0xb6, 0x10, 0xc4, 0xb0, 0x01, 0x1b,
  0x02, 0x6e, 0x82, 0x60, 0x07, 0x66, 0xb0, 0x01, 0x21, 0xbc, 0x85, 0x20,
  0x06, 0x02, 0xd8, 0x80, 0x0c, 0xde, 0x42, 0x0c, 0x03, 0x01, 0x6c, 0x10,
  0x3e, 0x30, 0xd8, 0x40, 0x64, 0x40, 0x17, 0x06, 0x13, 0x84, 0x3b, 0x38,
  0x83, 0x0d, 0xc1, 0x18, 0x4c, 0x10, 0x04, 0x80, 0x12, 0xd4, 0x14, 0x55,
  0x19, 0x1e, 0x5d, 0x9d, 0x5c, 0x19, 0x99, 0x55, 0x19, 0xdb, 0xdb, 0x58,
  0x1a, 0x5d, 0x1e, 0x11, 0xaa, 0x22, 0xac, 0xa1, 0xa7, 0x27, 0x29, 0xa2,
  0x09, 0x42, 0xa1, 0x4d, 0x10, 0x8a, 0x6d, 0x43, 0x40, 0x4c, 0x10, 0x0a,
  0x6e, 0x83, 0x30, 0x4d, 0x1b, 0x16, 0xe2, 0x0c, 0xd0, 0x20, 0x0d, 0xd4,
  0x60, 0x0d, 0x86, 0x35, 0x20, 0xd2, 0x80, 0x0d, 0x36, 0x04, 0xc3, 0x04,
  0xa1, 0xe8, 0x26, 0x08, 0x04, 0xb6, 0x41, 0x98, 0xe0, 0x60, 0xc3, 0x32,
  0x9c, 0x01, 0x1a, 0xa4, 0x81, 0x1b, 0xac, 0xc1, 0xf0, 0x06, 0x43, 0x1a,
  0xc4, 0xc1, 0x86, 0x80, 0x99, 0x20, 0x14, 0xde, 0x86, 0x85, 0x39, 0x03,
  0x34, 0x48, 0x83, 0x39, 0x58, 0x83, 0x81, 0x0e, 0x98, 0x34, 0x88, 0x03,
  0x16, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x1b, 0x96, 0xc9, 0x0e, 0xd0, 0x20,
  0x0d, 0xd4, 0x60, 0x0d, 0x86, 0x37, 0x98, 0xd2, 0x00, 0xe0, 0x32, 0x65,
  0xf5, 0x05, 0xf5, 0x36, 0x97, 0x46, 0x97, 0xf6, 0xe6, 0xb6, 0x61, 0xa9,
  0xf0, 0x00, 0x0d, 0xe8, 0x40, 0x0d, 0xde, 0x60, 0x78, 0x83, 0x2a, 0x0d,
  0xe2, 0x60, 0x43, 0x50, 0x4d, 0x10, 0x88, 0x6c, 0x83, 0x30, 0xed, 0xc1,
  0x86, 0xc5, 0x3a, 0x03, 0x34, 0x48, 0x03, 0x3d, 0x58, 0x83, 0xe1, 0x0d,
  0xac, 0x34, 0xe0, 0x83, 0x0d, 0x46, 0x1b, 0xc8, 0x41, 0x1d, 0xdc, 0x41,
  0x1e, 0xf4, 0x01, 0x93, 0x29, 0xab, 0x2f, 0xaa, 0x30, 0xb9, 0xb3, 0x32,
  0xba, 0x09, 0x42, 0xf1, 0x6d, 0x58, 0x88, 0x3f, 0x40, 0x03, 0x50, 0x50,
  0x83, 0x34, 0x18, 0xde, 0x80, 0x48, 0x03, 0x3e, 0x98, 0x20, 0x14, 0x60,
  0x30, 0x41, 0x28, 0xc2, 0x60, 0x83, 0x30, 0x0d, 0x1b, 0x96, 0xe1, 0x0f,
  0x44, 0x01, 0x14, 0xdc, 0x20, 0x0d, 0x86, 0x51, 0x18, 0xd2, 0x80, 0x14,
  0x36, 0x08, 0xa1, 0x50, 0x0a, 0x1b, 0x06, 0x3f, 0x30, 0x05, 0x60, 0x43,
  0x51, 0x06, 0x66, 0x70, 0x0a, 0x62, 0x00, 0x54, 0x61, 0x63, 0xb3, 0x6b,
  0x73, 0x49, 0x23, 0x2b, 0x73, 0xa3, 0x9b, 0x12, 0x04, 0x55, 0xc8, 0xf0,
  0x5c, 0xec, 0xca, 0xe4, 0xe6, 0xd2, 0xde, 0xdc, 0xa6, 0x04, 0x44, 0x13,
  0x32, 0x3c, 0x17, 0xbb, 0x30, 0x36, 0xbb, 0x32, 0xb9, 0x29, 0x81, 0x51,
  0x87, 0x0c, 0xcf, 0x65, 0x0e, 0x2d, 0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d,
  0xac, 0x8c, 0x6d, 0x4a, 0x80, 0x94, 0x21, 0xc3, 0x73, 0x91, 0x2b, 0x9b,
  0x7b, 0xab, 0x93, 0x1b, 0x2b, 0x9b, 0x9b, 0x12, 0x84, 0x41, 0x1d, 0x32,
  0x3c, 0x17, 0xbb, 0xb4, 0xb2, 0xbb, 0x24, 0xb2, 0x29, 0xba, 0x30, 0xba,
  0xb2, 0x29, 0xc1, 0x18, 0xd4, 0x21, 0xc3, 0x73, 0x29, 0x73, 0xa3, 0x93,
  0xcb, 0x83, 0x7a, 0x4b, 0x73, 0xa3, 0x9b, 0x9b, 0x12, 0x9c, 0x02, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8,
  0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2,
  0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x30, 0x83, 0x81,
  0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1, 0x1c, 0xc2, 0x61, 0x1d,
  0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x00, 0x06, 0x20, 0xa5, 0x6c, 0x4b, 0x5c, 0x13, 0x15,
  0x11, 0xc3, 0x4b, 0x2c, 0x8e, 0x80, 0x4c, 0x98, 0x21, 0x40, 0xc3, 0xe5,
  0x3b, 0x8f, 0x1f, 0x20, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0xd6, 0xb0,
  0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03,
  0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x0c, 0xdb, 0x70,
  0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50,
  0x12, 0x06, 0x20, 0x60, 0x3e, 0x72, 0xdb, 0xe6, 0x20, 0x0d, 0x97, 0xef,
  0x3c, 0xbe, 0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x1d,
  0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0x93, 0xed, 0x17, 0xb7, 0x6d,
  0x04, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d,
  0xdb, 0x02, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x0b, 0x61, 0x00, 0x02, 0xf6,
  0xdd, 0x76, 0xeb, 0x7c, 0xb5, 0x6e, 0x01, 0xd3, 0x70, 0xf9, 0xce, 0xe3,
  0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x66, 0x00,
  0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x04, 0x30, 0xcf, 0x42, 0xf8, 0xc5, 0x6d,
  0x9b, 0x42, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x12, 0xc0, 0x3c, 0x0b, 0x51,
  0x12, 0x15, 0xb1, 0xf8, 0xc5, 0x6d, 0x9b, 0x40, 0x35, 0x5c, 0xbe, 0xf3,
  0xf8, 0xd2, 0xe4, 0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35, 0xf9, 0xc5, 0x6d,
  0xdb, 0x40, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0xd2, 0xe4, 0x44, 0x04, 0x4a,
  0x4d, 0x0f, 0x35, 0xf9, 0xc8, 0x6d, 0x5b, 0x82, 0x34, 0x5c, 0xbe, 0xf3,
  0xf8, 0x13, 0x11, 0x4d, 0x08, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x56, 0xf0,
  0x0c, 0x97, 0xef, 0x3c, 0x3e, 0xd5, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x0d,
  0x61, 0x20, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0x13, 0x04, 0x43, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x34, 0x8e, 0x00, 0x10,
  0x51, 0x28, 0x65, 0x51, 0x14, 0xc5, 0x52, 0x7c, 0x65, 0x52, 0x20, 0xc5,
  0x56, 0x10, 0x05, 0x53, 0x84, 0x02, 0x85, 0x54, 0x3e, 0xa5, 0x52, 0x46,
  0x85, 0x37, 0x03, 0x50, 0x5c, 0xe5, 0x56, 0x72, 0x65, 0x57, 0x32, 0x65,
  0x1a, 0x50, 0xa8, 0x01, 0xe5, 0x42, 0xc3, 0x18, 0x01, 0x08, 0x82, 0x20,
  0xe8, 0x8d, 0x11, 0x80, 0x20, 0x08, 0xa2, 0xdf, 0x18, 0x41, 0xdf, 0xb7,
  0x2c, 0xae, 0x8d, 0x11, 0xec, 0xfe, 0x28, 0x93, 0x60, 0x30, 0x46, 0x00,
  0x82, 0x20, 0x08, 0xff, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0xc8, 0x8d,
  0x11, 0x80, 0x20, 0xfe, 0xff, 0xdd, 0x18, 0x01, 0x08, 0x82, 0xa0, 0x0a,
  0x06, 0x63, 0x04, 0x2a, 0x5e, 0x9f, 0xb2, 0x37, 0x46, 0xa0, 0xe2, 0xf5,
  0x29, 0xfb, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0x0b, 0x63, 0x04,
  0x20, 0x08, 0x82, 0xf0, 0x37, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0xc1,
  0x18, 0x01, 0x08, 0x82, 0x20, 0x08, 0x0a, 0x23, 0x00, 0x63, 0x04, 0x20,
  0x08, 0x82, 0xf8, 0x37, 0x03, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x40, 0x06, 0xa5, 0x70, 0xe1, 0x81, 0x1f, 0xf4, 0xc1, 0x1a,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x19, 0x98, 0x02, 0x96, 0x07,
  0xa0, 0xf0, 0x07, 0x6c, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x64,
  0x70, 0x0a, 0x99, 0x1e, 0x8c, 0xc2, 0x28, 0xb4, 0xc1, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x90, 0x01, 0x2a, 0x68, 0x7b, 0x70, 0x0a, 0xa7, 0xe0,
  0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x40, 0x06, 0xa9, 0xb0, 0xf1,
  0xc1, 0x29, 0x9c, 0xc2, 0x1b, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01,
  0x19, 0xa8, 0x02, 0xa7, 0x07, 0xa9, 0x90, 0x0a, 0x70, 0x30, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x64, 0xb0, 0x0a, 0xdd, 0x1e, 0xa4, 0x42, 0x2a,
  0xc4, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x90, 0x01, 0x2b, 0x78,
  0x7e, 0xa0, 0x0a, 0xaa, 0x20, 0x07, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x60, 0xe8, 0x82, 0x29, 0x94, 0xc2, 0x2a, 0xe8, 0x81, 0x18, 0x8c, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0xb1, 0x0b, 0xa7, 0x60, 0x0a, 0xac, 0xe0,
  0x07, 0x63, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x2f, 0xa0,
  0x02, 0x2a, 0xb4, 0x02, 0x1f, 0x90, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0xbd, 0x90, 0x0a, 0xac, 0xe0, 0x0a, 0xa3, 0x50, 0x06, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xf8, 0x82, 0x2a, 0xb4, 0xc2, 0x2b,
  0xf8, 0x81, 0x19, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xf1, 0x0b,
  0xab, 0xe0, 0x0a, 0xb0, 0x40, 0x0a, 0x67, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x06, 0x38, 0xb0, 0x82, 0x2c, 0xc4, 0x82, 0x29, 0xa0, 0xc1,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xe1, 0xd0, 0x0a, 0xb3, 0x20,
  0x0b, 0xa1, 0x90, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x88,
  0x83, 0x2b, 0xd0, 0xc2, 0x2c, 0x9c, 0x82, 0x1a, 0x8c, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0x31, 0x0e, 0xaf, 0x40, 0x0b, 0xb4, 0x90, 0x0a, 0x6b,
  0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x39, 0xc0, 0x42, 0x2d,
  0xd4, 0x02, 0x29, 0xb0, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x84,
  0x41, 0x2e, 0xa4, 0x01, 0x63, 0x0b, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0xa3, 0x09, 0x83, 0x60, 0x43, 0x12, 0x1f, 0x1b, 0x92, 0xf8, 0xd8,
  0x90, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x98, 0x74, 0x90,
  0x83, 0x41, 0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03,
  0x27, 0x1d, 0xe0, 0x20, 0xb0, 0x22, 0x90, 0x8f, 0x15, 0x82, 0x7c, 0xac,
  0x18, 0xe4, 0x33, 0x62, 0xf0, 0x00, 0x20, 0x08, 0x06, 0x13, 0x3b, 0xe8,
  0x01, 0x97, 0x39, 0x0d, 0x18, 0x80, 0x81, 0x38, 0x88, 0x43, 0x1e, 0x80,
  0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0x81, 0x09, 0x67, 0x20, 0x1f,
  0x13, 0xd0, 0x40, 0x3e, 0x26, 0xac, 0x01, 0x7c, 0x4c, 0x60, 0x03, 0xf8,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x41, 0x25, 0x0f, 0xa9, 0x20, 0x04,
  0x42, 0x60, 0x69, 0x10, 0xc4, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x1c, 0x7b, 0x48, 0x85, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9c,
  0x7b, 0xe8, 0x83, 0x6d, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0x7c,
  0xf0, 0x83, 0x6d, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9c, 0x7c, 0xf8,
  0x83, 0x6d, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0x7d, 0xf8, 0x03,
  0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9c, 0x7d, 0x00, 0x05, 0x6f,
  0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0x7e, 0x08, 0x05, 0x6f, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9c, 0x7e, 0x18, 0x05, 0x6f, 0xc4, 0xc0,
  0x00, 0x40, 0x10, 0x0c, 0x1c, 0x7f, 0x20, 0x05, 0x6f, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0x9c, 0x7f, 0x20, 0x05, 0x30, 0x18, 0x31, 0x30, 0x00,
  0x10, 0x04, 0x03, 0x07, 0x24, 0x4a, 0x01, 0x0c, 0xac, 0x48, 0xe4, 0x63,
  0x47, 0x22, 0x1f, 0x13, 0x82, 0xf8, 0x98, 0xb2, 0xc8, 0xc7, 0x12, 0x47,
  0x3e, 0x26, 0x04, 0xf1, 0x31, 0x06, 0x92, 0x8f, 0x39, 0x90, 0x7c, 0x4c,
  0x08, 0xe2, 0x63, 0xc1, 0x23, 0x1f, 0x2b, 0x1e, 0xf9, 0x98, 0x10, 0xc4,
  0xc7, 0x94, 0x48, 0x3e, 0x56, 0x50, 0xf2, 0x31, 0x21, 0x88, 0x8f, 0x29,
  0x96, 0x7c, 0xcc, 0xb1, 0xe4, 0x63, 0x42, 0x10, 0x1f, 0x6b, 0x34, 0xf9,
  0xd8, 0xc2, 0xc9, 0xc7, 0x84, 0x20, 0x3e, 0xd6, 0x7c, 0xf2, 0x31, 0xca,
  0x93, 0x8f, 0x09, 0x41, 0x7c, 0xcc, 0x0a, 0x03, 0xf9, 0x18, 0x35, 0x06,
  0xf2, 0x31, 0x21, 0x88, 0x8f, 0x41, 0x9f, 0x7c, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0x20, 0xcb, 0x09, 0x74, 0xf0, 0x90, 0xc0, 0x9e, 0x30, 0x90,
  0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x3b, 0xa1, 0x0e, 0x60,
  0x70, 0x04, 0xe6, 0x8c, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0x20, 0xeb, 0x09, 0x76, 0x10, 0x03, 0x23, 0x18, 0x31, 0x58, 0x00, 0x10,
  0x04, 0x03, 0x66, 0x2c, 0xd8, 0xa1, 0x18, 0x82, 0x62, 0x08, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0xc0, 0x19, 0x0b, 0x75, 0x08, 0x0c, 0x33, 0x03,
  0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x16, 0x16, 0xf0, 0x50,
  0x06, 0x50, 0x60, 0x17, 0x1a, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xb2, 0xb1, 0x90, 0x87, 0x33, 0x78, 0x02, 0xb3, 0xd4, 0x40, 0x3e,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0x95, 0x05, 0x3d, 0xa4, 0x81,
  0x13, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x01, 0xb3, 0x16, 0xf4, 0x50,
  0x0c, 0x41, 0x31, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xe0, 0xac,
  0x85, 0x3c, 0x04, 0x16, 0x1c, 0xf2, 0x31, 0xc1, 0x90, 0x8f, 0x0d, 0x85,
  0x7c, 0x4c, 0xea, 0x03, 0xf9, 0x58, 0xd0, 0xc8, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xb2, 0xb6, 0xe0, 0x07, 0x3f, 0x28, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xc8, 0xdc, 0xa2, 0x1f, 0xf8, 0x20, 0x17, 0x02,
  0xa3, 0x42, 0x41, 0x3e, 0x16, 0x44, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x2c, 0x2e, 0x40, 0x42, 0x14, 0x90, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x32, 0xb9, 0x08, 0x09, 0x50, 0xe0, 0x85, 0xc0, 0xac,
  0x52, 0x90, 0x8f, 0x05, 0x95, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0x20, 0xab, 0x0b, 0x92, 0x30, 0x85, 0x25, 0x18, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0xcc, 0x2e, 0x4a, 0x82, 0x14, 0x7e, 0x21, 0x18, 0x31, 0x58,
  0x00, 0x10, 0x04, 0x03, 0x86, 0x2f, 0x4a, 0x22, 0x29, 0x82, 0xa4, 0x08,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0xe1, 0x8b, 0x91, 0x08, 0x2c,
  0x58, 0xe4, 0x63, 0x02, 0x22, 0x1f, 0x1b, 0x0a, 0xf9, 0x8c, 0x18, 0x3c,
  0x00, 0x08, 0x82, 0xc1, 0xf4, 0x17, 0x2d, 0xe1, 0x0e, 0xec, 0x10, 0x0e,
  0xe0, 0x30, 0x0f, 0xf3, 0x50, 0x17, 0x75, 0xc1, 0x12, 0xf3, 0x30, 0x9a,
  0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x0f,
  0x00, 0x82, 0x60, 0x30, 0x8d, 0x46, 0x4c, 0xd0, 0x03, 0x3c, 0x94, 0x03,
  0x39, 0xdc, 0xc3, 0x3d, 0xe4, 0x45, 0x5e, 0xc0, 0xc4, 0x3d, 0x8c, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x02,
  0x80, 0x20, 0x18, 0x30, 0xa9, 0x21, 0x13, 0x8b, 0x92, 0xf8, 0x42, 0x2f,
  0xf0, 0xc2, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x38, 0xa9, 0x61, 0x17,
  0x81, 0x11, 0x84, 0x7c, 0x8c, 0x50, 0xe4, 0x63, 0x85, 0x22, 0x1f, 0x33,
  0x14, 0xf9, 0x58, 0x33, 0xc4, 0xc7, 0x9a, 0x21, 0x3e, 0xd6, 0x0c, 0xf1,
  0xb1, 0x81, 0x91, 0x8f, 0x0d, 0x8d, 0x7c, 0x6c, 0x70, 0xe4, 0x63, 0x93,
  0x4b, 0xc0, 0xc7, 0xa6, 0x97, 0x80, 0x8f, 0x4d, 0x30, 0x01, 0x1f, 0x83,
  0x06, 0xf9, 0x58, 0x34, 0xc8, 0xc7, 0xa4, 0x41, 0x3e, 0x36, 0xd4, 0x04,
  0x7c, 0x6c, 0xb0, 0x09, 0xf8, 0xd8, 0x70, 0x13, 0xf0, 0xb1, 0x01, 0x93,
  0x8f, 0x0d, 0x99, 0x7c, 0x6c, 0xd0, 0xe4, 0x33, 0x4b, 0x10, 0x0c, 0x54,
  0x0c, 0x6a, 0x02, 0x84, 0x46, 0x30, 0x50, 0x31, 0xb0, 0x09, 0x10, 0x1a,
  0xc1, 0x40, 0xc5, 0xe0, 0x26, 0x40, 0x68, 0x04, 0x03, 0x15, 0x04, 0xdc,
  0x00, 0xa1, 0x11, 0x58, 0xa0, 0x17, 0x30, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x83, 0x30, 0xe8, 0x8d, 0xb6, 0x80, 0x89, 0x60, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0xec, 0x27, 0x86, 0xf8, 0x18,
  0x58, 0x0c, 0xf1, 0xb1, 0xb0, 0x18, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20,
  0x08, 0x06, 0x4c, 0x7b, 0xd8, 0xc5, 0x20, 0x04, 0x83, 0x10, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0x81, 0xd3, 0x1e, 0x74, 0x11, 0x58, 0x50, 0xc8,
  0xc7, 0x84, 0x42, 0x3e, 0x36, 0x14, 0xf2, 0xb1, 0xe1, 0x24, 0xe0, 0x63,
  0xc3, 0x49, 0xc0, 0xc7, 0x86, 0x93, 0x80, 0xcf, 0x88, 0xc1, 0x02, 0x80,
  0x20, 0x18, 0x30, 0xf5, 0xe1, 0x17, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0x4e, 0x7d, 0xf0, 0x45, 0x60, 0x45, 0x20,
  0x1f, 0x2b, 0x04, 0xf9, 0x58, 0x31, 0xc8, 0x67, 0xc4, 0x60, 0x01, 0x40,
  0x10, 0x0c, 0x18, 0xfd, 0x18, 0x0d, 0x3e, 0xd8, 0x03, 0x3d, 0x58, 0x94,
  0x64, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0xfd, 0x38, 0x8f, 0x60,
  0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x18, 0xfe, 0x28, 0x8d, 0x86, 0x59,
  0x0a, 0x62, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x87, 0x3f, 0xd2,
  0x23, 0x18, 0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0xc6, 0x3f, 0x4e, 0x03,
  0x14, 0xfe, 0xc0, 0x0f, 0x0e, 0xa3, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0xc7, 0x3f, 0xd6, 0x23, 0xb0, 0x3c, 0xb0, 0x0b, 0xf9, 0x18, 0x41,
  0xc8, 0xc7, 0x02, 0x41, 0x3e, 0x16, 0x84, 0x06, 0x7c, 0xec, 0x2e, 0x92,
  0xf8, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x43, 0x22, 0xa8, 0x11,
  0x58, 0x10, 0x1a, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0xc7,
  0x44, 0x6a, 0x23, 0xb0, 0xa0, 0x90, 0x8f, 0x05, 0x7c, 0x01, 0x1f, 0xeb,
  0x0b, 0x50, 0x88, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x38, 0x2a,
  0xe2, 0x1a, 0x81, 0x05, 0xa7, 0x21, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0x70, 0x58, 0x64, 0x37, 0x02, 0x0b, 0x16, 0xf9, 0x58, 0x20, 0x1a,
  0xf0, 0xb1, 0xe0, 0x90, 0x8f, 0x99, 0x82, 0x29, 0xc8, 0xc7, 0x02, 0xd5,
  0x80, 0x8f, 0x51, 0x94, 0x7c, 0x2c, 0x10, 0xe4, 0x63, 0x01, 0x6a, 0xc0,
  0xc7, 0x82, 0x40, 0x3e, 0x16, 0xd8, 0x86, 0x7c, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xe0, 0xa2, 0x91, 0xf2, 0xc0, 0x8d, 0xc0, 0x90, 0x80, 0x3e,
  0xd6, 0x1a, 0x7c, 0x10, 0x1f, 0x73, 0x0d, 0x3e, 0x88, 0x8f, 0xbd, 0x06,
  0x1f, 0xc4, 0xc7, 0x60, 0x03, 0x0c, 0xe2, 0x33, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0x4e, 0x8f, 0x84, 0x47, 0x60, 0x81, 0x6e, 0xc8, 0x67, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9c, 0x1f, 0x71, 0x8f, 0xc0, 0x82, 0x43,
  0x3e, 0x26, 0x1c, 0xf2, 0xb1, 0xe1, 0x90, 0x8f, 0x0d, 0xa6, 0x00, 0x1f,
  0x1b, 0x4c, 0x01, 0x3e, 0x36, 0x98, 0x02, 0x7c, 0x4c, 0x37, 0xcc, 0x20,
  0x3e, 0x76, 0xa5, 0x87, 0x7c, 0x2c, 0x10, 0xe4, 0x63, 0x41, 0x1a, 0xc0,
  0xc7, 0x7c, 0x23, 0xa0, 0x8f, 0x05, 0x93, 0x7c, 0x2c, 0x48, 0xe4, 0x63,
  0x42, 0x22, 0x1f, 0x1b, 0x12, 0xf9, 0x18, 0x2b, 0x98, 0x08, 0x0c, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x20, 0x0c, 0xd0, 0x04, 0x3f, 0x76, 0x23,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b,
  0xf4, 0x40, 0x3e, 0x36, 0xec, 0x81, 0x7c, 0x6c, 0xe0, 0x03, 0xf9, 0x18,
  0x1a, 0x98, 0x83, 0x7c, 0x2c, 0x0d, 0xcc, 0x41, 0x3e, 0xa6, 0x06, 0xe6,
  0x20, 0x1f, 0x73, 0x06, 0xf8, 0x98, 0x33, 0xc0, 0xc7, 0x9c, 0x01, 0x3e,
  0x96, 0x0c, 0xf2, 0xb1, 0x64, 0x90, 0x8f, 0x25, 0x83, 0x7c, 0x6c, 0x00,
  0x07, 0xf8, 0xd8, 0x00, 0x0e, 0xf0, 0xb1, 0x01, 0x1c, 0xe0, 0x63, 0xe0,
  0x90, 0x27, 0x30, 0x18, 0x6e, 0x08, 0xea, 0x04, 0x0c, 0x66, 0x19, 0x84,
  0x20, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x23, 0x55, 0xea, 0x84,
  0x4e, 0xf4, 0xe4, 0x4d, 0x62, 0x64, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c,
  0x0c, 0x55, 0xb1, 0x93, 0x3a, 0xd9, 0x93, 0x37, 0x91, 0x91, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x30, 0x56, 0xe5, 0x4e, 0xee, 0x84, 0x4f, 0xe2,
  0x64, 0x46, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0xc0, 0x60, 0x15, 0x3c,
  0xc1, 0x93, 0x3e, 0x89, 0x13, 0x1a, 0x19, 0x4d, 0x48, 0x89, 0x61, 0xc4,
  0xe0, 0x01, 0x40, 0x10, 0x0c, 0xa6, 0x54, 0xb9, 0x11, 0xfe, 0xb8, 0x8f,
  0x96, 0x60, 0x89, 0x95, 0xe8, 0x0f, 0x1b, 0xb1, 0x11, 0x1b, 0xe9, 0x8f,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0xa1,
  0x1f, 0xe4, 0x63, 0x43, 0x3f, 0xc8, 0xc7, 0x86, 0x7e, 0x90, 0x8f, 0x0d,
  0x11, 0x7c, 0x6c, 0x88, 0xe0, 0x63, 0x43, 0x04, 0x9f, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0xf0, 0x5a, 0x85, 0x47, 0xfe, 0x03, 0x47, 0x46, 0x13,
  0x02, 0xe1, 0x82, 0xc1, 0x2c, 0x88, 0x09, 0xf9, 0x98, 0x8b, 0xb8, 0x47,
  0x7c, 0xec, 0x45, 0xdc, 0x23, 0x3e, 0x06, 0x23, 0xee, 0x11, 0x9f, 0x11,
  0x83, 0x05, 0x00, 0x41, 0x30, 0x60, 0x78, 0xa5, 0x4c, 0x06, 0x21, 0xf0,
  0x89, 0x9e, 0xe0, 0x09, 0x0b, 0x66, 0x44, 0x3e, 0x16, 0x80, 0x85, 0x7c,
  0x4c, 0x00, 0x0b, 0xf9, 0xd8, 0x00, 0x16, 0xf2, 0x31, 0x64, 0x88, 0x8f,
  0x21, 0x43, 0x7c, 0x0c, 0x19, 0xe2, 0x33, 0x62, 0xf0, 0x00, 0x20, 0x08,
  0x06, 0x93, 0xaf, 0xec, 0x09, 0x8d, 0xc0, 0xc8, 0x20, 0x04, 0x36, 0xf2,
  0x26, 0x6f, 0xf2, 0x26, 0xcc, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0xd8, 0xa0, 0x12, 0xf2, 0xb1, 0x41, 0x25, 0xe4, 0x63,
  0x83, 0x4a, 0xc8, 0xc7, 0xb2, 0x01, 0x3e, 0x96, 0x0d, 0xf0, 0xb1, 0x6c,
  0x80, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x84, 0x41, 0xb9, 0xd4,
  0x09, 0x8e, 0x98, 0xca, 0x68, 0x42, 0x30, 0x58, 0x60, 0x06, 0xf2, 0x19,
  0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x64, 0x5e, 0x7e, 0xa5, 0x5c, 0xca,
  0x45, 0x57, 0x8c, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0xe6, 0xe5,
  0x57, 0xca, 0xa5, 0x5c, 0x68, 0xa5, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04,
  0x03, 0x64, 0x5e, 0x7e, 0xa5, 0x5c, 0xca, 0x25, 0x57, 0x88, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x40, 0xe6, 0xe5, 0x57, 0xca, 0xa5, 0x5c, 0x6e,
  0x25, 0xb0, 0x35, 0xc8, 0x11, 0xfa, 0xd8, 0x8e, 0xe8, 0x08, 0x7d, 0x8c,
  0x0d, 0x76, 0x84, 0x3e, 0x36, 0xac, 0x89, 0x7c, 0x6c, 0x60, 0x13, 0xf9,
  0x98, 0xd0, 0x26, 0xf0, 0x31, 0x37, 0x11, 0xe2, 0x33, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x61, 0xf0, 0x2e, 0x7f, 0x22, 0x26, 0x7b, 0x32, 0x9a,
  0x10, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x10, 0x06, 0xf1, 0x12,
  0x2a, 0x64, 0xc2, 0x2a, 0xa3, 0x09, 0x01, 0x60, 0x83, 0x21, 0x1f, 0x13,
  0x0c, 0xf9, 0x98, 0x60, 0x07, 0xf1, 0x31, 0xc1, 0x4c, 0xe2, 0x63, 0xcd,
  0x1d, 0xc4, 0xe7, 0x06, 0x62, 0x2b, 0x88, 0x15, 0xb4, 0x02, 0x54, 0xe4,
  0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xce, 0xc8, 0xdc, 0x4b, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x57, 0xc8, 0xc8, 0x4a, 0x90, 0x27,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x89, 0x8c, 0xad, 0x04, 0xa2,
  0x32, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x1b, 0xc8, 0xe0, 0x4a, 0x50,
  0xc1, 0xae, 0x40, 0x05, 0xf8, 0x82, 0x86, 0xec, 0xcb, 0x0d, 0x4a, 0x08,
  0xf6, 0x1a, 0x62, 0x2b, 0xe0, 0x15, 0xb4, 0x67, 0x55, 0xe4, 0x33, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0x8e, 0xcb, 0x88, 0x4c, 0x30, 0x62, 0x70,
  0x00, 0x20, 0x08, 0x06, 0x17, 0xcb, 0xf4, 0x4a, 0x40, 0x2a, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x70, 0xb5, 0x4c, 0xb8, 0x04, 0xad, 0x32, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0xdb, 0xca, 0x8c, 0x4b, 0x50, 0x81, 0xb9,
  0x40, 0x05, 0x23, 0x83, 0x86, 0x98, 0xcc, 0x0d, 0x4a, 0x08, 0xb6, 0x02,
  0x78, 0xb9, 0x6a, 0x82, 0xbd, 0x8c, 0xd8, 0x0a, 0xd2, 0x05, 0x6d, 0xeb,
  0x15, 0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0xb3, 0x33, 0x2f,
  0x13, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x95, 0x33, 0xea, 0x12,
  0xc4, 0xca, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c, 0x3a, 0xe3, 0x2e,
  0x81, 0xae, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x86, 0x33, 0xf0,
  0x12, 0x54, 0x20, 0x33, 0x50, 0xc1, 0xcc, 0xa0, 0x21, 0xfc, 0x72, 0x83,
  0x12, 0x82, 0xad, 0xe0, 0x5f, 0xae, 0x9a, 0x60, 0x47, 0x0c, 0x12, 0x00,
  0x04, 0xc1, 0x40, 0x39, 0x1b, 0x9a, 0xd9, 0x19, 0x9d, 0x79, 0x99, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
