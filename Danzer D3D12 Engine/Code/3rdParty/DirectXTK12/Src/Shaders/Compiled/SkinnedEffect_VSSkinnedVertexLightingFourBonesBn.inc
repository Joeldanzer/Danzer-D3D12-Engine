#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; BLENDINDICES             0   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; SV_Position              0   xyzw        3      POS   float   xyzw
;
; shader debug name: Compiled\SkinnedEffect_VSSkinnedVertexLightingFourBonesBn.pdb
; shader hash: 9b0494292972fe35b22de052299eb8d9
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [3872 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 20, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 1 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 2 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 7 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 13 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 14 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 15 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [72 x [3 x <4 x float>]] }

define void @VSSkinnedVertexLightingFourBonesBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = fmul fast float %12, 2.000000e+00
  %20 = fmul fast float %13, 2.000000e+00
  %21 = fmul fast float %14, 2.000000e+00
  %22 = fadd fast float %19, -1.000000e+00
  %23 = fadd fast float %20, -1.000000e+00
  %24 = fadd fast float %21, -1.000000e+00
  %25 = mul i32 %6, 3
  %26 = add i32 %25, 26
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %26)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = add i32 %25, 27
  %33 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %32)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.f32 %33, 0
  %35 = extractvalue %dx.types.CBufRet.f32 %33, 1
  %36 = extractvalue %dx.types.CBufRet.f32 %33, 2
  %37 = extractvalue %dx.types.CBufRet.f32 %33, 3
  %38 = add i32 %25, 28
  %39 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %38)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.f32 %39, 0
  %41 = extractvalue %dx.types.CBufRet.f32 %39, 1
  %42 = extractvalue %dx.types.CBufRet.f32 %39, 2
  %43 = extractvalue %dx.types.CBufRet.f32 %39, 3
  %44 = fmul fast float %28, %2
  %45 = fmul fast float %34, %2
  %46 = fmul fast float %40, %2
  %47 = fmul fast float %29, %2
  %48 = fmul fast float %35, %2
  %49 = fmul fast float %41, %2
  %50 = fmul fast float %30, %2
  %51 = fmul fast float %36, %2
  %52 = fmul fast float %42, %2
  %53 = fmul fast float %31, %2
  %54 = fmul fast float %37, %2
  %55 = fmul fast float %43, %2
  %56 = mul i32 %7, 3
  %57 = add i32 %56, 26
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %57)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = extractvalue %dx.types.CBufRet.f32 %58, 3
  %63 = add i32 %56, 27
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %63)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %68 = extractvalue %dx.types.CBufRet.f32 %64, 3
  %69 = add i32 %56, 28
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %69)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = extractvalue %dx.types.CBufRet.f32 %70, 3
  %75 = fmul fast float %59, %3
  %76 = fmul fast float %65, %3
  %77 = fmul fast float %71, %3
  %78 = fmul fast float %60, %3
  %79 = fmul fast float %66, %3
  %80 = fmul fast float %72, %3
  %81 = fmul fast float %61, %3
  %82 = fmul fast float %67, %3
  %83 = fmul fast float %73, %3
  %84 = fmul fast float %62, %3
  %85 = fmul fast float %68, %3
  %86 = fmul fast float %74, %3
  %87 = fadd fast float %75, %44
  %88 = fadd fast float %76, %45
  %89 = fadd fast float %77, %46
  %90 = fadd fast float %78, %47
  %91 = fadd fast float %79, %48
  %92 = fadd fast float %80, %49
  %93 = fadd fast float %81, %50
  %94 = fadd fast float %82, %51
  %95 = fadd fast float %83, %52
  %96 = fadd fast float %84, %53
  %97 = fadd fast float %85, %54
  %98 = fadd fast float %86, %55
  %99 = mul i32 %8, 3
  %100 = add i32 %99, 26
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %100)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = extractvalue %dx.types.CBufRet.f32 %101, 3
  %106 = add i32 %99, 27
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %106)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %110 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %111 = extractvalue %dx.types.CBufRet.f32 %107, 3
  %112 = add i32 %99, 28
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %112)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = extractvalue %dx.types.CBufRet.f32 %113, 3
  %118 = fmul fast float %102, %4
  %119 = fmul fast float %108, %4
  %120 = fmul fast float %114, %4
  %121 = fmul fast float %103, %4
  %122 = fmul fast float %109, %4
  %123 = fmul fast float %115, %4
  %124 = fmul fast float %104, %4
  %125 = fmul fast float %110, %4
  %126 = fmul fast float %116, %4
  %127 = fmul fast float %105, %4
  %128 = fmul fast float %111, %4
  %129 = fmul fast float %117, %4
  %130 = fadd fast float %87, %118
  %131 = fadd fast float %88, %119
  %132 = fadd fast float %89, %120
  %133 = fadd fast float %90, %121
  %134 = fadd fast float %91, %122
  %135 = fadd fast float %92, %123
  %136 = fadd fast float %93, %124
  %137 = fadd fast float %94, %125
  %138 = fadd fast float %95, %126
  %139 = fadd fast float %96, %127
  %140 = fadd fast float %97, %128
  %141 = fadd fast float %98, %129
  %142 = mul i32 %9, 3
  %143 = add i32 %142, 26
  %144 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %143)  ; CBufferLoadLegacy(handle,regIndex)
  %145 = extractvalue %dx.types.CBufRet.f32 %144, 0
  %146 = extractvalue %dx.types.CBufRet.f32 %144, 1
  %147 = extractvalue %dx.types.CBufRet.f32 %144, 2
  %148 = extractvalue %dx.types.CBufRet.f32 %144, 3
  %149 = add i32 %142, 27
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %149)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = extractvalue %dx.types.CBufRet.f32 %150, 3
  %155 = add i32 %142, 28
  %156 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %155)  ; CBufferLoadLegacy(handle,regIndex)
  %157 = extractvalue %dx.types.CBufRet.f32 %156, 0
  %158 = extractvalue %dx.types.CBufRet.f32 %156, 1
  %159 = extractvalue %dx.types.CBufRet.f32 %156, 2
  %160 = extractvalue %dx.types.CBufRet.f32 %156, 3
  %161 = fmul fast float %145, %5
  %162 = fmul fast float %151, %5
  %163 = fmul fast float %157, %5
  %164 = fmul fast float %146, %5
  %165 = fmul fast float %152, %5
  %166 = fmul fast float %158, %5
  %167 = fmul fast float %147, %5
  %168 = fmul fast float %153, %5
  %169 = fmul fast float %159, %5
  %170 = fmul fast float %148, %5
  %171 = fmul fast float %154, %5
  %172 = fmul fast float %160, %5
  %173 = fadd fast float %130, %161
  %174 = fadd fast float %131, %162
  %175 = fadd fast float %132, %163
  %176 = fadd fast float %133, %164
  %177 = fadd fast float %134, %165
  %178 = fadd fast float %135, %166
  %179 = fadd fast float %136, %167
  %180 = fadd fast float %137, %168
  %181 = fadd fast float %138, %169
  %182 = fadd fast float %139, %170
  %183 = fadd fast float %140, %171
  %184 = fadd fast float %141, %172
  %185 = fmul fast float %173, %15
  %186 = call float @dx.op.tertiary.f32(i32 46, float %16, float %176, float %185)  ; FMad(a,b,c)
  %187 = call float @dx.op.tertiary.f32(i32 46, float %17, float %179, float %186)  ; FMad(a,b,c)
  %188 = call float @dx.op.tertiary.f32(i32 46, float %18, float %182, float %187)  ; FMad(a,b,c)
  %189 = fmul fast float %174, %15
  %190 = call float @dx.op.tertiary.f32(i32 46, float %16, float %177, float %189)  ; FMad(a,b,c)
  %191 = call float @dx.op.tertiary.f32(i32 46, float %17, float %180, float %190)  ; FMad(a,b,c)
  %192 = call float @dx.op.tertiary.f32(i32 46, float %18, float %183, float %191)  ; FMad(a,b,c)
  %193 = fmul fast float %175, %15
  %194 = call float @dx.op.tertiary.f32(i32 46, float %16, float %178, float %193)  ; FMad(a,b,c)
  %195 = call float @dx.op.tertiary.f32(i32 46, float %17, float %181, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %18, float %184, float %195)  ; FMad(a,b,c)
  %197 = fmul fast float %173, %22
  %198 = call float @dx.op.tertiary.f32(i32 46, float %23, float %176, float %197)  ; FMad(a,b,c)
  %199 = call float @dx.op.tertiary.f32(i32 46, float %24, float %179, float %198)  ; FMad(a,b,c)
  %200 = fmul fast float %174, %22
  %201 = call float @dx.op.tertiary.f32(i32 46, float %23, float %177, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %24, float %180, float %201)  ; FMad(a,b,c)
  %203 = fmul fast float %175, %22
  %204 = call float @dx.op.tertiary.f32(i32 46, float %23, float %178, float %203)  ; FMad(a,b,c)
  %205 = call float @dx.op.tertiary.f32(i32 46, float %24, float %181, float %204)  ; FMad(a,b,c)
  %206 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %207 = extractvalue %dx.types.CBufRet.f32 %206, 0
  %208 = extractvalue %dx.types.CBufRet.f32 %206, 1
  %209 = extractvalue %dx.types.CBufRet.f32 %206, 2
  %210 = extractvalue %dx.types.CBufRet.f32 %206, 3
  %211 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %212 = extractvalue %dx.types.CBufRet.f32 %211, 0
  %213 = extractvalue %dx.types.CBufRet.f32 %211, 1
  %214 = extractvalue %dx.types.CBufRet.f32 %211, 2
  %215 = extractvalue %dx.types.CBufRet.f32 %211, 3
  %216 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %217 = extractvalue %dx.types.CBufRet.f32 %216, 0
  %218 = extractvalue %dx.types.CBufRet.f32 %216, 1
  %219 = extractvalue %dx.types.CBufRet.f32 %216, 2
  %220 = extractvalue %dx.types.CBufRet.f32 %216, 3
  %221 = fmul fast float %207, %188
  %222 = call float @dx.op.tertiary.f32(i32 46, float %192, float %208, float %221)  ; FMad(a,b,c)
  %223 = call float @dx.op.tertiary.f32(i32 46, float %196, float %209, float %222)  ; FMad(a,b,c)
  %224 = call float @dx.op.tertiary.f32(i32 46, float %18, float %210, float %223)  ; FMad(a,b,c)
  %225 = fmul fast float %212, %188
  %226 = call float @dx.op.tertiary.f32(i32 46, float %192, float %213, float %225)  ; FMad(a,b,c)
  %227 = call float @dx.op.tertiary.f32(i32 46, float %196, float %214, float %226)  ; FMad(a,b,c)
  %228 = call float @dx.op.tertiary.f32(i32 46, float %18, float %215, float %227)  ; FMad(a,b,c)
  %229 = fmul fast float %217, %188
  %230 = call float @dx.op.tertiary.f32(i32 46, float %192, float %218, float %229)  ; FMad(a,b,c)
  %231 = call float @dx.op.tertiary.f32(i32 46, float %196, float %219, float %230)  ; FMad(a,b,c)
  %232 = call float @dx.op.tertiary.f32(i32 46, float %18, float %220, float %231)  ; FMad(a,b,c)
  %233 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %234 = extractvalue %dx.types.CBufRet.f32 %233, 0
  %235 = extractvalue %dx.types.CBufRet.f32 %233, 1
  %236 = extractvalue %dx.types.CBufRet.f32 %233, 2
  %237 = fsub fast float %234, %224
  %238 = fsub fast float %235, %228
  %239 = fsub fast float %236, %232
  %240 = call float @dx.op.dot3.f32(i32 55, float %237, float %238, float %239, float %237, float %238, float %239)  ; Dot3(ax,ay,az,bx,by,bz)
  %241 = call float @dx.op.unary.f32(i32 25, float %240)  ; Rsqrt(value)
  %242 = fmul fast float %237, %241
  %243 = fmul fast float %238, %241
  %244 = fmul fast float %239, %241
  %245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.f32 %245, 0
  %247 = extractvalue %dx.types.CBufRet.f32 %245, 1
  %248 = extractvalue %dx.types.CBufRet.f32 %245, 2
  %249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %250 = extractvalue %dx.types.CBufRet.f32 %249, 0
  %251 = extractvalue %dx.types.CBufRet.f32 %249, 1
  %252 = extractvalue %dx.types.CBufRet.f32 %249, 2
  %253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %254 = extractvalue %dx.types.CBufRet.f32 %253, 0
  %255 = extractvalue %dx.types.CBufRet.f32 %253, 1
  %256 = extractvalue %dx.types.CBufRet.f32 %253, 2
  %257 = fmul fast float %246, %199
  %258 = call float @dx.op.tertiary.f32(i32 46, float %202, float %247, float %257)  ; FMad(a,b,c)
  %259 = call float @dx.op.tertiary.f32(i32 46, float %205, float %248, float %258)  ; FMad(a,b,c)
  %260 = fmul fast float %250, %199
  %261 = call float @dx.op.tertiary.f32(i32 46, float %202, float %251, float %260)  ; FMad(a,b,c)
  %262 = call float @dx.op.tertiary.f32(i32 46, float %205, float %252, float %261)  ; FMad(a,b,c)
  %263 = fmul fast float %254, %199
  %264 = call float @dx.op.tertiary.f32(i32 46, float %202, float %255, float %263)  ; FMad(a,b,c)
  %265 = call float @dx.op.tertiary.f32(i32 46, float %205, float %256, float %264)  ; FMad(a,b,c)
  %266 = call float @dx.op.dot3.f32(i32 55, float %259, float %262, float %265, float %259, float %262, float %265)  ; Dot3(ax,ay,az,bx,by,bz)
  %267 = call float @dx.op.unary.f32(i32 25, float %266)  ; Rsqrt(value)
  %268 = fmul fast float %267, %259
  %269 = fmul fast float %267, %262
  %270 = fmul fast float %267, %265
  %271 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %272 = extractvalue %dx.types.CBufRet.f32 %271, 0
  %273 = extractvalue %dx.types.CBufRet.f32 %271, 1
  %274 = extractvalue %dx.types.CBufRet.f32 %271, 2
  %275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %276 = extractvalue %dx.types.CBufRet.f32 %275, 0
  %277 = extractvalue %dx.types.CBufRet.f32 %275, 1
  %278 = extractvalue %dx.types.CBufRet.f32 %275, 2
  %279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %280 = extractvalue %dx.types.CBufRet.f32 %279, 0
  %281 = extractvalue %dx.types.CBufRet.f32 %279, 1
  %282 = extractvalue %dx.types.CBufRet.f32 %279, 2
  %283 = fsub fast float %242, %272
  %284 = fsub fast float %243, %273
  %285 = fsub fast float %244, %274
  %286 = call float @dx.op.dot3.f32(i32 55, float %283, float %284, float %285, float %283, float %284, float %285)  ; Dot3(ax,ay,az,bx,by,bz)
  %287 = call float @dx.op.unary.f32(i32 25, float %286)  ; Rsqrt(value)
  %288 = fmul fast float %287, %284
  %289 = fmul fast float %287, %285
  %290 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %291 = extractvalue %dx.types.CBufRet.f32 %290, 0
  %292 = extractvalue %dx.types.CBufRet.f32 %290, 1
  %293 = extractvalue %dx.types.CBufRet.f32 %290, 2
  %294 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %295 = extractvalue %dx.types.CBufRet.f32 %294, 0
  %296 = extractvalue %dx.types.CBufRet.f32 %294, 1
  %297 = extractvalue %dx.types.CBufRet.f32 %294, 2
  %298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %299 = extractvalue %dx.types.CBufRet.f32 %298, 0
  %300 = extractvalue %dx.types.CBufRet.f32 %298, 1
  %301 = extractvalue %dx.types.CBufRet.f32 %298, 2
  %302 = fsub fast float %242, %291
  %303 = fsub fast float %243, %292
  %304 = fsub fast float %244, %293
  %305 = call float @dx.op.dot3.f32(i32 55, float %302, float %303, float %304, float %302, float %303, float %304)  ; Dot3(ax,ay,az,bx,by,bz)
  %306 = call float @dx.op.unary.f32(i32 25, float %305)  ; Rsqrt(value)
  %307 = fmul fast float %306, %303
  %308 = fmul fast float %306, %304
  %309 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %310 = extractvalue %dx.types.CBufRet.f32 %309, 0
  %311 = extractvalue %dx.types.CBufRet.f32 %309, 1
  %312 = extractvalue %dx.types.CBufRet.f32 %309, 2
  %313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %314 = extractvalue %dx.types.CBufRet.f32 %313, 0
  %315 = extractvalue %dx.types.CBufRet.f32 %313, 1
  %316 = extractvalue %dx.types.CBufRet.f32 %313, 2
  %317 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %318 = extractvalue %dx.types.CBufRet.f32 %317, 0
  %319 = extractvalue %dx.types.CBufRet.f32 %317, 1
  %320 = extractvalue %dx.types.CBufRet.f32 %317, 2
  %321 = fsub fast float %242, %310
  %322 = fsub fast float %243, %311
  %323 = fsub fast float %244, %312
  %324 = call float @dx.op.dot3.f32(i32 55, float %321, float %322, float %323, float %321, float %322, float %323)  ; Dot3(ax,ay,az,bx,by,bz)
  %325 = call float @dx.op.unary.f32(i32 25, float %324)  ; Rsqrt(value)
  %326 = fmul fast float %325, %322
  %327 = fmul fast float %325, %323
  %328 = fsub fast float -0.000000e+00, %273
  %329 = fsub fast float -0.000000e+00, %274
  %330 = fsub fast float -0.000000e+00, %292
  %331 = fsub fast float -0.000000e+00, %293
  %332 = fsub fast float -0.000000e+00, %311
  %333 = fsub fast float -0.000000e+00, %312
  %334 = fmul fast float %268, %272
  %335 = fsub fast float -0.000000e+00, %334
  %336 = call float @dx.op.tertiary.f32(i32 46, float %328, float %269, float %335)  ; FMad(a,b,c)
  %337 = call float @dx.op.tertiary.f32(i32 46, float %329, float %270, float %336)  ; FMad(a,b,c)
  %338 = fmul fast float %268, %291
  %339 = fsub fast float -0.000000e+00, %338
  %340 = call float @dx.op.tertiary.f32(i32 46, float %330, float %269, float %339)  ; FMad(a,b,c)
  %341 = call float @dx.op.tertiary.f32(i32 46, float %331, float %270, float %340)  ; FMad(a,b,c)
  %342 = fmul fast float %268, %310
  %343 = fsub fast float -0.000000e+00, %342
  %344 = call float @dx.op.tertiary.f32(i32 46, float %332, float %269, float %343)  ; FMad(a,b,c)
  %345 = call float @dx.op.tertiary.f32(i32 46, float %333, float %270, float %344)  ; FMad(a,b,c)
  %346 = fmul fast float %283, %268
  %347 = fmul fast float %346, %287
  %348 = call float @dx.op.tertiary.f32(i32 46, float %288, float %269, float %347)  ; FMad(a,b,c)
  %349 = call float @dx.op.tertiary.f32(i32 46, float %289, float %270, float %348)  ; FMad(a,b,c)
  %350 = fmul fast float %302, %268
  %351 = fmul fast float %350, %306
  %352 = call float @dx.op.tertiary.f32(i32 46, float %307, float %269, float %351)  ; FMad(a,b,c)
  %353 = call float @dx.op.tertiary.f32(i32 46, float %308, float %270, float %352)  ; FMad(a,b,c)
  %354 = fmul fast float %321, %268
  %355 = fmul fast float %354, %325
  %356 = call float @dx.op.tertiary.f32(i32 46, float %326, float %269, float %355)  ; FMad(a,b,c)
  %357 = call float @dx.op.tertiary.f32(i32 46, float %327, float %270, float %356)  ; FMad(a,b,c)
  %358 = fcmp fast olt float %337, 0.000000e+00
  %359 = fcmp fast olt float %341, 0.000000e+00
  %360 = fcmp fast olt float %345, 0.000000e+00
  %361 = select i1 %358, float 0.000000e+00, float 1.000000e+00
  %362 = select i1 %359, float 0.000000e+00, float 1.000000e+00
  %363 = select i1 %360, float 0.000000e+00, float 1.000000e+00
  %364 = fmul fast float %361, %337
  %365 = fmul fast float %362, %341
  %366 = fmul fast float %363, %345
  %367 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %368 = extractvalue %dx.types.CBufRet.f32 %367, 3
  %369 = call float @dx.op.binary.f32(i32 35, float %349, float 0.000000e+00)  ; FMax(a,b)
  %370 = call float @dx.op.binary.f32(i32 35, float %353, float 0.000000e+00)  ; FMax(a,b)
  %371 = call float @dx.op.binary.f32(i32 35, float %357, float 0.000000e+00)  ; FMax(a,b)
  %372 = fmul fast float %369, %361
  %373 = fmul fast float %370, %362
  %374 = fmul fast float %371, %363
  %375 = call float @dx.op.unary.f32(i32 23, float %372)  ; Log(value)
  %376 = call float @dx.op.unary.f32(i32 23, float %373)  ; Log(value)
  %377 = call float @dx.op.unary.f32(i32 23, float %374)  ; Log(value)
  %378 = fmul fast float %375, %368
  %379 = fmul fast float %376, %368
  %380 = fmul fast float %377, %368
  %381 = call float @dx.op.unary.f32(i32 21, float %378)  ; Exp(value)
  %382 = call float @dx.op.unary.f32(i32 21, float %379)  ; Exp(value)
  %383 = call float @dx.op.unary.f32(i32 21, float %380)  ; Exp(value)
  %384 = fmul fast float %381, %337
  %385 = fmul fast float %382, %341
  %386 = fmul fast float %383, %345
  %387 = fmul fast float %364, %276
  %388 = call float @dx.op.tertiary.f32(i32 46, float %365, float %295, float %387)  ; FMad(a,b,c)
  %389 = call float @dx.op.tertiary.f32(i32 46, float %366, float %314, float %388)  ; FMad(a,b,c)
  %390 = fmul fast float %364, %277
  %391 = call float @dx.op.tertiary.f32(i32 46, float %365, float %296, float %390)  ; FMad(a,b,c)
  %392 = call float @dx.op.tertiary.f32(i32 46, float %366, float %315, float %391)  ; FMad(a,b,c)
  %393 = fmul fast float %364, %278
  %394 = call float @dx.op.tertiary.f32(i32 46, float %365, float %297, float %393)  ; FMad(a,b,c)
  %395 = call float @dx.op.tertiary.f32(i32 46, float %366, float %316, float %394)  ; FMad(a,b,c)
  %396 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %397 = extractvalue %dx.types.CBufRet.f32 %396, 0
  %398 = extractvalue %dx.types.CBufRet.f32 %396, 1
  %399 = extractvalue %dx.types.CBufRet.f32 %396, 2
  %400 = fmul fast float %397, %389
  %401 = fmul fast float %398, %392
  %402 = fmul fast float %399, %395
  %403 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %404 = extractvalue %dx.types.CBufRet.f32 %403, 0
  %405 = extractvalue %dx.types.CBufRet.f32 %403, 1
  %406 = extractvalue %dx.types.CBufRet.f32 %403, 2
  %407 = fadd fast float %400, %404
  %408 = fadd fast float %401, %405
  %409 = fadd fast float %402, %406
  %410 = fmul fast float %384, %280
  %411 = call float @dx.op.tertiary.f32(i32 46, float %385, float %299, float %410)  ; FMad(a,b,c)
  %412 = call float @dx.op.tertiary.f32(i32 46, float %386, float %318, float %411)  ; FMad(a,b,c)
  %413 = fmul fast float %384, %281
  %414 = call float @dx.op.tertiary.f32(i32 46, float %385, float %300, float %413)  ; FMad(a,b,c)
  %415 = call float @dx.op.tertiary.f32(i32 46, float %386, float %319, float %414)  ; FMad(a,b,c)
  %416 = fmul fast float %384, %282
  %417 = call float @dx.op.tertiary.f32(i32 46, float %385, float %301, float %416)  ; FMad(a,b,c)
  %418 = call float @dx.op.tertiary.f32(i32 46, float %386, float %320, float %417)  ; FMad(a,b,c)
  %419 = extractvalue %dx.types.CBufRet.f32 %367, 0
  %420 = extractvalue %dx.types.CBufRet.f32 %367, 1
  %421 = extractvalue %dx.types.CBufRet.f32 %367, 2
  %422 = fmul fast float %419, %412
  %423 = fmul fast float %420, %415
  %424 = fmul fast float %421, %418
  %425 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %426 = extractvalue %dx.types.CBufRet.f32 %425, 0
  %427 = extractvalue %dx.types.CBufRet.f32 %425, 1
  %428 = extractvalue %dx.types.CBufRet.f32 %425, 2
  %429 = extractvalue %dx.types.CBufRet.f32 %425, 3
  %430 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %431 = extractvalue %dx.types.CBufRet.f32 %430, 0
  %432 = extractvalue %dx.types.CBufRet.f32 %430, 1
  %433 = extractvalue %dx.types.CBufRet.f32 %430, 2
  %434 = extractvalue %dx.types.CBufRet.f32 %430, 3
  %435 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %436 = extractvalue %dx.types.CBufRet.f32 %435, 0
  %437 = extractvalue %dx.types.CBufRet.f32 %435, 1
  %438 = extractvalue %dx.types.CBufRet.f32 %435, 2
  %439 = extractvalue %dx.types.CBufRet.f32 %435, 3
  %440 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %441 = extractvalue %dx.types.CBufRet.f32 %440, 0
  %442 = extractvalue %dx.types.CBufRet.f32 %440, 1
  %443 = extractvalue %dx.types.CBufRet.f32 %440, 2
  %444 = extractvalue %dx.types.CBufRet.f32 %440, 3
  %445 = fmul fast float %426, %188
  %446 = call float @dx.op.tertiary.f32(i32 46, float %192, float %427, float %445)  ; FMad(a,b,c)
  %447 = call float @dx.op.tertiary.f32(i32 46, float %196, float %428, float %446)  ; FMad(a,b,c)
  %448 = call float @dx.op.tertiary.f32(i32 46, float %18, float %429, float %447)  ; FMad(a,b,c)
  %449 = fmul fast float %431, %188
  %450 = call float @dx.op.tertiary.f32(i32 46, float %192, float %432, float %449)  ; FMad(a,b,c)
  %451 = call float @dx.op.tertiary.f32(i32 46, float %196, float %433, float %450)  ; FMad(a,b,c)
  %452 = call float @dx.op.tertiary.f32(i32 46, float %18, float %434, float %451)  ; FMad(a,b,c)
  %453 = fmul fast float %436, %188
  %454 = call float @dx.op.tertiary.f32(i32 46, float %192, float %437, float %453)  ; FMad(a,b,c)
  %455 = call float @dx.op.tertiary.f32(i32 46, float %196, float %438, float %454)  ; FMad(a,b,c)
  %456 = call float @dx.op.tertiary.f32(i32 46, float %18, float %439, float %455)  ; FMad(a,b,c)
  %457 = fmul fast float %441, %188
  %458 = call float @dx.op.tertiary.f32(i32 46, float %192, float %442, float %457)  ; FMad(a,b,c)
  %459 = call float @dx.op.tertiary.f32(i32 46, float %196, float %443, float %458)  ; FMad(a,b,c)
  %460 = call float @dx.op.tertiary.f32(i32 46, float %18, float %444, float %459)  ; FMad(a,b,c)
  %461 = extractvalue %dx.types.CBufRet.f32 %396, 3
  %462 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %463 = extractvalue %dx.types.CBufRet.f32 %462, 0
  %464 = extractvalue %dx.types.CBufRet.f32 %462, 1
  %465 = extractvalue %dx.types.CBufRet.f32 %462, 2
  %466 = extractvalue %dx.types.CBufRet.f32 %462, 3
  %467 = call float @dx.op.dot4.f32(i32 56, float %188, float %192, float %196, float %18, float %463, float %464, float %465, float %466)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %468 = call float @dx.op.unary.f32(i32 7, float %467)  ; Saturate(value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %448)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %452)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %456)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %460)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %407)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %408)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %409)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %461)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %422)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %423)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %424)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %468)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %10)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 3872, null}
!7 = !{[22 x i32] [i32 20, i32 16, i32 61680, i32 61680, i32 61680, i32 61680, i32 119, i32 119, i32 119, i32 0, i32 256, i32 512, i32 0, i32 0, i32 61687, i32 61687, i32 61687, i32 61687, i32 61687, i32 61687, i32 61687, i32 61687]}
!8 = !{void ()* @VSSkinnedVertexLightingFourBonesBn, !"VSSkinnedVertexLightingFourBonesBn", !9, !4, null}
!9 = !{!10, !20, null}
!10 = !{!11, !14, !16, !18, !19}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 2, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !12, i8 0, i32 1, i8 4, i32 3, i8 0, !13}
!19 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 4, i8 0, !13}
!20 = !{!21, !22, !24, !25}
!21 = !{i32 0, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 0, i8 0, !13}
!22 = !{i32 1, !"COLOR", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!23 = !{i32 1}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 2, i8 0, !17}
!25 = !{i32 3, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 3, i8 0, !13}

#endif

const unsigned char SkinnedEffect_VSSkinnedVertexLightingFourBonesBn[] = {
  0x44, 0x58, 0x42, 0x43, 0x38, 0x19, 0xa7, 0x62, 0x86, 0xf7, 0xe8, 0x66,
  0x0b, 0xb7, 0xa1, 0x7f, 0x04, 0x42, 0x2e, 0x4c, 0x01, 0x00, 0x00, 0x00,
  0x3a, 0x19, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00,
  0x82, 0x03, 0x00, 0x00, 0x12, 0x04, 0x00, 0x00, 0x5e, 0x04, 0x00, 0x00,
  0x7a, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xdd, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e,
  0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45,
  0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x4f, 0x53, 0x47,
  0x31, 0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73,
  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x50, 0x53, 0x56, 0x30, 0x94, 0x01,
  0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x05, 0x04,
  0x00, 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f,
  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
  0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42,
  0x4c, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00,
  0x42, 0x4c, 0x45, 0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
  0x44, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x04, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x02,
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01,
  0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x03, 0x03, 0x04,
  0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0,
  0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x77, 0x00,
  0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0,
  0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0,
  0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0x52, 0x54,
  0x53, 0x30, 0x88, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00,
  0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
  0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
  0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
  0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x49, 0x4c,
  0x44, 0x4e, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x43, 0x6f,
  0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x53, 0x6b, 0x69, 0x6e, 0x6e,
  0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x53,
  0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
  0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x75, 0x72,
  0x42, 0x6f, 0x6e, 0x65, 0x73, 0x42, 0x6e, 0x2e, 0x70, 0x64, 0x62, 0x00,
  0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x9b, 0x04, 0x94, 0x29, 0x29, 0x72, 0xfe, 0x35, 0xb2, 0x2d,
  0xe0, 0x52, 0x29, 0x9e, 0xb8, 0xd9, 0x44, 0x58, 0x49, 0x4c, 0xb8, 0x14,
  0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0x2e, 0x05, 0x00, 0x00, 0x44, 0x58,
  0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xa0, 0x14,
  0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x25, 0x05,
  0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00,
  0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10,
  0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04,
  0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10,
  0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90,
  0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48,
  0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83,
  0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02,
  0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30,
  0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c,
  0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x34, 0x00,
  0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23,
  0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c,
  0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xa0, 0xc1, 0x08, 0x40, 0x09,
  0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6,
  0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x82, 0x20, 0x88, 0x82, 0x20,
  0xa4, 0x18, 0x00, 0x41, 0x10, 0xc5, 0x40, 0x4a, 0x41, 0x06, 0x62, 0x18,
  0x86, 0x61, 0x18, 0x88, 0x29, 0xc3, 0x40, 0x0c, 0xe4, 0x14, 0x62, 0x20,
  0x86, 0x81, 0xa0, 0xa2, 0x0c, 0xc4, 0x30, 0x0c, 0xc3, 0x30, 0x0c, 0x03,
  0x49, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15,
  0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0x23, 0x62, 0x18, 0x86, 0x81, 0x8a, 0x7b,
  0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x10, 0x68, 0x86, 0x85, 0x40,
  0x41, 0x55, 0x08, 0x8a, 0xb0, 0x08, 0xba, 0x4a, 0x31, 0x10, 0xc3, 0x30,
  0x50, 0x36, 0x47, 0x10, 0x14, 0xc3, 0x22, 0x0a, 0x82, 0xd8, 0x88, 0x1b,
  0x08, 0x18, 0x46, 0x20, 0x86, 0x61, 0x84, 0x61, 0xc8, 0x01, 0x30, 0x09,
  0xbe, 0x1c, 0xf8, 0x12, 0x69, 0xbc, 0xea, 0x70, 0xa4, 0x69, 0x01, 0x30,
  0x87, 0x9a, 0xfc, 0x14, 0x88, 0x00, 0x86, 0x98, 0x88, 0x48, 0x42, 0xce,
  0x07, 0x82, 0x43, 0x18, 0x86, 0x20, 0xf8, 0x89, 0xa1, 0x48, 0x52, 0x99,
  0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74,
  0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d,
  0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f,
  0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06,
  0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e,
  0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07,
  0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07,
  0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07,
  0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x28, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x80, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xe3, 0x00, 0x01, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x02, 0x02, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x04, 0x04,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x0b,
  0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c,
  0x19, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x79, 0x38, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc8, 0x02, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x32, 0x1e,
  0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04,
  0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x18, 0x0a, 0x98, 0xa7, 0x0c, 0xca,
  0xa3, 0x1c, 0x8a, 0xa0, 0x10, 0xa8, 0x28, 0x89, 0x11, 0x80, 0x42, 0x28,
  0x83, 0x22, 0x28, 0x05, 0x32, 0x67, 0x00, 0xe8, 0x1c, 0xcb, 0xa2, 0x20,
  0xf8, 0xe4, 0x03, 0xf8, 0xe4, 0x03, 0xf8, 0xe4, 0x03, 0xf8, 0xe4, 0x83,
  0x7b, 0xb8, 0x87, 0x7b, 0x00, 0x40, 0x04, 0x84, 0x00, 0xe0, 0x3e, 0xf9,
  0xe0, 0x3e, 0xf9, 0xe0, 0x3e, 0xf9, 0xe0, 0x3e, 0xf9, 0xe0, 0x3e, 0xf9,
  0xe0, 0x3e, 0xf9, 0xe0, 0x3e, 0xf9, 0xe0, 0x3e, 0xf9, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x1a, 0x03,
  0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b,
  0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9,
  0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a,
  0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63,
  0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x62, 0x99, 0x20, 0x10, 0xcc, 0x06,
  0x61, 0x20, 0x26, 0x08, 0x44, 0xb3, 0x41, 0x18, 0x0c, 0x0a, 0x76, 0x73,
  0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0x66, 0xa0, 0x11, 0x98, 0x20, 0x10,
  0xce, 0x06, 0x84, 0x50, 0x16, 0x82, 0x18, 0x18, 0x60, 0x43, 0xd0, 0x6c,
  0x20, 0x00, 0xc0, 0x01, 0x26, 0x08, 0x67, 0xb0, 0x6d, 0x08, 0xa0, 0x09,
  0x82, 0x00, 0x50, 0x0c, 0xac, 0xa6, 0xa6, 0xd6, 0xd2, 0xdc, 0xdc, 0xca,
  0xc8, 0xac, 0xca, 0xe4, 0xe8, 0xca, 0xf0, 0x98, 0xd2, 0xce, 0xd0, 0xe8,
  0xd2, 0xdc, 0xce, 0x8c, 0xde, 0xea, 0xe4, 0x84, 0xde, 0xdc, 0xca, 0xe6,
  0x84, 0xdc, 0xb8, 0x4c, 0x59, 0x7d, 0x41, 0xbd, 0xcd, 0xa5, 0xd1, 0xa5,
  0xbd, 0xb9, 0x4d, 0x10, 0x0a, 0x6a, 0x82, 0x50, 0x54, 0x1b, 0x02, 0x62,
  0x82, 0x50, 0x58, 0x13, 0x04, 0xe2, 0x99, 0x20, 0x10, 0xd0, 0x06, 0x21,
  0xd3, 0x36, 0x2c, 0x04, 0x55, 0x59, 0x97, 0x35, 0x60, 0x84, 0xb5, 0xd1,
  0x70, 0x7a, 0x92, 0x6a, 0x0a, 0x62, 0x9a, 0x20, 0x14, 0xd7, 0x04, 0x81,
  0x88, 0x36, 0x08, 0xd9, 0xb7, 0x61, 0x19, 0xba, 0xca, 0xba, 0xac, 0xc1,
  0x1b, 0x2c, 0x30, 0x98, 0x20, 0x10, 0x12, 0x11, 0xaa, 0x22, 0xac, 0xa1,
  0xa7, 0x27, 0x29, 0xa2, 0x09, 0x42, 0x81, 0x6d, 0x10, 0xb2, 0x6c, 0xc3,
  0x22, 0x06, 0x63, 0x50, 0x59, 0x97, 0x35, 0x90, 0x81, 0x18, 0x58, 0x65,
  0x40, 0x46, 0x88, 0xa9, 0xc8, 0x89, 0x28, 0xc9, 0x89, 0x28, 0x69, 0xa8,
  0x68, 0x6a, 0x82, 0x50, 0x64, 0x1b, 0x96, 0xec, 0x0c, 0xd0, 0xc0, 0xba,
  0xac, 0x01, 0xcb, 0xac, 0x6d, 0x82, 0x40, 0x4c, 0x5c, 0x84, 0x98, 0x8a,
  0x9c, 0x88, 0xae, 0x8a, 0x92, 0x8e, 0x90, 0xa8, 0x36, 0x2c, 0x6a, 0xb0,
  0x06, 0x95, 0x75, 0x59, 0x03, 0xa6, 0x06, 0xd6, 0xb6, 0xa1, 0xe0, 0xc2,
  0xc0, 0x0c, 0xd2, 0x80, 0x0d, 0x58, 0x0c, 0x3d, 0x31, 0x3d, 0x49, 0x6d,
  0x58, 0x08, 0x37, 0xa8, 0xac, 0x8b, 0x0c, 0x06, 0x8c, 0xb0, 0xb6, 0x0d,
  0xc1, 0xb0, 0x61, 0x19, 0xdc, 0xa0, 0xb2, 0xe0, 0x80, 0x0c, 0x06, 0x6c,
  0xb0, 0xb6, 0x0d, 0x8b, 0x18, 0x8c, 0x41, 0x65, 0x5d, 0x64, 0x30, 0x90,
  0x81, 0x18, 0x58, 0x65, 0xb0, 0x61, 0xc9, 0xa8, 0xca, 0xbb, 0xb0, 0x01,
  0xcb, 0xac, 0x6d, 0x03, 0xf1, 0x06, 0x71, 0x20, 0x07, 0x73, 0xb0, 0x61,
  0x68, 0x03, 0x3a, 0x00, 0x36, 0x14, 0xd2, 0x54, 0x07, 0x0f, 0x50, 0x85,
  0x8d, 0xcd, 0xae, 0xcd, 0x25, 0x8d, 0xac, 0xcc, 0x8d, 0x6e, 0x4a, 0x10,
  0x54, 0x21, 0xc3, 0x73, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x9b,
  0x12, 0x10, 0x4d, 0xc8, 0xf0, 0x5c, 0xec, 0xc2, 0xd8, 0xec, 0xca, 0xe4,
  0xa6, 0x04, 0x46, 0x1d, 0x32, 0x3c, 0x97, 0x39, 0xb4, 0x30, 0xb2, 0x32,
  0xb9, 0xa6, 0x37, 0xb2, 0x32, 0xb6, 0x29, 0x01, 0x52, 0x86, 0x0c, 0xcf,
  0x45, 0xae, 0x6c, 0xee, 0xad, 0x4e, 0x6e, 0xac, 0x6c, 0x6e, 0x4a, 0xe0,
  0xd4, 0x21, 0xc3, 0x73, 0xb1, 0x4b, 0x2b, 0xbb, 0x4b, 0x22, 0x9b, 0xa2,
  0x0b, 0xa3, 0x2b, 0x9b, 0x12, 0x40, 0x75, 0xc8, 0xf0, 0x5c, 0xca, 0xdc,
  0xe8, 0xe4, 0xf2, 0xa0, 0xde, 0xd2, 0xdc, 0xe8, 0xe6, 0xa6, 0x04, 0x75,
  0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08,
  0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38,
  0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71,
  0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c,
  0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d,
  0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d,
  0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07,
  0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87,
  0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30,
  0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10,
  0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66,
  0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c,
  0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07,
  0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87,
  0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05,
  0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87,
  0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0,
  0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca,
  0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38,
  0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c,
  0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07,
  0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca, 0xc3,
  0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00,
  0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce,
  0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde,
  0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x2f, 0x00,
  0x00, 0x00, 0x06, 0x20, 0x06, 0x2f, 0xcb, 0x2a, 0x48, 0xd3, 0x10, 0xc3,
  0x4b, 0x44, 0x13, 0x71, 0x95, 0x88, 0x71, 0x4c, 0x48, 0x63, 0x7c, 0x0e,
  0x15, 0x6d, 0x4e, 0x43, 0x48, 0x5b, 0x63, 0x06, 0xd0, 0x70, 0xf9, 0xce,
  0xe3, 0x07, 0x48, 0x03, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x21, 0x6c, 0xc3,
  0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x43,
  0x49, 0x18, 0x80, 0x80, 0xf9, 0xc5, 0x6d, 0x9b, 0x82, 0x34, 0x5c, 0xbe,
  0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10, 0x46,
  0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe, 0xe0, 0x4c, 0xb7, 0x5f, 0xdc, 0xb6,
  0x1d, 0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0x13, 0xee, 0x17, 0xb7,
  0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd,
  0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x26, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe,
  0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x23, 0xb7, 0x6d, 0x03, 0xd5,
  0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x93, 0x13, 0x11, 0x28, 0x35, 0x3d, 0xd4,
  0xe4, 0x17, 0xb7, 0x6d, 0x09, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x44,
  0x34, 0x21, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x5b, 0xc1, 0x33, 0x5c, 0xbe,
  0xf3, 0xf8, 0x54, 0x03, 0x44, 0x98, 0x5f, 0xdc, 0x36, 0x00, 0x61, 0x20,
  0x00, 0x00, 0x61, 0x03, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00,
  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xb4, 0x8d, 0x00, 0x50, 0x51, 0x02,
  0x44, 0x14, 0x5c, 0x71, 0x14, 0x4c, 0x71, 0x95, 0xdd, 0x0c, 0x40, 0x29,
  0x94, 0x4c, 0xb9, 0x15, 0x4d, 0xd9, 0x14, 0x4e, 0xa9, 0x94, 0x4b, 0x19,
  0x95, 0x5c, 0x81, 0x94, 0x48, 0x61, 0x94, 0x49, 0xa1, 0x94, 0x44, 0x51,
  0x14, 0x44, 0x59, 0x14, 0x0b, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8,
  0x37, 0x46, 0x00, 0x82, 0x20, 0x88, 0xff, 0xc2, 0x18, 0x01, 0x08, 0x82,
  0x20, 0x08, 0x06, 0x23, 0x00, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x28,
  0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xc0, 0xcd, 0x01, 0x54,
  0x06, 0x71, 0x10, 0x07, 0x61, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x46, 0x1f, 0xac, 0xc1, 0x1a, 0xc8, 0x41, 0x1a, 0x6c, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xf8, 0x01, 0x1b, 0xb0, 0xc1, 0x1c, 0x88, 0x01,
  0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1f, 0xb4, 0x41, 0x1b,
  0xd0, 0x01, 0x1a, 0x74, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x80,
  0x82, 0x1b, 0xb8, 0x41, 0x1d, 0xa8, 0x81, 0x37, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x08, 0x28, 0xbc, 0xc1, 0x1c, 0xd8, 0x41, 0x1b, 0x7c, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x84, 0x02, 0x1c, 0xd0, 0xc1, 0x1d,
  0x98, 0x01, 0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x22, 0x0a,
  0x71, 0x50, 0x07, 0x78, 0xc0, 0x06, 0x61, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0xc8, 0x28, 0xc8, 0x81, 0x1d, 0xe4, 0x81, 0x1b, 0x88, 0xc1,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa5, 0x30, 0x07, 0x74, 0xa0,
  0x07, 0x71, 0x30, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x98,
  0x02, 0x1d, 0xd4, 0xc1, 0x1e, 0xa8, 0x01, 0x19, 0x8c, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0x71, 0x0a, 0x75, 0xd0, 0x07, 0x7c, 0x30, 0x07, 0x65,
  0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x2a, 0xd8, 0x81, 0x1f,
  0xf4, 0x01, 0x1b, 0x98, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0xa9, 0x70, 0x07, 0x7f, 0xe0, 0x07, 0x72, 0x70, 0x06, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xa8, 0x02, 0x1e, 0xfc, 0xc1, 0x1f, 0xd8, 0x01,
  0x1a, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xb1, 0x0a, 0x79, 0x00,
  0x0a, 0xa0, 0xf0, 0x06, 0x69, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x06, 0x2b, 0xe8, 0x41, 0x28, 0x84, 0x42, 0x1d, 0xa8, 0xc1, 0x88, 0x41,
  0x02, 0x80, 0x20, 0x18, 0x18, 0xad, 0xb0, 0x07, 0xa2, 0x20, 0x0a, 0x77,
  0xb0, 0x06, 0x76, 0x54, 0xf2, 0xb1, 0xc3, 0x92, 0x8f, 0x1d, 0x97, 0x7c,
  0x6c, 0xc8, 0xe0, 0x63, 0x83, 0x06, 0x1f, 0x1b, 0x36, 0xf8, 0xd4, 0x64,
  0x0a, 0x52, 0xc1, 0x1b, 0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c,
  0xaf, 0x50, 0x07, 0x5a, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50, 0x07, 0x1d, 0xc0, 0x88, 0xc1,
  0x01, 0x80, 0x20, 0x18, 0x5c, 0xb5, 0xb0, 0x07, 0x60, 0x10, 0x8c, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31,
  0x54, 0x93, 0x07, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x2e,
  0x84, 0x82, 0x19, 0x04, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3,
  0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x06, 0xa9, 0x81, 0x7c, 0x6c, 0x59,
  0x03, 0xf9, 0x98, 0xc1, 0x06, 0xf2, 0x31, 0xa9, 0x0d, 0xe4, 0x63, 0x8d,
  0x1b, 0xc8, 0xc7, 0x90, 0x37, 0x90, 0x8f, 0x51, 0x70, 0x20, 0x1f, 0x7b,
  0xe2, 0x40, 0x3e, 0xa6, 0xc8, 0x81, 0x7c, 0xcc, 0x9a, 0x03, 0xf9, 0x58,
  0x44, 0x07, 0xf2, 0x31, 0xa6, 0x0e, 0xe4, 0x53, 0x71, 0x50, 0x0e, 0x52,
  0x81, 0x2b, 0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c, 0xee, 0x40,
  0x0b, 0x79, 0x10, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0xc2, 0x68, 0x02, 0x31, 0xd4, 0x31, 0x0b, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x17, 0x3d, 0xe8, 0xc2, 0x1f, 0x04, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0xd5,
  0xe0, 0x02, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0xa5, 0x0f, 0xe0,
  0x50, 0x0a, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0x8c, 0x26, 0x10, 0x83, 0x41, 0xa8, 0x20, 0x1f, 0x5b, 0x52, 0x41,
  0x3e, 0x66, 0xa8, 0x82, 0x7c, 0x4c, 0x5a, 0x05, 0xf9, 0x58, 0xc3, 0x0a,
  0xf2, 0x31, 0xa4, 0x15, 0xe4, 0x63, 0x94, 0x2b, 0xc8, 0xc7, 0x9e, 0x57,
  0x90, 0x8f, 0x29, 0xb0, 0x20, 0x1f, 0xb3, 0x62, 0x41, 0x3e, 0x16, 0xc9,
  0x82, 0x7c, 0x8c, 0x99, 0x05, 0xf9, 0x18, 0xb3, 0x06, 0xf0, 0x31, 0x66,
  0x0d, 0xe0, 0x63, 0xcc, 0x1a, 0xc0, 0xc7, 0x98, 0x35, 0x80, 0x8f, 0x31,
  0x6b, 0x00, 0x1f, 0x63, 0xd6, 0x00, 0x3e, 0xc6, 0xac, 0x01, 0x7c, 0x8c,
  0x59, 0x03, 0xf8, 0x18, 0xb3, 0x06, 0xf0, 0x31, 0x66, 0x0d, 0xe0, 0x63,
  0xcc, 0x1a, 0xc0, 0xc7, 0x98, 0x35, 0x80, 0x4f, 0xed, 0x02, 0x4c, 0x48,
  0x05, 0xf9, 0x00, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0xe5, 0xc4,
  0x3f, 0x90, 0x43, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50, 0x87, 0x3f, 0xc0, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x5c, 0x3f, 0x51, 0x12, 0xea, 0x10, 0x8c, 0x26, 0x04,
  0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x54,
  0x33, 0x12, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x57, 0x59, 0xac,
  0x04, 0x3c, 0x04, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09,
  0x83, 0x30, 0x9a, 0x40, 0x0c, 0x06, 0xc9, 0x83, 0x7c, 0x6c, 0x99, 0x07,
  0xf9, 0x98, 0x41, 0x0f, 0xf2, 0x31, 0xa9, 0x1e, 0xe4, 0x63, 0x8d, 0x3d,
  0xc8, 0xc7, 0x90, 0x7b, 0x90, 0x8f, 0x51, 0xf8, 0x20, 0x1f, 0x7b, 0xf2,
  0x41, 0x3e, 0xa6, 0xe8, 0x83, 0x7c, 0xcc, 0xda, 0x07, 0xf9, 0x58, 0xc4,
  0x0f, 0xf2, 0x31, 0xa6, 0x1f, 0xe4, 0x63, 0x6b, 0xc0, 0xc0, 0xc7, 0xd6,
  0x80, 0x81, 0x8f, 0xad, 0x01, 0x03, 0x1f, 0x5b, 0x03, 0x06, 0x3e, 0xb6,
  0x06, 0x0c, 0x7c, 0x6c, 0x0d, 0x18, 0xf8, 0xd8, 0x1a, 0x30, 0xf0, 0xb1,
  0x35, 0x60, 0xe0, 0x63, 0x6b, 0xc0, 0xc0, 0xc7, 0xd6, 0x80, 0x81, 0x8f,
  0xad, 0x01, 0x03, 0x1f, 0x5b, 0x03, 0x06, 0x3e, 0x55, 0x12, 0x7b, 0x21,
  0x15, 0x90, 0x05, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x45, 0x1a,
  0x6a, 0xf1, 0x12, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x20, 0x8c, 0x26, 0x10, 0x43, 0x1d, 0x69, 0x01, 0x23, 0x06, 0x07,
  0x00, 0x82, 0x60, 0x70, 0xa9, 0x06, 0x5c, 0xd4, 0x44, 0x30, 0x9a, 0x10,
  0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50,
  0x8d, 0x5b, 0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c, 0xb0, 0x61,
  0x17, 0x3b, 0x11, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0xc2, 0x68, 0x02, 0x31, 0x18, 0xc4, 0x13, 0xf2, 0xb1, 0xa5, 0x27,
  0xe4, 0x63, 0x86, 0x4f, 0xc8, 0xc7, 0xa4, 0x9f, 0x90, 0x8f, 0x35, 0x60,
  0x21, 0x1f, 0x43, 0xc2, 0x42, 0x3e, 0x46, 0x89, 0x85, 0x7c, 0xec, 0x19,
  0x0b, 0xf9, 0x98, 0x42, 0x16, 0xf2, 0x31, 0xab, 0x2c, 0xe4, 0x63, 0x91,
  0x59, 0xc8, 0xc7, 0x98, 0xb3, 0x90, 0x8f, 0xad, 0x01, 0x03, 0x1f, 0x5b,
  0x03, 0x06, 0x3e, 0xb6, 0x06, 0x0c, 0x7c, 0x6c, 0x0d, 0x18, 0xf8, 0xd8,
  0x1a, 0x30, 0xf0, 0xb1, 0x35, 0x60, 0xe0, 0x63, 0x6b, 0xc0, 0xc0, 0xc7,
  0xd6, 0x80, 0x81, 0x8f, 0xad, 0x01, 0x03, 0x1f, 0x5b, 0x03, 0x06, 0x3e,
  0xb6, 0x06, 0x0c, 0x7c, 0x6c, 0x0d, 0x18, 0xf8, 0x18, 0xa3, 0x16, 0xf2,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xac, 0x3d, 0x6a, 0x43, 0x2d,
  0x94, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x32, 0xf7, 0xb0, 0x0d,
  0xb5, 0x40, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xde, 0xe3,
  0x36, 0xd4, 0xc2, 0x08, 0xec, 0x71, 0x0b, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0x16, 0x1f, 0xb9, 0xe1, 0x16, 0x4d, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x99, 0x7c, 0xe8, 0x86, 0x5b, 0x2c, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xf3, 0xb1, 0x1b, 0x6e, 0x91, 0x04,
  0x26, 0xc9, 0x85, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xab,
  0x8f, 0xde, 0x90, 0x0b, 0x28, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0xcc, 0x3e, 0x7c, 0x43, 0x2e, 0x9c, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xb2, 0xfb, 0xf8, 0x0d, 0xb9, 0x60, 0x02, 0xc3, 0xde, 0x42, 0x3e,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xe5, 0x47, 0x78, 0xbc, 0x85,
  0x15, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xa6, 0x1f, 0xe2, 0xf1,
  0x16, 0x54, 0x60, 0x9a, 0x5c, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0x32, 0xfe, 0x20, 0x0f, 0xb9, 0xc0, 0x82, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xc8, 0xfa, 0xa3, 0x3c, 0xe4, 0xc2, 0x0a, 0x8c, 0xab, 0x0b,
  0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xf6, 0x1f, 0xe7, 0x51,
  0x17, 0x5a, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x19, 0x88, 0xa0,
  0x47, 0x5d, 0x60, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c, 0x22,
  0x82, 0x1e, 0xad, 0xa1, 0x1f, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0x70, 0x9d, 0x48, 0x7b, 0xc8, 0x46, 0x78, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x8c, 0x18,
  0x1c, 0x00, 0x08, 0x82, 0xc1, 0xc5, 0x22, 0xf2, 0x71, 0x1b, 0xe5, 0x31,
  0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09,
  0xc4, 0x60, 0x4e, 0x18, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0xb2, 0x18, 0xc9, 0x0f, 0xcf, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0x20, 0x93, 0x11, 0xfd, 0xd8, 0x9c, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xb2, 0x19, 0xd9, 0x0f, 0xd7, 0x70, 0x02, 0x6b, 0xca, 0x40, 0x3e,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xd5, 0x48, 0x7f, 0x88, 0x41,
  0x13, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x66, 0x23, 0xfe, 0xf1,
  0x35, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x37, 0xf2, 0x1f,
  0xb2, 0xd1, 0x04, 0xc6, 0xa4, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0x20, 0xcb, 0x91, 0x10, 0x31, 0x03, 0x26, 0x18, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x4c, 0x47, 0x44, 0x64, 0x0c, 0x98, 0x60, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0xb2, 0x1d, 0x19, 0x11, 0xdb, 0x60, 0x82, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0x7a, 0x64, 0x44, 0xd0, 0xa3, 0x3e,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x86,
  0x26, 0x3e, 0x36, 0x28, 0xf1, 0xb1, 0xe1, 0x88, 0xcf, 0x88, 0xc1, 0x02,
  0x80, 0x20, 0x18, 0x30, 0x68, 0x62, 0x22, 0x83, 0x10, 0x0c, 0x42, 0x30,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x0e, 0x9a, 0xa0, 0x48, 0x60, 0x45,
  0x20, 0x1f, 0x2b, 0x04, 0xf9, 0x58, 0x31, 0xc8, 0x67, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0xae, 0x34, 0x79, 0x11, 0xfa, 0x00, 0x91, 0xd1, 0x84,
  0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x83, 0xab, 0x4d, 0x66, 0x04, 0x3f, 0x46, 0x64, 0x34, 0x21,
  0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xe0, 0x8a, 0x93, 0x1b, 0xe1, 0x8f, 0x17, 0x19, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x5b, 0xf4, 0x40, 0x3e,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xd5, 0x49, 0x8f, 0xe0, 0xc1,
  0x12, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x66, 0x27, 0x3e, 0x62,
  0x07, 0x4b, 0x60, 0x4a, 0x1f, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0x32, 0x3c, 0x01, 0x93, 0x3d, 0x50, 0x82, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xc8, 0xf2, 0x24, 0x4c, 0xf2, 0x40, 0x09, 0x2c, 0x01, 0x05,
  0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xb6, 0x27, 0x63, 0xe2,
  0x07, 0x49, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x19, 0x9f, 0x90,
  0x09, 0x1f, 0x24, 0xc1, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x30, 0xa2,
  0x02, 0x26, 0x07, 0x11, 0x1c, 0x44, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x8e, 0xa8, 0x88, 0x49, 0x60, 0x41, 0x22, 0x1f, 0x13, 0x0e, 0xf9,
  0xd8, 0x50, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae, 0x51,
  0x49, 0x13, 0x17, 0xe1, 0x93, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82,
  0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xeb, 0x54,
  0xda, 0x44, 0x46, 0x44, 0x65, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60,
  0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xe0, 0x5a, 0x95,
  0x38, 0xb1, 0x11, 0x30, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x04, 0x4b, 0x83, 0x25, 0x3e, 0x96, 0x06, 0x4b, 0x7c, 0x2c,
  0x0d, 0x96, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x01, 0x63, 0x2b,
  0x74, 0x32, 0x08, 0xc1, 0x20, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0xe0, 0xd8, 0x8a, 0x9d, 0x04, 0x16, 0x10, 0xf2, 0x31, 0x81, 0x90, 0xcf,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c, 0xb6, 0xc2, 0x27, 0x61, 0xb2,
  0x2a, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x97, 0xae, 0x80, 0x4a, 0x99, 0xc4,
  0xca, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0xe5, 0x2b, 0xa4, 0x92, 0x26, 0x72,
  0x32, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xc6,
  0x07, 0x4b, 0x7c, 0x8c, 0x0f, 0x96, 0xf8, 0x18, 0x1f, 0x2c, 0xf1, 0x19,
  0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0x26, 0x5d, 0x4e, 0x65, 0x10, 0x82,
  0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0x49, 0x97, 0x54,
  0x09, 0x2c, 0x20, 0xe4, 0x63, 0x02, 0x21, 0x9f, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xb8, 0xd2, 0xe5, 0x55, 0xe8, 0xa4, 0x55, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0xae, 0x76, 0x99, 0x15, 0x3c, 0x01, 0x95, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x83, 0x2b, 0x5e, 0x6e, 0x85, 0x4f, 0x46, 0x65, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0xec, 0x15, 0x96, 0xf8, 0xd8,
  0x2b, 0x2c, 0xf1, 0xb1, 0x57, 0x58, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20,
  0x08, 0x06, 0x0c, 0xbf, 0xe8, 0xca, 0x20, 0x04, 0x83, 0x10, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0x81, 0xc3, 0x2f, 0xbc, 0x12, 0x58, 0x40, 0xc8,
  0xc7, 0x04, 0x42, 0x3e, 0x86, 0x2a, 0x77, 0x10, 0x1f, 0x4b, 0x95, 0x3b,
  0x88, 0x8f, 0xa9, 0x8a, 0x19, 0xc4, 0xc7, 0x56, 0xc5, 0x0c, 0xe2, 0x63,
  0xac, 0x52, 0xc5, 0xc7, 0x5a, 0xa5, 0x8a, 0x8f, 0x89, 0x82, 0x1f, 0xc8,
  0xc7, 0x5e, 0x25, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64,
  0x23, 0xb3, 0x2e, 0xc8, 0x28, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x90, 0x91, 0x0c, 0xbb, 0x20, 0xa3, 0x10, 0x98, 0x29, 0xbc, 0x81, 0x7c,
  0x6c, 0x56, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x76,
  0x32, 0xef, 0xa2, 0x9c, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0x19, 0xca, 0xc0, 0x8b, 0x72, 0x0a, 0x81, 0xa9, 0x02, 0x18, 0xc8, 0xc7,
  0x6e, 0x25, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x2b,
  0x33, 0x2f, 0xcc, 0x2a, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90,
  0xb1, 0x0c, 0xbd, 0x30, 0xab, 0x10, 0xd8, 0x1f, 0xb8, 0x82, 0x7c, 0x2c,
  0xe0, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xf6, 0x32,
  0xf7, 0xc2, 0x07, 0xaf, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41,
  0x06, 0x33, 0xf8, 0xc2, 0x07, 0xaf, 0x10, 0x18, 0x1c, 0xc8, 0x82, 0x7c,
  0x2c, 0x68, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x36,
  0x33, 0xfb, 0xd2, 0x06, 0xb3, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x41, 0x46, 0x33, 0xfc, 0xd2, 0x06, 0xb3, 0x10, 0x58, 0x18, 0xd8, 0x82,
  0x7c, 0x2c, 0xf0, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd9,
  0xcd, 0xfc, 0x8b, 0x77, 0x0b, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x64, 0x38, 0x03, 0x32, 0xde, 0x2d, 0x04, 0xc3, 0x11, 0xd5, 0xb9, 0x10,
  0xdf, 0x70, 0x84, 0x84, 0x2e, 0xc4, 0x37, 0x1c, 0xf1, 0xa4, 0x0b, 0xf1,
  0x4d, 0x37, 0xa8, 0x4b, 0xbb, 0x0c, 0xd3, 0x0d, 0xeb, 0xe2, 0x2e, 0xc3,
  0x74, 0x03, 0xbb, 0xbc, 0xcb, 0x60, 0xc3, 0x26, 0x1f, 0x1b, 0x30, 0xf9,
  0xd8, 0x50, 0xc9, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae, 0xb1,
  0x49, 0x19, 0x77, 0xc9, 0x99, 0xd1, 0x84, 0x60, 0x18, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x03, 0xe8, 0x6c, 0x42, 0x86, 0x92, 0x97, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0x80, 0xd0, 0x46, 0x64, 0xa2, 0x79, 0x19, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x03, 0x28, 0x6d, 0x46, 0xc6, 0xa1, 0x17, 0x1b, 0x16,
  0xf9, 0xd8, 0xb0, 0xc8, 0xc7, 0x86, 0x45, 0x3e, 0x23, 0x06, 0x06, 0x00,
  0x82, 0x60, 0xe0, 0xb8, 0x0d, 0xca, 0x0c, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0xe0, 0xbc, 0x4d, 0xca, 0x0c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0xe0, 0xc0, 0x8d, 0xca, 0x0c, 0x36, 0x28, 0xf2, 0xb1, 0x61, 0x91, 0x8f,
  0x0d, 0x8c, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0xa1, 0x9b,
  0x97, 0x19, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0xa9, 0x1b, 0x98,
  0x19, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0xb1, 0x9b, 0x98, 0x19,
  0x6c, 0x78, 0x03, 0xf9, 0xd8, 0xc0, 0x06, 0xf2, 0xb1, 0x21, 0x0d, 0xe4,
  0x63, 0xd7, 0x3b, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2,
  0xbb, 0xf9, 0x99, 0xab, 0x17, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xc8, 0xf0, 0x06, 0x6c, 0xae, 0x55, 0x08, 0x4c, 0x8b, 0x07, 0xf9, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xa6, 0x37, 0x62, 0xa3, 0xfd, 0x42,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd9, 0xde, 0x8c, 0x8d, 0xd6,
  0x0a, 0x81, 0x75, 0xf3, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xc8, 0xfa, 0xa6, 0x6c, 0xba, 0x70, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0x20, 0xf3, 0x1b, 0xb3, 0xe9, 0x5e, 0x21, 0x18, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x83, 0x0b, 0x74, 0xcc, 0x66, 0x65, 0xf8, 0x66, 0x34, 0x21,
  0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6c, 0x58, 0xe4, 0x63,
  0x43, 0x22, 0x1f, 0x1b, 0x0e, 0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0xc1, 0x75, 0x3a, 0x6d, 0x23, 0x33, 0xa4, 0x33, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x76, 0x0c, 0xf0, 0xb1, 0x63, 0x80,
  0x8f, 0x1d, 0x03, 0x7c, 0x4c, 0x13, 0x09, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0xe6, 0x3a, 0x76, 0xa3, 0xc1, 0x43, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xd9, 0xeb, 0xdc, 0x8d, 0xe6, 0x0b, 0x81, 0x75,
  0x24, 0x21, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0x62, 0x27,
  0x6f, 0x3a, 0x79, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0x93,
  0x1d, 0xbd, 0xe9, 0xc0, 0x21, 0x30, 0x30, 0x30, 0x09, 0xf9, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x41, 0x46, 0x3b, 0x7c, 0x03, 0x06, 0xf4, 0x10,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x56, 0x3b, 0x7d, 0x03, 0x06,
  0xe2, 0x10, 0x8c, 0x26, 0xd0, 0x01, 0x30, 0x9a, 0x50, 0x07, 0xc1, 0x68,
  0x82, 0x1d, 0x08, 0x36, 0x28, 0xf2, 0xb1, 0x01, 0x91, 0x8f, 0x0d, 0x86,
  0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xe0, 0xea, 0x9d, 0xd1, 0x41,
  0x1b, 0xb7, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18,
  0x84, 0xd1, 0x04, 0x62, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x4b,
  0x7c, 0x50, 0xa7, 0x6d, 0xfe, 0x66, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0xae, 0xf3, 0x69, 0x1d, 0xb9, 0x79, 0x9d, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0xd8, 0x47, 0x76, 0xee, 0xe6, 0x75,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34,
  0x81, 0x18, 0x6c, 0x0a, 0x11, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x41, 0x16, 0x3f, 0xb9, 0xe3, 0x1f, 0x53, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0x99, 0xfc, 0xe8, 0xce, 0x7e, 0x4c, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x64, 0xf3, 0xb3, 0x3b, 0x6e, 0x33, 0x05, 0x26, 0x95,
  0x88, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xab, 0x9f, 0xde,
  0x11, 0x11, 0x29, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xcc, 0x7e,
  0x7c, 0xe7, 0x3f, 0xa4, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2,
  0xfb, 0xf9, 0x1d, 0xb9, 0x91, 0x02, 0x8b, 0x52, 0x44, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x90, 0xe5, 0x4f, 0xf8, 0x98, 0x48, 0x14, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xa6, 0x3f, 0xe2, 0x33, 0x22, 0x51,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd9, 0xfe, 0x8c, 0x8f, 0xdd,
  0x44, 0x81, 0x41, 0x2d, 0x22, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xc8, 0xfa, 0xa7, 0x7c, 0x54, 0x04, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0x20, 0xf3, 0x1f, 0xf3, 0x39, 0x11, 0x28, 0x18, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0xec, 0x7f, 0xce, 0x47, 0x6f, 0xa0, 0x60, 0x34, 0x21,
  0x14, 0x86, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0x44, 0x08, 0x7d,
  0x5a, 0x67, 0x7d, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13,
  0x06, 0x61, 0x34, 0x81, 0x18, 0x46, 0x0c, 0x1a, 0x00, 0x04, 0xc1, 0x40,
  0x42, 0xa1, 0xf8, 0xb9, 0x91, 0x19, 0x79, 0x91, 0xd0, 0x21, 0x06, 0x21,
  0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x67, 0x85, 0xfe, 0x27, 0x18,
  0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xc5, 0x85, 0xda, 0x47, 0x84, 0x4a,
  0x88, 0x7f, 0xaa, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0x5c, 0xa8,
  0x7d, 0x44, 0xa8, 0x84, 0xe8, 0x27, 0x1a, 0x31, 0x48, 0x00, 0x10, 0x04,
  0x03, 0xc5, 0x85, 0xda, 0x47, 0x84, 0x4a, 0x28, 0x7f, 0x9a, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x50, 0x5c, 0xa8, 0x7d, 0x44, 0xa8, 0x84, 0xf4,
  0x27, 0x19, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xc5, 0x85, 0xda, 0xa7,
  0x84, 0x4a, 0x88, 0x7f, 0xfc, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c,
  0x14, 0x17, 0x6a, 0x9f, 0x12, 0x2a, 0x21, 0xfa, 0xe9, 0x83, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x50, 0x5c, 0xa8, 0x7d, 0x4a, 0xa8, 0x84, 0xf2,
  0x87, 0x0f, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x71, 0xa1, 0xf6,
  0x29, 0xa1, 0x12, 0xd2, 0x1f, 0x64, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c,
  0x14, 0x17, 0x6a, 0x1f, 0x13, 0x2a, 0x21, 0xfe, 0x79, 0x83, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x50, 0x5c, 0xa8, 0x7d, 0x4c, 0xa8, 0x84, 0xe8,
  0xc7, 0x0d, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x71, 0xa1, 0xf6,
  0x31, 0xa1, 0x12, 0xca, 0x9f, 0x36, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04,
  0x03, 0xc5, 0x85, 0xda, 0xc7, 0x84, 0x4a, 0x48, 0x7f, 0x82, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x50, 0x5c, 0xa8, 0x7d, 0xfe, 0xa7, 0x84, 0xf8,
  0x67, 0x75, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x71, 0xa1, 0xf6,
  0xf9, 0x9f, 0x12, 0xa2, 0x1f, 0xd5, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00
};
