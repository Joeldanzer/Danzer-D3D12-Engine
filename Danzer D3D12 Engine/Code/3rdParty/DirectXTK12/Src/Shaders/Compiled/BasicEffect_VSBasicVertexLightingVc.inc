#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; COLOR                    0   xyzw        2     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; SV_Position              0   xyzw        2      POS   float   xyzw
;
; shader debug name: Compiled\BasicEffect_VSBasicVertexLightingVc.pdb
; shader hash: 2523f8f6dadaca4a7cde5fc06ad3d404
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; COLOR                    0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 12, outputs: 12
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 8 }
;   output 1 depends on inputs: { 4, 5, 6, 9 }
;   output 2 depends on inputs: { 4, 5, 6, 10 }
;   output 3 depends on inputs: { 11 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 0, 1, 2, 3 }
;   output 9 depends on inputs: { 0, 1, 2, 3 }
;   output 10 depends on inputs: { 0, 1, 2, 3 }
;   output 11 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSBasicVertexLightingVc() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %14 = extractvalue %dx.types.CBufRet.f32 %13, 0
  %15 = extractvalue %dx.types.CBufRet.f32 %13, 1
  %16 = extractvalue %dx.types.CBufRet.f32 %13, 2
  %17 = extractvalue %dx.types.CBufRet.f32 %13, 3
  %18 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %19 = extractvalue %dx.types.CBufRet.f32 %18, 0
  %20 = extractvalue %dx.types.CBufRet.f32 %18, 1
  %21 = extractvalue %dx.types.CBufRet.f32 %18, 2
  %22 = extractvalue %dx.types.CBufRet.f32 %18, 3
  %23 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %24 = extractvalue %dx.types.CBufRet.f32 %23, 0
  %25 = extractvalue %dx.types.CBufRet.f32 %23, 1
  %26 = extractvalue %dx.types.CBufRet.f32 %23, 2
  %27 = extractvalue %dx.types.CBufRet.f32 %23, 3
  %28 = fmul fast float %14, %9
  %29 = call float @dx.op.tertiary.f32(i32 46, float %10, float %15, float %28)  ; FMad(a,b,c)
  %30 = call float @dx.op.tertiary.f32(i32 46, float %11, float %16, float %29)  ; FMad(a,b,c)
  %31 = call float @dx.op.tertiary.f32(i32 46, float %12, float %17, float %30)  ; FMad(a,b,c)
  %32 = fmul fast float %19, %9
  %33 = call float @dx.op.tertiary.f32(i32 46, float %10, float %20, float %32)  ; FMad(a,b,c)
  %34 = call float @dx.op.tertiary.f32(i32 46, float %11, float %21, float %33)  ; FMad(a,b,c)
  %35 = call float @dx.op.tertiary.f32(i32 46, float %12, float %22, float %34)  ; FMad(a,b,c)
  %36 = fmul fast float %24, %9
  %37 = call float @dx.op.tertiary.f32(i32 46, float %10, float %25, float %36)  ; FMad(a,b,c)
  %38 = call float @dx.op.tertiary.f32(i32 46, float %11, float %26, float %37)  ; FMad(a,b,c)
  %39 = call float @dx.op.tertiary.f32(i32 46, float %12, float %27, float %38)  ; FMad(a,b,c)
  %40 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %41 = extractvalue %dx.types.CBufRet.f32 %40, 0
  %42 = extractvalue %dx.types.CBufRet.f32 %40, 1
  %43 = extractvalue %dx.types.CBufRet.f32 %40, 2
  %44 = fsub fast float %41, %31
  %45 = fsub fast float %42, %35
  %46 = fsub fast float %43, %39
  %47 = call float @dx.op.dot3.f32(i32 55, float %44, float %45, float %46, float %44, float %45, float %46)  ; Dot3(ax,ay,az,bx,by,bz)
  %48 = call float @dx.op.unary.f32(i32 25, float %47)  ; Rsqrt(value)
  %49 = fmul fast float %44, %48
  %50 = fmul fast float %45, %48
  %51 = fmul fast float %46, %48
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = fmul fast float %53, %6
  %65 = call float @dx.op.tertiary.f32(i32 46, float %7, float %54, float %64)  ; FMad(a,b,c)
  %66 = call float @dx.op.tertiary.f32(i32 46, float %8, float %55, float %65)  ; FMad(a,b,c)
  %67 = fmul fast float %57, %6
  %68 = call float @dx.op.tertiary.f32(i32 46, float %7, float %58, float %67)  ; FMad(a,b,c)
  %69 = call float @dx.op.tertiary.f32(i32 46, float %8, float %59, float %68)  ; FMad(a,b,c)
  %70 = fmul fast float %61, %6
  %71 = call float @dx.op.tertiary.f32(i32 46, float %7, float %62, float %70)  ; FMad(a,b,c)
  %72 = call float @dx.op.tertiary.f32(i32 46, float %8, float %63, float %71)  ; FMad(a,b,c)
  %73 = call float @dx.op.dot3.f32(i32 55, float %66, float %69, float %72, float %66, float %69, float %72)  ; Dot3(ax,ay,az,bx,by,bz)
  %74 = call float @dx.op.unary.f32(i32 25, float %73)  ; Rsqrt(value)
  %75 = fmul fast float %74, %66
  %76 = fmul fast float %74, %69
  %77 = fmul fast float %74, %72
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %78, 1
  %81 = extractvalue %dx.types.CBufRet.f32 %78, 2
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %90 = fsub fast float %49, %79
  %91 = fsub fast float %50, %80
  %92 = fsub fast float %51, %81
  %93 = call float @dx.op.dot3.f32(i32 55, float %90, float %91, float %92, float %90, float %91, float %92)  ; Dot3(ax,ay,az,bx,by,bz)
  %94 = call float @dx.op.unary.f32(i32 25, float %93)  ; Rsqrt(value)
  %95 = fmul fast float %94, %91
  %96 = fmul fast float %94, %92
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %109 = fsub fast float %49, %98
  %110 = fsub fast float %50, %99
  %111 = fsub fast float %51, %100
  %112 = call float @dx.op.dot3.f32(i32 55, float %109, float %110, float %111, float %109, float %110, float %111)  ; Dot3(ax,ay,az,bx,by,bz)
  %113 = call float @dx.op.unary.f32(i32 25, float %112)  ; Rsqrt(value)
  %114 = fmul fast float %113, %110
  %115 = fmul fast float %113, %111
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 0
  %122 = extractvalue %dx.types.CBufRet.f32 %120, 1
  %123 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 0
  %126 = extractvalue %dx.types.CBufRet.f32 %124, 1
  %127 = extractvalue %dx.types.CBufRet.f32 %124, 2
  %128 = fsub fast float %49, %117
  %129 = fsub fast float %50, %118
  %130 = fsub fast float %51, %119
  %131 = call float @dx.op.dot3.f32(i32 55, float %128, float %129, float %130, float %128, float %129, float %130)  ; Dot3(ax,ay,az,bx,by,bz)
  %132 = call float @dx.op.unary.f32(i32 25, float %131)  ; Rsqrt(value)
  %133 = fmul fast float %132, %129
  %134 = fmul fast float %132, %130
  %135 = fsub fast float -0.000000e+00, %80
  %136 = fsub fast float -0.000000e+00, %81
  %137 = fsub fast float -0.000000e+00, %99
  %138 = fsub fast float -0.000000e+00, %100
  %139 = fsub fast float -0.000000e+00, %118
  %140 = fsub fast float -0.000000e+00, %119
  %141 = fmul fast float %75, %79
  %142 = fsub fast float -0.000000e+00, %141
  %143 = call float @dx.op.tertiary.f32(i32 46, float %135, float %76, float %142)  ; FMad(a,b,c)
  %144 = call float @dx.op.tertiary.f32(i32 46, float %136, float %77, float %143)  ; FMad(a,b,c)
  %145 = fmul fast float %75, %98
  %146 = fsub fast float -0.000000e+00, %145
  %147 = call float @dx.op.tertiary.f32(i32 46, float %137, float %76, float %146)  ; FMad(a,b,c)
  %148 = call float @dx.op.tertiary.f32(i32 46, float %138, float %77, float %147)  ; FMad(a,b,c)
  %149 = fmul fast float %75, %117
  %150 = fsub fast float -0.000000e+00, %149
  %151 = call float @dx.op.tertiary.f32(i32 46, float %139, float %76, float %150)  ; FMad(a,b,c)
  %152 = call float @dx.op.tertiary.f32(i32 46, float %140, float %77, float %151)  ; FMad(a,b,c)
  %153 = fmul fast float %90, %75
  %154 = fmul fast float %153, %94
  %155 = call float @dx.op.tertiary.f32(i32 46, float %95, float %76, float %154)  ; FMad(a,b,c)
  %156 = call float @dx.op.tertiary.f32(i32 46, float %96, float %77, float %155)  ; FMad(a,b,c)
  %157 = fmul fast float %109, %75
  %158 = fmul fast float %157, %113
  %159 = call float @dx.op.tertiary.f32(i32 46, float %114, float %76, float %158)  ; FMad(a,b,c)
  %160 = call float @dx.op.tertiary.f32(i32 46, float %115, float %77, float %159)  ; FMad(a,b,c)
  %161 = fmul fast float %128, %75
  %162 = fmul fast float %161, %132
  %163 = call float @dx.op.tertiary.f32(i32 46, float %133, float %76, float %162)  ; FMad(a,b,c)
  %164 = call float @dx.op.tertiary.f32(i32 46, float %134, float %77, float %163)  ; FMad(a,b,c)
  %165 = fcmp fast olt float %144, 0.000000e+00
  %166 = fcmp fast olt float %148, 0.000000e+00
  %167 = fcmp fast olt float %152, 0.000000e+00
  %168 = select i1 %165, float 0.000000e+00, float 1.000000e+00
  %169 = select i1 %166, float 0.000000e+00, float 1.000000e+00
  %170 = select i1 %167, float 0.000000e+00, float 1.000000e+00
  %171 = fmul fast float %168, %144
  %172 = fmul fast float %169, %148
  %173 = fmul fast float %170, %152
  %174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %175 = extractvalue %dx.types.CBufRet.f32 %174, 3
  %176 = call float @dx.op.binary.f32(i32 35, float %156, float 0.000000e+00)  ; FMax(a,b)
  %177 = call float @dx.op.binary.f32(i32 35, float %160, float 0.000000e+00)  ; FMax(a,b)
  %178 = call float @dx.op.binary.f32(i32 35, float %164, float 0.000000e+00)  ; FMax(a,b)
  %179 = fmul fast float %176, %168
  %180 = fmul fast float %177, %169
  %181 = fmul fast float %178, %170
  %182 = call float @dx.op.unary.f32(i32 23, float %179)  ; Log(value)
  %183 = call float @dx.op.unary.f32(i32 23, float %180)  ; Log(value)
  %184 = call float @dx.op.unary.f32(i32 23, float %181)  ; Log(value)
  %185 = fmul fast float %182, %175
  %186 = fmul fast float %183, %175
  %187 = fmul fast float %184, %175
  %188 = call float @dx.op.unary.f32(i32 21, float %185)  ; Exp(value)
  %189 = call float @dx.op.unary.f32(i32 21, float %186)  ; Exp(value)
  %190 = call float @dx.op.unary.f32(i32 21, float %187)  ; Exp(value)
  %191 = fmul fast float %188, %144
  %192 = fmul fast float %189, %148
  %193 = fmul fast float %190, %152
  %194 = fmul fast float %171, %83
  %195 = call float @dx.op.tertiary.f32(i32 46, float %172, float %102, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %173, float %121, float %195)  ; FMad(a,b,c)
  %197 = fmul fast float %171, %84
  %198 = call float @dx.op.tertiary.f32(i32 46, float %172, float %103, float %197)  ; FMad(a,b,c)
  %199 = call float @dx.op.tertiary.f32(i32 46, float %173, float %122, float %198)  ; FMad(a,b,c)
  %200 = fmul fast float %171, %85
  %201 = call float @dx.op.tertiary.f32(i32 46, float %172, float %104, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %173, float %123, float %201)  ; FMad(a,b,c)
  %203 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.f32 %203, 0
  %205 = extractvalue %dx.types.CBufRet.f32 %203, 1
  %206 = extractvalue %dx.types.CBufRet.f32 %203, 2
  %207 = fmul fast float %204, %196
  %208 = fmul fast float %205, %199
  %209 = fmul fast float %206, %202
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %212 = extractvalue %dx.types.CBufRet.f32 %210, 1
  %213 = extractvalue %dx.types.CBufRet.f32 %210, 2
  %214 = fadd fast float %207, %211
  %215 = fadd fast float %208, %212
  %216 = fadd fast float %209, %213
  %217 = fmul fast float %191, %87
  %218 = call float @dx.op.tertiary.f32(i32 46, float %192, float %106, float %217)  ; FMad(a,b,c)
  %219 = call float @dx.op.tertiary.f32(i32 46, float %193, float %125, float %218)  ; FMad(a,b,c)
  %220 = fmul fast float %191, %88
  %221 = call float @dx.op.tertiary.f32(i32 46, float %192, float %107, float %220)  ; FMad(a,b,c)
  %222 = call float @dx.op.tertiary.f32(i32 46, float %193, float %126, float %221)  ; FMad(a,b,c)
  %223 = fmul fast float %191, %89
  %224 = call float @dx.op.tertiary.f32(i32 46, float %192, float %108, float %223)  ; FMad(a,b,c)
  %225 = call float @dx.op.tertiary.f32(i32 46, float %193, float %127, float %224)  ; FMad(a,b,c)
  %226 = extractvalue %dx.types.CBufRet.f32 %174, 0
  %227 = extractvalue %dx.types.CBufRet.f32 %174, 1
  %228 = extractvalue %dx.types.CBufRet.f32 %174, 2
  %229 = fmul fast float %226, %219
  %230 = fmul fast float %227, %222
  %231 = fmul fast float %228, %225
  %232 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %233 = extractvalue %dx.types.CBufRet.f32 %232, 0
  %234 = extractvalue %dx.types.CBufRet.f32 %232, 1
  %235 = extractvalue %dx.types.CBufRet.f32 %232, 2
  %236 = extractvalue %dx.types.CBufRet.f32 %232, 3
  %237 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %238 = extractvalue %dx.types.CBufRet.f32 %237, 0
  %239 = extractvalue %dx.types.CBufRet.f32 %237, 1
  %240 = extractvalue %dx.types.CBufRet.f32 %237, 2
  %241 = extractvalue %dx.types.CBufRet.f32 %237, 3
  %242 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %243 = extractvalue %dx.types.CBufRet.f32 %242, 0
  %244 = extractvalue %dx.types.CBufRet.f32 %242, 1
  %245 = extractvalue %dx.types.CBufRet.f32 %242, 2
  %246 = extractvalue %dx.types.CBufRet.f32 %242, 3
  %247 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %248 = extractvalue %dx.types.CBufRet.f32 %247, 0
  %249 = extractvalue %dx.types.CBufRet.f32 %247, 1
  %250 = extractvalue %dx.types.CBufRet.f32 %247, 2
  %251 = extractvalue %dx.types.CBufRet.f32 %247, 3
  %252 = fmul fast float %233, %9
  %253 = call float @dx.op.tertiary.f32(i32 46, float %10, float %234, float %252)  ; FMad(a,b,c)
  %254 = call float @dx.op.tertiary.f32(i32 46, float %11, float %235, float %253)  ; FMad(a,b,c)
  %255 = call float @dx.op.tertiary.f32(i32 46, float %12, float %236, float %254)  ; FMad(a,b,c)
  %256 = fmul fast float %238, %9
  %257 = call float @dx.op.tertiary.f32(i32 46, float %10, float %239, float %256)  ; FMad(a,b,c)
  %258 = call float @dx.op.tertiary.f32(i32 46, float %11, float %240, float %257)  ; FMad(a,b,c)
  %259 = call float @dx.op.tertiary.f32(i32 46, float %12, float %241, float %258)  ; FMad(a,b,c)
  %260 = fmul fast float %243, %9
  %261 = call float @dx.op.tertiary.f32(i32 46, float %10, float %244, float %260)  ; FMad(a,b,c)
  %262 = call float @dx.op.tertiary.f32(i32 46, float %11, float %245, float %261)  ; FMad(a,b,c)
  %263 = call float @dx.op.tertiary.f32(i32 46, float %12, float %246, float %262)  ; FMad(a,b,c)
  %264 = fmul fast float %248, %9
  %265 = call float @dx.op.tertiary.f32(i32 46, float %10, float %249, float %264)  ; FMad(a,b,c)
  %266 = call float @dx.op.tertiary.f32(i32 46, float %11, float %250, float %265)  ; FMad(a,b,c)
  %267 = call float @dx.op.tertiary.f32(i32 46, float %12, float %251, float %266)  ; FMad(a,b,c)
  %268 = extractvalue %dx.types.CBufRet.f32 %203, 3
  %269 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %270 = extractvalue %dx.types.CBufRet.f32 %269, 0
  %271 = extractvalue %dx.types.CBufRet.f32 %269, 1
  %272 = extractvalue %dx.types.CBufRet.f32 %269, 2
  %273 = extractvalue %dx.types.CBufRet.f32 %269, 3
  %274 = call float @dx.op.dot4.f32(i32 56, float %9, float %10, float %11, float %12, float %270, float %271, float %272, float %273)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %275 = call float @dx.op.unary.f32(i32 7, float %274)  ; Saturate(value)
  %276 = fmul fast float %214, %2
  %277 = fmul fast float %215, %3
  %278 = fmul fast float %216, %4
  %279 = fmul fast float %268, %5
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %276)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %277)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %278)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %279)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %229)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %230)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %231)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %275)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %255)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %259)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %263)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %267)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!7 = !{[14 x i32] [i32 12, i32 12, i32 4080, i32 4080, i32 4080, i32 4080, i32 119, i32 119, i32 119, i32 0, i32 1, i32 2, i32 4, i32 8]}
!8 = !{void ()* @VSBasicVertexLightingVc, !"VSBasicVertexLightingVc", !9, !4, null}
!9 = !{!10, !17, null}
!10 = !{!11, !14, !16}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"COLOR", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 2, i8 0, !13}
!17 = !{!18, !19, !21}
!18 = !{i32 0, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 0, i8 0, !13}
!19 = !{i32 1, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!20 = !{i32 1}
!21 = !{i32 2, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 2, i8 0, !13}

#endif

const unsigned char BasicEffect_VSBasicVertexLightingVc[] = {
  0x44, 0x58, 0x42, 0x43, 0x14, 0x88, 0xb2, 0x9e, 0x20, 0x9a, 0x34, 0x31,
  0x38, 0xb6, 0x14, 0xe7, 0x50, 0x09, 0x99, 0xae, 0x01, 0x00, 0x00, 0x00,
  0xc9, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xd9, 0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00,
  0x89, 0x02, 0x00, 0x00, 0xc1, 0x02, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00,
  0x1d, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x81, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
  0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x4f, 0x53, 0x47, 0x31, 0x80, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69,
  0x74, 0x69, 0x6f, 0x6e, 0x00, 0x50, 0x53, 0x56, 0x30, 0x20, 0x01, 0x00,
  0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73,
  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
  0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x44, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44,
  0x00, 0x03, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x44, 0x03, 0x03, 0x04, 0x00,
  0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00,
  0x00, 0xf0, 0x0f, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00,
  0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x52, 0x54, 0x53, 0x30, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44,
  0x4e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x43, 0x6f, 0x6d,
  0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45,
  0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x42, 0x61, 0x73, 0x69,
  0x63, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x4c, 0x69, 0x67, 0x68, 0x74,
  0x69, 0x6e, 0x67, 0x56, 0x63, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00,
  0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x25, 0x23, 0xf8, 0xf6, 0xda, 0xda, 0xca, 0x4a, 0x7c, 0xde, 0x5f,
  0xc0, 0x6a, 0xd3, 0xd4, 0x04, 0x44, 0x58, 0x49, 0x4c, 0xa4, 0x0f, 0x00,
  0x00, 0x60, 0x00, 0x01, 0x00, 0xe9, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49,
  0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x8c, 0x0f, 0x00,
  0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xe0, 0x03, 0x00,
  0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00,
  0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32,
  0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b,
  0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32,
  0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14,
  0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e,
  0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5,
  0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8,
  0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x30, 0x00, 0x00,
  0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4,
  0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c,
  0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x90, 0xc1, 0x08, 0x40, 0x09, 0x00,
  0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40,
  0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4,
  0x20, 0x03, 0x31, 0x0c, 0xc3, 0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06,
  0x62, 0x0a, 0x31, 0x10, 0xc3, 0x40, 0x4e, 0x51, 0x06, 0x62, 0x18, 0x86,
  0x61, 0x18, 0x86, 0x81, 0xa0, 0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90,
  0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x31, 0x0c,
  0xc3, 0x40, 0xc5, 0x3d, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x7e, 0x08,
  0x34, 0xc3, 0x42, 0xa0, 0x60, 0x2a, 0x84, 0x44, 0x50, 0x04, 0x55, 0xa5,
  0x18, 0x88, 0x61, 0x18, 0xe8, 0x9a, 0x23, 0x08, 0x8a, 0x41, 0x11, 0x05,
  0x41, 0x64, 0xa4, 0x0d, 0x04, 0x0c, 0x23, 0x10, 0xc3, 0x30, 0xc2, 0x30,
  0xe4, 0x80, 0x97, 0x04, 0xdd, 0x55, 0x87, 0x23, 0x4d, 0x0b, 0x80, 0x39,
  0xd4, 0xe4, 0xa7, 0x40, 0x04, 0x30, 0xc4, 0x44, 0x44, 0x12, 0x6a, 0x3a,
  0xcf, 0x1b, 0xbe, 0xef, 0xf3, 0xbc, 0x0e, 0xfc, 0x40, 0x0a, 0xd3, 0x81,
  0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87,
  0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0,
  0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40,
  0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10,
  0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2,
  0x28, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
  0xe4, 0x61, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0xe3, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x4f, 0x05, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x0b, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x1a, 0x10, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x81, 0x00, 0x11, 0x00, 0x00,
  0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26,
  0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x18, 0x0a, 0xd8,
  0xa0, 0x0c, 0xca, 0xa3, 0x1c, 0x8a, 0x80, 0x8a, 0x92, 0x18, 0x01, 0x28,
  0x84, 0x32, 0x28, 0x02, 0x12, 0x67, 0x00, 0x68, 0x1c, 0xcb, 0x61, 0x18,
  0xf8, 0x1f, 0xe0, 0x7f, 0x80, 0xff, 0x01, 0xfe, 0x87, 0x7b, 0xb8, 0x87,
  0x7b, 0x00, 0x02, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00,
  0x00, 0x66, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13,
  0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b,
  0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b,
  0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9,
  0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13,
  0x04, 0x42, 0x99, 0x20, 0x10, 0xcb, 0x06, 0x61, 0x20, 0x26, 0x08, 0x04,
  0xb3, 0x41, 0x18, 0x0c, 0x0a, 0x76, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26,
  0x08, 0x62, 0x70, 0x11, 0x98, 0x20, 0x10, 0xcd, 0x06, 0x84, 0x50, 0x16,
  0x82, 0x18, 0x18, 0x60, 0x43, 0xd0, 0x6c, 0x20, 0x00, 0xc0, 0x01, 0x26,
  0x08, 0x63, 0x80, 0x6d, 0x08, 0xa0, 0x09, 0x82, 0x00, 0xf0, 0xb2, 0x9a,
  0x12, 0x0a, 0x9b, 0x4b, 0x1b, 0xb3, 0x2a, 0x93, 0xa3, 0x2b, 0xc3, 0x63,
  0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0xb3, 0x1a, 0xe3, 0x32, 0x65,
  0xf5, 0x05, 0xf5, 0x36, 0x97, 0x46, 0x97, 0xf6, 0xe6, 0x36, 0x41, 0x28,
  0xa4, 0x09, 0x42, 0x31, 0x6d, 0x08, 0x88, 0x09, 0x42, 0x41, 0x4d, 0x10,
  0x08, 0x67, 0x82, 0x40, 0x3c, 0x1b, 0x84, 0x4c, 0xdb, 0xb0, 0x10, 0x54,
  0x65, 0x5d, 0xd6, 0x80, 0x11, 0xd6, 0x46, 0xc3, 0xe9, 0x49, 0xaa, 0x29,
  0x88, 0x69, 0x82, 0x50, 0x54, 0x13, 0x04, 0x02, 0xda, 0x20, 0x64, 0xdf,
  0x86, 0x65, 0xe8, 0x2a, 0xeb, 0xb2, 0x06, 0x6f, 0xb0, 0xc0, 0x60, 0x82,
  0x40, 0x44, 0x2c, 0x86, 0x9e, 0x98, 0x9e, 0xa4, 0x36, 0x2c, 0x62, 0x30,
  0x06, 0x95, 0x75, 0x59, 0x03, 0x26, 0x06, 0xd6, 0xb6, 0x61, 0xe0, 0xc2,
  0x80, 0x0c, 0x26, 0x08, 0x85, 0xb5, 0x61, 0x21, 0xc6, 0xa0, 0xb2, 0x2e,
  0x33, 0x18, 0x30, 0xc2, 0xda, 0x36, 0x04, 0xc3, 0x86, 0x65, 0x18, 0x83,
  0xca, 0x42, 0x03, 0x33, 0x18, 0xb0, 0xc1, 0xda, 0x36, 0x2c, 0x62, 0x40,
  0x55, 0xde, 0x85, 0x0d, 0x98, 0x18, 0x58, 0xdb, 0x86, 0xe1, 0x0c, 0xd2,
  0x40, 0x0d, 0x36, 0x0c, 0x65, 0xb0, 0x06, 0xc0, 0x86, 0x42, 0x9a, 0xd8,
  0xe0, 0x01, 0xaa, 0xb0, 0xb1, 0xd9, 0xb5, 0xb9, 0xa4, 0x91, 0x95, 0xb9,
  0xd1, 0x4d, 0x09, 0x82, 0x2a, 0x64, 0x78, 0x2e, 0x76, 0x65, 0x72, 0x73,
  0x69, 0x6f, 0x6e, 0x53, 0x02, 0xa2, 0x09, 0x19, 0x9e, 0x8b, 0x5d, 0x18,
  0x9b, 0x5d, 0x99, 0xdc, 0x94, 0xc0, 0xa8, 0x43, 0x86, 0xe7, 0x32, 0x87,
  0x16, 0x46, 0x56, 0x26, 0xd7, 0xf4, 0x46, 0x56, 0xc6, 0x36, 0x25, 0x40,
  0xca, 0x90, 0xe1, 0xb9, 0xc8, 0x95, 0xcd, 0xbd, 0xd5, 0xc9, 0x8d, 0x95,
  0xcd, 0x4d, 0x09, 0x9c, 0x3a, 0x64, 0x78, 0x2e, 0x76, 0x69, 0x65, 0x77,
  0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x02, 0xa8, 0x0e, 0x19,
  0x9e, 0x4b, 0x99, 0x1b, 0x9d, 0x5c, 0x1e, 0xd4, 0x5b, 0x9a, 0x1b, 0xdd,
  0xdc, 0x94, 0x80, 0x0d, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00,
  0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d,
  0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07,
  0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80,
  0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66,
  0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d,
  0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07,
  0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03,
  0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90,
  0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50,
  0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2,
  0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39,
  0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14,
  0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07,
  0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07,
  0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87,
  0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0,
  0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8,
  0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc,
  0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6,
  0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39,
  0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f,
  0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c,
  0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87,
  0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0,
  0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8,
  0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2,
  0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x06, 0x70, 0xbd, 0xec, 0x06, 0x48, 0x88,
  0xf0, 0x12, 0xd1, 0x44, 0x5c, 0x25, 0x62, 0x1c, 0x13, 0xd2, 0x18, 0xaf,
  0x60, 0x05, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x48, 0x03, 0x44, 0x98,
  0x5f, 0xdc, 0xb6, 0x1d, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54,
  0x51, 0x10, 0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xf9, 0xc5,
  0x6d, 0x5b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13,
  0x11, 0x02, 0xcd, 0xb0, 0x10, 0x36, 0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe,
  0xe0, 0x4c, 0xb7, 0x5f, 0xdc, 0xb6, 0x19, 0x38, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x38, 0x13, 0xee, 0x17, 0xb7, 0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce,
  0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x26,
  0x50, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81, 0x52, 0xd3,
  0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x86, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe,
  0x44, 0x44, 0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x11, 0x3c, 0xc3,
  0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x03, 0x00,
  0x00, 0x61, 0x20, 0x00, 0x00, 0x4b, 0x02, 0x00, 0x00, 0x13, 0x04, 0x41,
  0x2c, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x94, 0x8d, 0x00,
  0x50, 0x51, 0x02, 0x44, 0x14, 0x5c, 0x71, 0x95, 0x5d, 0x29, 0x14, 0xc2,
  0x0c, 0x40, 0xc9, 0x94, 0x5b, 0xa9, 0x94, 0x4b, 0x19, 0x95, 0x5c, 0x81,
  0x94, 0x48, 0x61, 0x94, 0x49, 0xa1, 0x94, 0x44, 0x51, 0x14, 0x44, 0x59,
  0x14, 0x4b, 0xc1, 0x14, 0x07, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8,
  0x37, 0x02, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0x02, 0x00, 0x00,
  0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xa0, 0xb5, 0x01, 0x04, 0x06,
  0x6b, 0xb0, 0x06, 0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x76,
  0x80, 0x99, 0x01, 0x1b, 0x90, 0xc1, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0xc6, 0x1d, 0x64, 0x67, 0xd0, 0x06, 0x1e, 0x36, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x06, 0x1e, 0x68, 0x68, 0xe0, 0x06, 0x63, 0x90, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x91, 0x07, 0x5b, 0x1a, 0xbc, 0x41,
  0x19, 0x68, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xe8, 0x01, 0x17,
  0x07, 0x70, 0x80, 0x06, 0xdb, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0x7b, 0xd0, 0xc9, 0x41, 0x1c, 0x88, 0x01, 0x37, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x06, 0x1f, 0x78, 0x73, 0x20, 0x07, 0x67, 0xd0, 0x8d, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0xd1, 0x07, 0xdf, 0x1c, 0xcc, 0xc1, 0x1a,
  0x78, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xf8, 0x01, 0x18, 0xd0,
  0x01, 0x1d, 0x94, 0xc1, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6,
  0x1f, 0x84, 0x41, 0x1d, 0xd4, 0x81, 0x1a, 0x80, 0xc1, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0xa0, 0x20, 0x06, 0x76, 0x60, 0x07, 0x6c, 0x10,
  0x06, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0xed, 0x41, 0x19, 0x30,
  0x73, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x15, 0x28,
  0xa8, 0x41, 0x04, 0x06, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3,
  0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x50, 0x95, 0xc2, 0x1b, 0x58, 0x64, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x60, 0xce, 0x24, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x54, 0xc1, 0x0e, 0x26, 0x27,
  0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6b, 0x15, 0xee, 0x60, 0x72,
  0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x58, 0x01, 0x0f, 0x26,
  0x27, 0xb0, 0xe6, 0x92, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c,
  0xae, 0xa0, 0x07, 0x57, 0x13, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1,
  0xf5, 0x0a, 0x7b, 0x70, 0x35, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x5c, 0xb0, 0xc0, 0x07, 0x57, 0x13, 0x18, 0xb3, 0xc9, 0x67, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0x2e, 0x59, 0xf0, 0x83, 0x8d, 0x09, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0x9a, 0x85, 0x3f, 0xd8, 0x98, 0x60, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x5a, 0x00, 0x85, 0x8d, 0x09, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xb2, 0x05, 0x50, 0x38, 0x03, 0x3a,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b,
  0x9a, 0xf8, 0xd8, 0xa0, 0xc4, 0xc7, 0x86, 0x23, 0x3e, 0x23, 0x06, 0x0b,
  0x00, 0x82, 0x60, 0xa0, 0x84, 0x83, 0x28, 0x0c, 0x42, 0x30, 0x08, 0xc1,
  0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xe1, 0x40, 0x0a, 0x81, 0x15,
  0x81, 0x7c, 0xac, 0x10, 0xe4, 0x63, 0xc5, 0x20, 0x9f, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0xa8, 0xc4, 0x81, 0x15, 0xe6, 0xe0, 0x0f, 0x46, 0x13,
  0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0x2a, 0x73, 0x80, 0x85, 0x3b, 0x10, 0x85, 0xd1, 0x84,
  0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x83, 0x4a, 0x1d, 0x68, 0x61, 0x0f, 0x5c, 0x61, 0x34, 0x21,
  0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6c, 0xd1, 0x03, 0xf9,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xe5, 0x0e, 0xba, 0xa0, 0x07,
  0x4b, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x3b, 0xec, 0x82,
  0x1e, 0x2c, 0x81, 0x29, 0x7d, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xb8, 0xe2, 0xa1, 0x17, 0xfa, 0x40, 0x09, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0xe0, 0x92, 0x07, 0x5f, 0xe8, 0x03, 0x25, 0xb0, 0x04, 0x14,
  0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x17, 0x3d, 0x80, 0x03,
  0x28, 0x24, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xf5, 0x10,
  0x0e, 0xa0, 0x90, 0x04, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xa0, 0xec,
  0x03, 0x2f, 0x1c, 0x44, 0x70, 0x10, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x30, 0xfb, 0xe0, 0x0b, 0x81, 0x05, 0x89, 0x7c, 0x4c, 0x38, 0xe4,
  0x63, 0x43, 0x21, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xf8,
  0xc1, 0x1c, 0x5a, 0xa1, 0x1e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08,
  0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0x90,
  0x50, 0x87, 0x58, 0xd8, 0x87, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82,
  0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x8a, 0x24,
  0xdc, 0xa1, 0x16, 0x7e, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60,
  0x34, 0x61, 0x10, 0x2c, 0x0d, 0x96, 0xf8, 0x58, 0x1a, 0x2c, 0xf1, 0xb1,
  0x34, 0x58, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0xca, 0x4b,
  0xc0, 0xc3, 0x20, 0x04, 0x83, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x01, 0xf3, 0x12, 0xf2, 0x10, 0x58, 0x40, 0xc8, 0xc7, 0x04, 0x42, 0x3e,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0xbd, 0x44, 0x3e, 0x80, 0xc3,
  0x3d, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0x33, 0xd1, 0x0f, 0xe4, 0xa0,
  0x12, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd5, 0x4d, 0x84, 0x04, 0x3a, 0xc4,
  0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x18,
  0x1f, 0x2c, 0xf1, 0x31, 0x3e, 0x58, 0xe2, 0x63, 0x7c, 0xb0, 0xc4, 0x67,
  0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x14, 0xb1, 0x18, 0x89, 0x41, 0x08,
  0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x46, 0x2c, 0x4a,
  0x22, 0xb0, 0x80, 0x90, 0x8f, 0x09, 0x84, 0x7c, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xa0, 0x12, 0x0b, 0x96, 0x98, 0x87, 0x95, 0x18, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xa8, 0xcc, 0x02, 0x26, 0xee, 0xe1, 0x1f, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0x2a, 0xb5, 0xa0, 0x89, 0x7d, 0x10, 0x89, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x57, 0x58, 0xe2, 0x63,
  0xaf, 0xb0, 0xc4, 0xc7, 0x5e, 0x61, 0x89, 0xcf, 0x88, 0xc1, 0x02, 0x80,
  0x20, 0x18, 0x28, 0x75, 0x61, 0x13, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0x4c, 0x5d, 0xe0, 0x44, 0x60, 0x01, 0x21,
  0x1f, 0x13, 0x08, 0xf9, 0xd8, 0x49, 0xdc, 0x41, 0x7c, 0x0c, 0x25, 0xee,
  0x20, 0x3e, 0x96, 0x12, 0x66, 0x10, 0x1f, 0x53, 0x09, 0x33, 0x88, 0x8f,
  0xad, 0x44, 0x15, 0x1f, 0x63, 0x89, 0x2a, 0x3e, 0x26, 0x0a, 0x7e, 0x20,
  0x1f, 0x73, 0x89, 0x20, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70,
  0xf1, 0x05, 0x5a, 0x20, 0xa3, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0xc1, 0xd5, 0x17, 0x69, 0x81, 0x8c, 0x42, 0x60, 0xa6, 0xf0, 0x06, 0xf2,
  0x31, 0x99, 0x08, 0xe2, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x17,
  0x68, 0xb0, 0x85, 0x72, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x5c, 0xa1, 0xd1, 0x16, 0xca, 0x29, 0x04, 0xa6, 0x0a, 0x60, 0x20, 0x1f,
  0xb3, 0x89, 0x20, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0x91,
  0x06, 0x5c, 0x30, 0xab, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1,
  0x55, 0x1a, 0x71, 0xc1, 0xac, 0x42, 0x60, 0x7f, 0xe0, 0x0a, 0xf2, 0xb1,
  0x80, 0x0f, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x17, 0x6a,
  0xd0, 0x05, 0x1f, 0xbc, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0x57, 0x6a, 0xd4, 0x05, 0x1f, 0xbc, 0x42, 0x60, 0x70, 0x20, 0x0b, 0xf2,
  0xb1, 0xa0, 0x0d, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x17,
  0x6b, 0xe0, 0x45, 0x1b, 0xcc, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x57, 0x6b, 0xe4, 0x45, 0x1b, 0xcc, 0x42, 0x60, 0x61, 0x60, 0x0b,
  0xf2, 0xb1, 0xc0, 0x93, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c,
  0xb0, 0xc1, 0x17, 0xde, 0x2d, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x70, 0xc5, 0x46, 0x5f, 0x78, 0xb7, 0x10, 0x0c, 0x47, 0x54, 0x66, 0x41,
  0x7c, 0xc3, 0x11, 0xd2, 0x59, 0x10, 0xdf, 0x70, 0xc4, 0x83, 0x16, 0xc4,
  0x37, 0xdd, 0x90, 0x16, 0x6a, 0x31, 0x4c, 0x37, 0xa8, 0xc5, 0x5a, 0x0c,
  0xd3, 0x0d, 0x6b, 0xc1, 0x16, 0x83, 0x0d, 0x9b, 0x7c, 0x6c, 0xc0, 0xe4,
  0x63, 0x43, 0x25, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0x78,
  0xc3, 0x34, 0xda, 0x42, 0x36, 0x46, 0x13, 0x82, 0x61, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0x1c, 0xf0, 0x00, 0x0d, 0x2a, 0x2e, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0xc0, 0x09, 0x8f, 0xd0, 0x88, 0xe4, 0x62, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x1c, 0xf1, 0x10, 0x0d, 0x67, 0x2e, 0x6c, 0x58,
  0xe4, 0x63, 0xc3, 0x22, 0x1f, 0x1b, 0x16, 0xf9, 0x8c, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x01, 0x73, 0x1e, 0xa7, 0x31, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0x01, 0x83, 0x1e, 0xa8, 0x31, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x01, 0x93, 0x1e, 0xa9, 0x31, 0xd8, 0xa0, 0xc8, 0xc7, 0x86, 0x45, 0x3e,
  0x36, 0x30, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0xa6, 0x3d,
  0x5c, 0x63, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0xc6, 0x3d, 0x5e,
  0x63, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0xe6, 0x3d, 0x60, 0x63,
  0xb0, 0xe1, 0x0d, 0xe4, 0x63, 0x03, 0x1b, 0xc8, 0xc7, 0x86, 0x34, 0x90,
  0x8f, 0x5d, 0xef, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8,
  0xe0, 0x83, 0x37, 0xae, 0x5e, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xe0, 0x8a, 0x8f, 0xde, 0xb8, 0x56, 0x21, 0x30, 0x2d, 0x1e, 0xe4, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x7c, 0xfc, 0x86, 0xf6, 0x0b,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xf4, 0x01, 0x1e, 0x5a,
  0x2b, 0x04, 0xd6, 0xcd, 0x83, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xe0, 0xb2, 0x0f, 0xf1, 0xe8, 0xc2, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0xeb, 0x3e, 0xc6, 0xa3, 0x7b, 0x85, 0x60, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0xaa, 0xfc, 0x18, 0x0f, 0xd5, 0xa8, 0x8f, 0xd1, 0x84,
  0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x61, 0x91, 0x8f,
  0x0d, 0x89, 0x7c, 0x6c, 0x38, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x15, 0x88, 0xa8, 0x47, 0x6c, 0xf4, 0xc7, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0x31, 0xc0, 0xc7, 0x8e, 0x01,
  0x3e, 0x76, 0x0c, 0xf0, 0x31, 0x4d, 0x24, 0xe4, 0x33, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0xd7, 0x89, 0xcc, 0x87, 0x06, 0x0f, 0xc1, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x5c, 0x28, 0x42, 0x1f, 0x9a, 0x2f, 0x04, 0xd6,
  0x91, 0x84, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x52, 0x11,
  0xfb, 0xe8, 0xe4, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6b,
  0x45, 0xee, 0xa3, 0x03, 0x87, 0xc0, 0xc0, 0xc0, 0x24, 0xe4, 0x33, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x8b, 0xe4, 0x07, 0x18, 0xd0, 0x43,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x8b, 0xe8, 0x07, 0x18,
  0x88, 0x43, 0x30, 0x9a, 0x40, 0x07, 0xc0, 0x68, 0x42, 0x1d, 0x04, 0xa3,
  0x09, 0x76, 0x20, 0xd8, 0xa0, 0xc8, 0xc7, 0x06, 0x44, 0x3e, 0x36, 0x18,
  0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xca, 0x46, 0x40, 0xe4,
  0x3c, 0xda, 0x63, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61,
  0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa,
  0x1d, 0x29, 0x11, 0xf6, 0xf0, 0x8f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xa8, 0xc0, 0x44, 0x45, 0xe2, 0xc3, 0x3e, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x2a, 0x93, 0x17, 0xb1, 0x8f, 0x15,
  0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1,
  0x04, 0x62, 0xb0, 0x69, 0x3e, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x97, 0x9a, 0xd8, 0xc8, 0x7c, 0x4c, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x5c, 0x6b, 0x72, 0x23, 0xf3, 0x31, 0x05, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x70, 0xb1, 0x09, 0x8e, 0xcc, 0xc7, 0x14, 0x98, 0x74,
  0x1f, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xcb, 0x4d, 0x74,
  0xe4, 0x3e, 0xa4, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xae, 0x37,
  0xd9, 0x91, 0xfb, 0x90, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8,
  0xe0, 0x84, 0x47, 0xee, 0x43, 0x0a, 0x2c, 0xda, 0x0f, 0xf9, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0xc1, 0x25, 0x27, 0x3e, 0xb2, 0x1f, 0x51, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x9c, 0xfc, 0xc8, 0x7e, 0x44,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x74, 0x02, 0x26, 0xfb,
  0x11, 0x05, 0x06, 0xfd, 0x87, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xe0, 0xb2, 0x13, 0x31, 0xf9, 0x0f, 0x28, 0x18, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0xeb, 0x4e, 0xc6, 0xe4, 0x3f, 0xa0, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x2e, 0x3c, 0x21, 0x93, 0xff, 0x80, 0x82, 0xd1, 0x84,
  0x50, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xda, 0x93, 0x32,
  0x61, 0x11, 0x18, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d,
  0x18, 0x84, 0xd1, 0x04, 0x62, 0x18, 0x31, 0x68, 0x00, 0x10, 0x04, 0x03,
  0x28, 0x54, 0xd8, 0x24, 0x45, 0x50, 0xe4, 0x44, 0x4c, 0x84, 0x18, 0x84,
  0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18, 0x52, 0xc1, 0x93, 0xc0,
  0xfc, 0x40, 0x46, 0xe4, 0x63, 0x7e, 0x20, 0x23, 0xf2, 0x31, 0x3f, 0x90,
  0x11, 0xf9, 0xd8, 0x22, 0x23, 0xf2, 0x19, 0x31, 0x48, 0x00, 0x10, 0x04,
  0x03, 0x64, 0x55, 0xde, 0x44, 0x54, 0x44, 0x45, 0x4f, 0x88, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x40, 0x56, 0xe5, 0x4d, 0x44, 0x45, 0x54, 0xe6,
  0x64, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x64, 0x55, 0xde, 0x44,
  0x54, 0x44, 0xe5, 0x4e, 0x84, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40,
  0x56, 0xe5, 0x4d, 0x44, 0x45, 0x54, 0xf0, 0x24, 0x18, 0x31, 0x48, 0x00,
  0x10, 0x04, 0x03, 0x64, 0x55, 0xde, 0x64, 0x54, 0x44, 0x45, 0x4f, 0xe6,
  0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x55, 0x79, 0x93, 0x51,
  0x11, 0x95, 0x39, 0x91, 0x83, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40,
  0x56, 0xe5, 0x4d, 0x46, 0x45, 0x54, 0xee, 0x24, 0x0e, 0x46, 0x0c, 0x12,
  0x00, 0x04, 0xc1, 0x00, 0x59, 0x95, 0x37, 0x19, 0x15, 0x51, 0xc1, 0x93,
  0x62, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x55, 0x79, 0x13, 0x3e,
  0x11, 0x15, 0x3d, 0xc9, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x59,
  0x95, 0x37, 0xe1, 0x13, 0x51, 0x99, 0x93, 0x6a, 0xc4, 0x20, 0x01, 0x40,
  0x10, 0x0c, 0x90, 0x55, 0x79, 0x13, 0x3e, 0x11, 0x95, 0x3b, 0x89, 0x46,
  0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x59, 0x95, 0x37, 0xe1, 0x13, 0x51,
  0xc1, 0x93, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
};
